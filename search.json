[{"title":"基于实时深度学习的推荐系统架构设计和技术演进","url":"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/","content":"<h1 id=\"一、实时推荐系统的原理\"><a href=\"#一、实时推荐系统的原理\" class=\"headerlink\" title=\"一、实时推荐系统的原理\"></a>一、实时推荐系统的原理</h1><p>在介绍实时推荐系统的原理之前，先来看一个传统、经典的静态推荐系统。</p>\n<p>用户的行为日志会出现在消息队列里，然后被ETL到特征生成和模型训练中。这部分的数据是离线的，离线的模型更新和特征更新会被推到在线系统里面，比如特征库和在线推理的服务中，然后去服务在线的搜索推广应用。这个推荐系统本身是一个服务，前端展示的服务推广应用可能有搜索推荐、广告推荐等。那么这个静态系统到底是怎么工作的？我们来看下面的例子。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"静态推荐系统\"><a href=\"#静态推荐系统\" class=\"headerlink\" title=\"静态推荐系统\"></a>静态推荐系统</h2><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/d81d11ccdec5497791b8a043756b12b5-6457732.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>截取现在用户的行为日志，倒入离线系统中去做特征生成和模型训练，这段日志表示用户 1 和用户 2 同时浏览了 page#200 这个页面和其他一些页面，其中用户 1 浏览了 page#100 并且点击了 ads#2002。那么这个日志会被 ETL 到离线，然后送去做特征生成和模型训练。生成的特征和模型里面会看到，用户 1 和用户 2 都是中国男性用户，“中国男性”是这两个用户的一个特征，这个学习模型最终结果是：中国男性用户浏览了 page#100 的时候，需要给他推 ads#2002。这里面的逻辑就是把相似用户的行为归到一起，说明这类用户应该有同样的行为。</p>\n<p>用户特征推进特征库建立的模型，在推送至在线服务里的时候如果有一个用户 4 出现，在线推理的服务就会到特征库里面去查这个用户的特征，查到的特征可能是这个用户正好是中国的男性用户，模型之前学到了中国男性用户访问 page#100 时候要推 ads#2002，所以会根据学习模型给用户 4 推荐了 ads#2002。以上就是静态推荐系统的基本工作流程。</p>\n<p>但是这个系统也有一些问题，比如第一天的模型训练完成后，发现用户 4 第二天的行为其实跟用户 3 更像，不是和用户 1、用户 2 类似 。但是之前模型训练的结果是中国男性用户访问 page#100 时候要推 ads#2002，并且会默认进行这种推荐。只有经过第二次模型计算后才能发现用户 4 和用户 3 比较像，这时再进行新的推荐，是有延迟的。这是因为模型和特征都是静态的。</p>\n<p>对于静态推荐系统来讲，特征和模型都是静态生成的。比如以分类模型为例，根据用户的相似度进行分类，然后假设同类用户都有相似的行为兴趣和特征，一旦用户被化成了某一类，那么他就一直在这个类别中，直到模型被重新训练。</p>\n<h2 id=\"静态推荐系统问题\"><a href=\"#静态推荐系统问题\" class=\"headerlink\" title=\"静态推荐系统问题\"></a>静态推荐系统问题</h2><ul>\n<li>第一，用户行为其实是非常多元化的，没有办法用一个静态的事情去描述这个用户的行为。</li>\n<li>第二，某一类用户的行为可能比较相似，但是行为本身发生了变化。例如中国男性用户访问page#100时候要推ads#2002，这是昨天的行为规律；但是到了第二天的时候发现不是所有的中国男性用户看到page#100时候都会点击ads#2002。</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"加入实时特征工程后能够灵活推荐\"><a href=\"#加入实时特征工程后能够灵活推荐\" class=\"headerlink\" title=\"加入实时特征工程后能够灵活推荐\"></a>加入实时特征工程后能够灵活推荐</h3><p>在推荐系统中加入实时特征工程，把消息队列里面的消息读一份出来，然后去做近线的特征生成。举个例子，中国男性用户最近访问 page#100 的时候点击最多的 10 个广告，这件事情是实时去追踪的。就是说中国男性用户最近 10 分钟或者半个小时之内访问 page#100 的时候点的最多 10 个广告，个事情不是从昨天的历史数据里面得到的信息，而是今天的用户实时行为的数据，这就是实时特征。</p>\n<p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/ab499505e1854114b862cab4f758d9ef-6493950.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>有了这个实时特征以后，就能解决刚才那个随大流的问题。同样的，如果这里的特征是对某一个用户最近 3 分钟或者 5 分钟的行为采集的，就能够更加准确的追踪到这个用户当时当刻的意图，并且给这个用户去做更准确的推荐。</p>\n<p>所以说，在推荐系统中加入实时特征后能精准推荐。比如刚才的例子，如果用户 4 在这个情况下访问 page#100，新的学习内容为：中国男性用户最近访问 page#100 的时候，点的最多的是 ads#2001。那我们会直接推荐 ads#2001，而不是按照昨天的信息给他推 ads#2002。</p>\n<h3 id=\"实时特征推荐体系的局限性\"><a href=\"#实时特征推荐体系的局限性\" class=\"headerlink\" title=\"实时特征推荐体系的局限性\"></a>实时特征推荐体系的局限性</h3><p>之前的用户 1 和用户 2 的行为是非常相似的，加了实时特征就能知道它当前的意图。但是，如果用户 1 和用户 2 在做相同的特征时，他们的行为产生了不一致；也就是说在模型里面被认为是同一类的用户，他们的行为产生分化了，变成了两类用户。如果是静态的模型，即使加入了实时特征，也无法发现这一类新的用户；需要对模型进行重新训练以后，才能够产生一个新的分类。</p>\n<p>加入实施特征工程推荐系统后，可以追踪某一类用户的行为，贴合一个大流的变化；也可以实时追踪用户的表现，了解用户当时的意图。但是当模型本身的分类方式发生变化的时候，就没有办法找到最合适的分类了，需要重新对训练模型进行分类，这种情况会遇到很多。</p>\n<p>比如说当有很多新产品上线时，业务在高速增长，每天都会产生很多的新用户，或者说用户行为分布变化得比较快。这种情况下即使使用了实时特征系统，由于模型本身是一个逐渐退化的过程，也会导致昨天训练的模型今天再放到线上去，不一定能够 work 的很好。</p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>在推荐系统中新增两个部分：近线训练和近线样本生成。</p>\n<p>假设有用户 1 和用户 2 分别是上海和北京的用户，这个时候会发现之前的模型不知道上海和北京的用户是有区别的，它认为都是中国男性用户。而在加入实时训练这个模型后，就会逐渐的学习北京的用户和上海的用户，两者的行为是有区别的，确认这一点后再进行推荐就会有不一样的效果。</p>\n<p>再比如说，今天北京突然下暴雨了或者上海天气特别热，这个时候都会导致两边用户的行为不太一样。这时再有一个用户 4 过来，模型就会分辨这个用户是上海还是北京的用户。如果他是上海的用户，可能就会推荐上海用户所对应的内容；如果不是的话，可以继续推荐别的。</p>\n<p>加入实时模型训练，最主要的目的是在动态特征的基础上，希望模型本身能够尽可能的贴合此时此刻用户行为的分布，同时希望能够缓解模型的退化。</p>\n<h1 id=\"二、阿里巴巴实时推荐方案\"><a href=\"#二、阿里巴巴实时推荐方案\" class=\"headerlink\" title=\"二、阿里巴巴实时推荐方案\"></a>二、阿里巴巴实时推荐方案</h1><p>首先了解下阿里内部实施完这套方案之后有什么好处：</p>\n<ul>\n<li><p>第一个是时效性。目前阿里大促开始常态化，在大促期间整个模型的时效性得到了很好的提升；</p>\n</li>\n<li><p>第二个是灵活性。可以根据需求随时调整特征和模型；</p>\n</li>\n<li><p>第三个是可靠性。大家在使用整个实时推荐系统的时候会觉得不放心，没有经过离线当天晚上大规模的计算验证，直接推上线，会觉得不够可靠，其实已经有一套完整的流程去保证这件事情的稳定性和可靠性；</p>\n<p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/54647c7b80224cf486f72ae6c32cd466-6494045.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n</li>\n</ul>\n<p>这个推荐模型从图上看，从特征到样本到模型，再到在线预测这个过程，和离线其实没有区别。主要的区别就是整个的流程实时化，用这套实时化的流程去服务在线的搜索推广应用。</p>\n<h2 id=\"如何实施\"><a href=\"#如何实施\" class=\"headerlink\" title=\"如何实施\"></a>如何实施</h2><p>根据经典离线架构进行演变。</p>\n<p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/7f68e64ed1d245f6a993180f890bae4e-6494096.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>首先，用户群行为会从消息队列来走离线存储，然后这个离线存储会存储所有的历史用户行为；然后在这个离线存储上面，通过静态特征计算样本；接下来把样本存到样本存储里，去做离线模型训练；之后把离线的这个模型发布到模型中心，去做模型验证；最后把模型验证过的模型推到推理服务去服务在线业务。这个就是完整的离线体系。</p>\n<p>我们将通过三件事情进行实时化改造：</p>\n<ul>\n<li>第一是特征计算；</li>\n<li>第二是样本生成；</li>\n<li>第三是模型训练。</li>\n</ul>\n<p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/58ee3d6d55fbb2fb3164162ec9f7e3ac4723dc81.jpeg\" alt=\"img\"></p>\n<p>相比之前，消息队列不仅仅存入离线存储，还要分出来两链路：</p>\n<ul>\n<li>第一链路会做实时的特征计算，比如说最近几分钟之内中国男性用户看 page#100 的时候点了什么广告，这个是实时计算算出来的，即最近一段时间的一些用户可能产生的一些行为特征等。</li>\n<li>另外一条链路是消息队列，可以进行实时样本拼接，就是说不需要手动去打标签，因为用户自己会告诉我们标签。比如我们做了一个推荐，如果用户点击了，那么它一定是个正样本；如果过了一段时间用户没有点击，那我们认为它就是个负样本。所以不用人工去打标签，用户会帮我们打标签，这个时候很容易就能够得到样本，然后这部分样本会放到样本存储里面去，这个跟之前是一样的。区别在于这个样本存储不仅服务离线的模型训练，还会去做实时的模型训练。</li>\n</ul>\n<p>离线模型训练通常还是天级的 T+1 的，会训练出一个 base model ，交给实时模型训练去做增量的训练。增量模型训练的模型产出就可能是 10 分钟、15 分钟这样的级别，然后会送到模型存储做模型验证，最后上线。</p>\n<p>架构图中绿色的部分都是实时的，这部分有一些是新加出来的，有一些则是由原本的离线变成实时的。</p>\n<h2 id=\"阿里云企业级实时推荐解决方案\"><a href=\"#阿里云企业级实时推荐解决方案\" class=\"headerlink\" title=\"阿里云企业级实时推荐解决方案\"></a>阿里云企业级实时推荐解决方案</h2><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/10c92a3a5ce34b219d5fc58e6addd809-6494146.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>在阿里云企业级实时推荐解决方案中，如何使用阿里云产品搭建？</p>\n<p>消息队列会用 DataHub；实时的特征和样本使用实时计算 Flink 版；离线的特征存储和静态特征计算都会用 MaxCompute；特征存储和样本中心使用 MaxCompute 交互式分析（Hologres）；消息队列的部分都是 DataHub；模型训练的部分会用到 PAI，模型存储和验证，还有在线推理服务这一套流程都是 PAI 里面的。</p>\n<h3 id=\"实时特征计算及推理\"><a href=\"#实时特征计算及推理\" class=\"headerlink\" title=\"实时特征计算及推理\"></a>实时特征计算及推理</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/7accf2b9b5f241b99b6981eb67ef5969-6494177.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>特征和推理就是把用户日志实时采集过来，导入实时计算 Flink 版里面去做实时特征计算。然后会送到 Hologres 里面去，利用 Hologres 流式的能力，拿它做特征中心。在这里，PAI 可以去直接查询 Hologres 里面的这些用户特征，也就是点查的能力。</p>\n<p>在实时计算 Flink 版计算特征的时候，比如说用户最近 5 分钟的浏览记录，包括商品、文章、视频等，根据不同的业务属性，实时特征是不一样的。也可能包括比如最近 10 分钟每个品类点击率最高的 50 个商品，最近 30 分钟浏览量最高的文章、视频、商品，最近 30 分钟搜索量最高的是 100 个词等。在这不同的场景，比如搜索推荐，有广告、有视频、有文本、有新闻等。这些数据拿来做实时特征计算的和推理的这一条链路，然后在这个链路基础之上，有的时候也是需要静态特征回填的。</p>\n<h3 id=\"静态特征回填\"><a href=\"#静态特征回填\" class=\"headerlink\" title=\"静态特征回填\"></a>静态特征回填</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/c716458705c64d07aecb30ea76a5fd7c-6494208.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>比如新上线一个特征，这个新的特征在实时链路上线了之后，如果需要最近 30 天用户的行为，不可能等 30 天之后再计算。于是需要找到离线数据，然后把最近 30 天的这个特征给它补上。这就叫特征回填，也就是 backfill 。通过 MaxCompute 去算这个特征回填一样也是写到 Hologres，同时实施起来也会把新的特征给加上，这是一个新特征的场景。</p>\n<p>当然还有一些其他场景，比如算一些静态特征；再比如可能线上特征有一个 bug 算错了，但是数据已经落到离线去了，这时候对离线特征要做一个纠错，也会用到 backfill 的过程。</p>\n<h3 id=\"实时样本拼接\"><a href=\"#实时样本拼接\" class=\"headerlink\" title=\"实时样本拼接\"></a>实时样本拼接</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/8fb47ef913c441619d46661f11dae2ea-6494234.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>实时样本拼接本质上对于推荐场景来讲，就是展示点击流之后，样本获得一个正样本或者负样本。但是这个 label 显然是不够的，还需要有特征，才能够做训练。特征可以从 DataHub 中来，在加入了实时特征以后，样本的特征是时时刻刻在发生变化的。</p>\n<p>举一个例子，做出某一个商品的推荐行为的时候，是早上 10:00，用户的实时特征是他 9:55 到 10:00 的浏览记录。但是当看到这个样本流回来的时候，有可能是 10:15 的时候了。如果说这个样本是一个正样本，当给到用户推荐的商品且他产生了购买行为，这段时间我们是无法看到用户实时特征的。</p>\n<p>因为那个时候的特征已经变成了用户从 10:10 浏览到 10:15 的时候的浏览记录了。但是在做预测的时候，并不是根据这个 5 分钟内的浏览记录来推荐的这个商品，所以需要把当时做推荐的时候所采用的那些特征给它保存下来，在这个样本生成的时候给它加上，这就是 DataHub 在这里的作用。</p>\n<p>当使用 ES 做实时推荐的时候，需要把当时用来做推荐的这些特征保存下来，拿去做这个样本的生成。样本生成后，可以存储到 Hologres 和 MaxCompute 里面去，把实时样本存储到 DataHub 里面。</p>\n<h3 id=\"实时深度学习和-Flink-AI-Flow\"><a href=\"#实时深度学习和-Flink-AI-Flow\" class=\"headerlink\" title=\"实时深度学习和 Flink AI Flow\"></a>实时深度学习和 Flink AI Flow</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/14fbb75f1f914f0fa99b6b914121d629-6494261.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>这个部分会有离线训练是以 “天“ 为级别的；也会有在线的实时训练是 “分钟级” 的；有的可以做的比较极致，是按 “秒” 级的。不管是哪边出来的模型，最后都会送到这个模型中去，进行模型的验证以及上线。</p>\n<p>这个其实是一个非常复杂的工作流。首先，静态特征计算是周期性的，也可能是手动的。当需要做 backfill 的时候，有手动触发的一个过程。根据这个模型图能看出它是批的训练，当它训练完了之后，需要到线上去做一个实时模型验证。这个模型验证可能是一个流作业，所以这里是从批到流的一个触发过程，模型是从流作业里面出来的，它是一个 long running 的作业，每 5 分钟产生一个模型，这每 5 分钟的模型也需要送进去做这个模型验证，所以这是一个流触发流动作的过程。</p>\n<p>再比如说这个实时样本拼接，大家都知道 Flink 有一个 watermark 的概念，比如说到某一个时刻往前的数据都到收集齐了，可以去触发一个批的训练，这个时候就会存在一个流作业。当他到了某一个时刻，需要去触发批训练的时候，这个工作流在传统的工作流调度里面是做不到的，因为传统的工作流调度是基于一个叫做 job status change 的过程来做的，也就是作业状态发生变化。</p>\n<p>假设说如果一个作业跑完了并且没有出错，那么这个作业所产生的数据就已经 ready 了，下游对这些数据有依赖的作业就可以跑了。所以简单来说，一个作业跑完了下一个作业延续上继续跑，但是当整个工作流里面只要有一个流作业的存在，那么这整个工作流就跑不了了，因为流作业是跑不完的。</p>\n<p>比如说这个例子的实时计算，数据是不断变化的跑动，但是也会存在随时可能 ready 的，也就是说可能跑到某一个程度的时候数据就 ready 了，但其实作业根本没有跑完。所以需要引入一个工作流，这个工作流我们把它叫做 Flink AI Flow，去解决刚才那个图里面各个作业之间的协同关系这个问题。</p>\n<p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/26569a273afc49338a613e1247da06f4-6494286.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>Flink AI Flow 本质上是说节点都是一个 logical 的 processing unit，是一个逻辑处理节点，节点和节点之间，不再是上一个作业跑完跑下一个作业的关系了，而是一个 event driven 的 conditions，是一个事件触发的一个概念。</p>\n<p>同样在工作流执行层面，调度器也不再基于作业状态发生变化去做调度动作，而是基于事件的调度。比方说事件调度这个例子，当一个流作业的 water mark 到了的时候，就是说这个时间点之前的所有数据都到全了，可以去触发批作业去跑，并不需要流作业跑完。</p>\n<p>对于每一个作业来讲，通过调度器提作业或者停作业是需要条件的。当这些事件满足一个条件的时候，才会进行调度动作。比如说有一个模型，当模型生成的时候，会满足一个条件，要求调度器把一个 validation 的作业模型验证的作业给拉起来，那这个就是由一个 event 产生了一个 condition，要求 schedule 去做一件事情的过程。</p>\n<p>除此之外，Flink AI Flow 除了调度的服务之外，还提供了三个额外的支持服务来满足整个 AI 工作流语义，分别是元数据服务、通知服务和模型中心。</p>\n<ul>\n<li>元数据服，是帮大家管理数据集和整个工作流里面的一些状态；</li>\n<li>通知服务，是为了满足基于事件调度语义；</li>\n<li>模型中心，是去管理这个模型当中的一些生命周期。</li>\n</ul>\n<h1 id=\"三、实时深度学习训练-PAI-ODL\"><a href=\"#三、实时深度学习训练-PAI-ODL\" class=\"headerlink\" title=\"三、实时深度学习训练 PAI-ODL\"></a>三、实时深度学习训练 PAI-ODL</h1><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/52bb61daedbf48e69cda41a5e9c83176-6494326.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>Flink 生成实时样本之后，在 ODL 系统有两个流。</p>\n<ul>\n<li>第一个流是实时流，生成的实时样本送到 stream data source 上面比如像 kafka，在 kafka 中的这个样本会有两个流向，一个是流到 online training 中，另一个是流到 online evaluation 。</li>\n<li>第二个流是离线训练的数据流，拿离线的数据流向数仓来做这种 offline T+1 的 training 。</li>\n</ul>\n<p>在 online training 中支持用户可配置生成模型的频率，比如说用户配置 30 秒或者 1 分钟生成一次模型更新到线上。这个满足在实时推荐场景中，特别是时效性要求高的场景。</p>\n<p>ODL 支持用户设定一些指标来自动判断生成的模型是否部署线上，当 evaluation 这边达到这些指标要求之后，这个模型会自动推上线。因为模型生成的频率非常高，通过人工去干预不太现实。所以需要用户来设定指标，系统自动去判断当指标达到要求，模型自动回推到线上。</p>\n<p>离线流这边有一条线叫 model calibration，也就是模型的校正。离线训练生成 T+1 的模型会对在线训练进行模型的校正。</p>\n<h2 id=\"PAI-ODL-技术点分析\"><a href=\"#PAI-ODL-技术点分析\" class=\"headerlink\" title=\"PAI-ODL 技术点分析\"></a>PAI-ODL 技术点分析</h2><h3 id=\"超大稀疏模型训练\"><a href=\"#超大稀疏模型训练\" class=\"headerlink\" title=\"超大稀疏模型训练\"></a>超大稀疏模型训练</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/e0b3b7d0057646d085e2a9e4d25eb733-6494426.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>超大稀疏模型的训练，是推荐搜索广告这类稀疏场景里常用的一个功能。这里实际上是一个典型、传统的深度学习引擎，比如像 TensorFlow，它原生的内部实现的就是 fix size 这种固定 size variable，在稀疏场景使用中会有一些常见问题。</p>\n<p>就像 static shape，比如在通常的场景里边，像手机 APP 这种，每天都会有新用户来加入，每天也会有新的商品，新闻和新的视频等更新。如果是一个固定大小的 shape 的话，其实是无法表达稀疏场景中这种变化的语义的。而且这个 static shape 会限制模型本身长期的增量训练。如果说一个模型可增量训练时长是一两年，那很可能之前设定的这个大小已经远远不能满足业务需求，有可能带来严重的特征冲突，影响模型的效果。</p>\n<p>如果在实际的模型中设置的 static shape 比较大，但是利用率很低，就会造成内存的浪费，还有一些无效的 IO。包括生成全量模型的时候，造成磁盘的浪费。</p>\n<p>在 PAI-ODL 中基于 PAI-TF 引擎，PAI-TF 提供了 embedding variable 功能。这个功能提供动态的弹性特征的能力。每个新的特征会新增加一个 slot。并支持特征淘汰，比如说下架一个商品，对应的特征就会被删掉。</p>\n<p>增量模型是说可以把一分钟内稀疏特征变化的部分记录下来，产生到这个增量模型中。增量模型记录了稀疏的变化的特征和全量 Dense 的参数。</p>\n<p>基于增量模型的导出，就可以实现 ODL 场景下模型的快速更新。快速更新的增量模型是非常小的，可以做到频繁的模型上线。</p>\n<h3 id=\"支持秒级的模型热更新\"><a href=\"#支持秒级的模型热更新\" class=\"headerlink\" title=\"支持秒级的模型热更新\"></a>支持秒级的模型热更新</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/7ba8667f975c440caef888d43807c32e-6494458.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>通常在我们接触的用户中，通常是关注的主要是三点：</p>\n<ul>\n<li>第一点就是模型的效果，我上线之后效果好不好？</li>\n<li>第二点就是成本，我到底花多少钱。</li>\n<li>第三点就是性能，能不能达到我对RT的要求。</li>\n</ul>\n<p>embedding store 多级的混合存储支持用户可配置不同的存储方式。可以在满足用户性能的前提下，更大程度的降低用户的成本。</p>\n<p>embedding 场景是非常有自己场景特点的，比如说我们的特征存在很明显的冷热区别。有些商品或者视频本身特别热；有些则是用户的点击行为特别多，也会造成它特别热。有些冷门的商品或者视频就没人点，这是很明显的冷热分离，也是符合这种二八原则的。</p>\n<p>EmbeddingStore 会把这些热的特征存储到 DRAM 上面，然后冷的特征存放在 PMEM 或者是 SSD 上。</p>\n<h3 id=\"超大稀疏模型预测\"><a href=\"#超大稀疏模型预测\" class=\"headerlink\" title=\"超大稀疏模型预测\"></a>超大稀疏模型预测</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/8cd22078d4604c5d8b6f54e08506255a-6494492.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>此外，EmbeddingStore 支持分布式存储 Service。在 serving 的时候，每个 serving 的节点其实都需要去做一个全量的模型的加载。如果使用 EmbeddingStore 的分布式 service，就可以避免每个 serving 节点加载全量模型。</p>\n<p>EmbeddingStore 支持用户可配置这种分布式的 embedding， 独立的 isolated 这种 embedding store service。每个 serving 节点查询稀疏特征时从 EmbeddingStore Service 查询。</p>\n<p>EmbeddingStore 的设计充分的考虑了稀疏特征的数据格式和访问特点。举个简单的例子：稀疏特征的 key 和 value ，key 是 int64 ， value 就是一个 float 数组。无论是在 serving 还是在 training，访问都是大批量的访问。此外 Inference 阶段对稀疏特征的访问是无锁化的只读访问。这些都是促使我们设计基于 embedding 场景的稀疏特征存储的原因。</p>\n<h3 id=\"实时训练模型校正\"><a href=\"#实时训练模型校正\" class=\"headerlink\" title=\"实时训练模型校正\"></a>实时训练模型校正</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/902a3a57e6894191a00b9841eff968e2-6494525.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>为什么 PAI-ODL 会支持离线训练模型对 online training 有一个模型校正？</p>\n<p>通常在实时训练过程中，会存在这种 label 不准以及样本分布的问题。因此使用天级别的模型会自动校正到 online training，增强模型的稳定性。PAI-ODL 提供的模型校正用户是无干预的，用户基于自己业务特点配置相关配置后，每天自动根据新产生的全量模型进行 online training 端的 base 模型校正。当离线训练生成 base 模型，online training 会自动发现 base model，并且在 data stream source 会自动跳转到对应的样本，基于最新的 base 模型和新的 online training 的训练样本点开始 online training。</p>\n<h3 id=\"模型回退及样本回放\"><a href=\"#模型回退及样本回放\" class=\"headerlink\" title=\"模型回退及样本回放\"></a>模型回退及样本回放</h3><p><img src=\"/2021/07/17/SystemDesign/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%97%B6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/5de361033b25468e802b8b0fe3f1657e-6494553.png\" alt=\"基于实时深度学习的推荐系统架构设计和技术演进\"></p>\n<p>虽然有样本的异常样本检测以及异常样本处理，仍然无法避免线上的更新模型会有效果问题。</p>\n<p>当用户收到报警，线上的指标下降。需要提供给用户一个能力，可以回滚这个模型。</p>\n<p>但是在 online training 的场景中，从发现问题到去干预可能经过了好几个模型的迭代，产出了若干模型了。此时的回滚包含：</p>\n<p>1）线上 serving 的模型回滚到问题时间点的前一个模型；</p>\n<p>2）同时 online training 需要回跳到问题模型的前一个模型；</p>\n<p>3）样本也要回跳到那个时间点来重新开始进行训练。</p>\n","categories":["系统设计"],"tags":["系统设计"]},{"title":"Maven自定义脚手架","url":"/2021/11/20/devops/maven/maven-define-archetype/","content":"<h1 id=\"Maven自定义脚手架\"><a href=\"#Maven自定义脚手架\" class=\"headerlink\" title=\"Maven自定义脚手架\"></a>Maven自定义脚手架</h1><p>在实际开发中，例如银行项目，大部分都是ssm架构，我们完全可以抽取出一个公共的模板，方便后续项目的构建，再比如分布式开发中我们通常会构建多个子模块，这样的构建是很耗时的，我们也完全可以将搭建好的项目构建成为自己的脚手架，方便后续有类似的项目开发。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"创建步骤\"><a href=\"#创建步骤\" class=\"headerlink\" title=\"创建步骤\"></a>创建步骤</h1><p>1、定义自己的项目，搭建基础的框架，添加基础设施 </p>\n<p>创建自定义项目结构</p>\n<p>做一个简单地demo</p>\n<p>2、进入项目根目录下，打开终端或者cmd命令窗口，执行 mvn archetype:create-from-project 生成脚手架，然后进入target/generated-sources/archetype目录下，可以看到脚手架已经生成，执行mvn clean install 安装到本地仓库，这样脚手架就安装成功</p>\n<p>3、利用脚手架创建新的项目，新建一个空白目录，进入后执行 mvn archetype:generate -DarchetypeCatalog=local 然后等待命令提示，选择你的脚手架并且输入group、archetype、version后，mvn便会自己将项目创建好，这里需要注意的是 -DarchetypeCatalog=local这个参数，如果不添加则mvn会去远程加载archetypeCatalog.xml文件，这个文件是非常大的，构建过程也会变的很慢，指定后则会去读取本地的archetypeCatalog.xml文件，这个文件在我们构建脚手架时会被自动在本地mvn仓库中创建。</p>\n<h1 id=\"卸载maven-install及删除archetype\"><a href=\"#卸载maven-install及删除archetype\" class=\"headerlink\" title=\"卸载maven install及删除archetype\"></a>卸载maven install及删除archetype</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">//第一步,从Maven本地仓库删除jar</span><br><span class=\"line\">//清除某个jar</span><br><span class=\"line\">mvn dependency:purge-local-repository -DmanualInclude=<span class=\"string\">&quot;groupId:artifactId&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">//清除多个属于不同groupId的jar</span><br><span class=\"line\">mvn dependency:purge-local-repository -DmanualInclude=<span class=\"string\">&quot;groupId1:artifactId1,groupId2:artifactId2,...&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">//第二步,阻止Maven对已删除的jar进行reResolve</span><br><span class=\"line\">mvn dependency:purge-local-repository -DreResolve=<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 如果无效则执行如下操作</span></span><br><span class=\"line\">Using the following <span class=\"built_in\">command</span> to refresh catalog </span><br><span class=\"line\">mvn archetype:crawl</span><br><span class=\"line\">or using archetype:update-local-catalog to update your catalog based on your <span class=\"built_in\">local</span> repository.</span><br><span class=\"line\">Please refer to the Maven Archetype document.</span><br><span class=\"line\">http://maven.apache.org/plugins/maven-archetype-plugin/index.html</span><br></pre></td></tr></table></figure>\n\n","categories":["devops"],"tags":["maven"]},{"title":"k8s线上安装jenkins并结合jenkinsfile实现helm自动化部署","url":"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/","content":"<h1 id=\"k8s线上安装jenkins并结合jenkinsfile实现helm自动化部署\"><a href=\"#k8s线上安装jenkins并结合jenkinsfile实现helm自动化部署\" class=\"headerlink\" title=\"k8s线上安装jenkins并结合jenkinsfile实现helm自动化部署\"></a>k8s线上安装jenkins并结合jenkinsfile实现helm自动化部署</h1><h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><ol>\n<li>开发人员通过上传 gitlab 新分支代码，通过 jenkinsfile 结合jenkins 自动发现分支并自动化部署该分支对应的容器 </li>\n<li> 更新代码可以实现容器平滑更新</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ol>\n<li>k8s 1.16 高可用集群环境 </li>\n<li>harbor 私有仓库已搭建 </li>\n<li>gitlab 可以使用 </li>\n<li>部署nfs server，可提供给jenkins 存储使用</li>\n</ol>\n<h1 id=\"部署jenkins\"><a href=\"#部署jenkins\" class=\"headerlink\" title=\"部署jenkins\"></a>部署jenkins</h1><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新名称空间</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span>  <span class=\"string\">ns</span>   <span class=\"string\">myjenkins</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 准备配置文件 deployment、 svc 、ingress 、证书</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">.</span> <span class=\"string\">mkdir</span> <span class=\"string\">/myjenkins/jenkins</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">.</span> <span class=\"string\">deployment</span> <span class=\"string\">准备配置yaml文件，jenkins-deployment.yaml</span> </span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">myjenkins</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">-Duser.timezone=Asia/Shanghai</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">jenkins:lts</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">agent</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/jenkins_home</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">jenkinshome</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkinshome</span></span><br><span class=\"line\">        <span class=\"attr\">nfs:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/data/upload/myjenkins</span></span><br><span class=\"line\">          <span class=\"attr\">server:</span> <span class=\"number\">172.24</span><span class=\"number\">.119</span><span class=\"number\">.30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"string\">jenkins</span> <span class=\"string\">agent</span> <span class=\"string\">准备配置yaml</span> <span class=\"string\">文件，这是jenkins</span> <span class=\"string\">的</span> <span class=\"string\">agent</span> <span class=\"string\">配置，jenkins-agent.yaml</span> </span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins-agent</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">myjenkins</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">agent</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">loadBalancer:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"string\">.</span> <span class=\"string\">jenkins</span> <span class=\"string\">svc</span> <span class=\"string\">配置yaml</span> <span class=\"string\">文件</span> <span class=\"string\">jenkins-svc.yaml</span> </span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">myjenkins</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">loadBalancer:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">.</span> <span class=\"string\">jenkins</span> <span class=\"string\">ingress</span> <span class=\"string\">配置yaml</span> <span class=\"string\">文件</span> <span class=\"string\">jenkins-ingress.yaml</span> </span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">myjenkins</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">myjenkins.tagtic.cn</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">myjenkins.tagtic.cn</span></span><br><span class=\"line\">    <span class=\"attr\">secretName:</span> <span class=\"string\">all-tagtic.cn</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">loadBalancer:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建以上准备好的yaml 文件</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">jenkins-deployment.yaml</span>  </span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">jenkins-agent.yaml</span> </span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">jenkins-svc.yaml</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">jenkins-ingress.yaml</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建证书,已准备好服务器证书</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">secret</span> <span class=\"string\">tls</span> <span class=\"string\">tls-secret</span> <span class=\"string\">--cert=1979891tagtic.cn.pem</span>    <span class=\"string\">--key=1979891tagtic.cn.key</span>  <span class=\"string\">-n</span> <span class=\"string\">myjenkins</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#登陆jenkins </span></span><br><span class=\"line\"><span class=\"string\">通过执行</span>  <span class=\"string\">kubectl</span> <span class=\"string\">logs</span> <span class=\"string\">-n</span> <span class=\"string\">myjenkins</span>  <span class=\"string\">jenkins-7f89966ff9-622xm</span>  <span class=\"string\">获取jenkins</span> <span class=\"string\">登陆密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#访问jenkins，浏览器输入</span></span><br><span class=\"line\"><span class=\"string\">https://myjenkins.tagtic.cn/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置jenkins\"><a href=\"#配置jenkins\" class=\"headerlink\" title=\"配置jenkins\"></a>配置jenkins</h1><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.按照推荐安装插件</span><br><span class=\"line\">FAQ</span><br><span class=\"line\">部署jenkins服务器出现Please wait while Jenkins is getting ready to work ...一直进不去该怎么办？</span><br><span class=\"line\">需要你进入jenkins的工作目录，打开-----hudson.model.UpdateCenter.xml将 url 中的 </span><br><span class=\"line\">https://updates.jenkins.io/update-center.json</span><br><span class=\"line\">更改为https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br><span class=\"line\">是国内的清华大学的镜像地址。</span><br><span class=\"line\"></span><br><span class=\"line\">2.安装完插件修改 admin 权限密码</span><br><span class=\"line\"></span><br><span class=\"line\">3.jenkins 安装插件</span><br><span class=\"line\">Gitlab Gitlab API Kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">4.点击系统管理--系统配置</span><br><span class=\"line\">  4.1 修改用法、jenkins url 、系统管理员邮件地址（报警邮箱地址） </span><br><span class=\"line\">   用法： 尽可能的使用这个节点</span><br><span class=\"line\">   Jenkins URL：https://myjenkins.tagtic.cn/</span><br><span class=\"line\">   系统管理员邮件地址： yunweimonitor@infinities.com</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125141849185-334156959.png\" alt=\"img\"></p>\n<p>4.2.全局属性，增加环境变量键值对，这个环境变量在后续的 jenkinsfile 中会用到       键： URL_SUFFIX   值：xy.a9vg.com</p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125143435101-913922106.png\" alt=\"img\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">4.3 Gitlab  需要填写 Connection name、Gitlab host URL、Credentials，写完 Test Connections</span><br><span class=\"line\">    Connection name：  duoniu glab </span><br><span class=\"line\">    Gitlab host URL：  https://glab.tag.cn</span><br><span class=\"line\">    Credentials：Gitlab API token，这个凭据的tocken 需要在gitlab 的个人账户中生成，下面有详细生成方式。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125143249758-1684761678.png\" alt=\"img\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">4.4 添加Gitlab API token 凭据</span><br><span class=\"line\">   点击 系统管理--&gt;安全--&gt;Manage Credentials--&gt;添加凭据-凭据类型为 GitLab API token、API token 是以下说明在 gitlab 中生成的、ID 为自定义名称 glab<span class=\"built_in\">_</span>token</span><br><span class=\"line\">   Gitlab API Token 获取方式：</span><br><span class=\"line\">   登陆个人gitlab 账号--&gt;点击个人头像--&gt; 选择 settings--&gt;选择 Access Tokens --&gt; 输入 Name 和 Expries at --&gt; 勾选api Access your API、read<span class=\"built_in\">_</span>user Read user information、read<span class=\"built_in\">_</span>registry Read Registry --&gt; 点击“Create personal access token”，生成access token，记录下来。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125144919474-80284710.png\" alt=\"img\"></p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125144032262-423381139.png\" alt=\"img\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">4.5 新增加 Global Pipeline Libraries，会加载 groovy 脚本。</span><br><span class=\"line\">     Library Name:  mykubernetes-standard</span><br><span class=\"line\">     Default version: master</span><br><span class=\"line\">   Retrieval method </span><br><span class=\"line\">     选择  Modern SCM</span><br><span class=\"line\">     Git 项目仓库:  https://glab.tag.cn/test/kubernetes-standard.git  </span><br><span class=\"line\">     凭据需要添加个人登录gitlab 的账号和密码，和上面添加的 Gitlab API Token 类型是不一样的。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125151746795-360378419.png\" alt=\"img\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">4.5.1 新增加个人登陆gitlab 的凭据和 后续使用harbor 的凭据,这两个凭据类型为 Username with password ，</span><br><span class=\"line\">        个人登录gitlab 需要填写登录gitlab 的用户名、密码、ID自定义为 glab<span class=\"built_in\">_</span>pass</span><br><span class=\"line\">        harbor 需要填写登录harbor 的用户名、密码、ID 自定义为 harbor</span><br><span class=\"line\">FAQ:</span><br><span class=\"line\">1. Warning: CredentialId &quot;glab<span class=\"built_in\">_</span>pass&quot; could not be found.</span><br><span class=\"line\">id 名称为： glab<span class=\"built_in\">_</span>pass</span><br><span class=\"line\">因为  kubernetes-stand 有用到这个名称，或者修改 helm.groovy</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125152606984-986336302.png\" alt=\"img\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">FAQ:</span><br><span class=\"line\">ERROR: Could not find credentials entry with ID &#x27;harbor&#x27;</span><br><span class=\"line\">添加harbor 的凭据</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125153316139-1108575452.png\" alt=\"img\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">5. 新增加 邮件通知，填写完成可以写测试邮件看是否能发送成功</span><br><span class=\"line\">添加 SMTP服务器：smtp.exmail.qq.com</span><br><span class=\"line\">     SMTP服务器：@infinities.com</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125153637583-1995337330.png\" alt=\"img\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">6. 点击 cloud 下面的配置云</span><br><span class=\"line\"></span><br><span class=\"line\">https://myjenkins.tagtic.cn/configureClouds/</span><br><span class=\"line\"></span><br><span class=\"line\">配置前提是k8s 集群已配置宽泛的 rbac 策略</span><br><span class=\"line\">kubectl create clusterrolebinding permissive-binding <span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>  --clusterrole=cluster-admin <span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>  --user=admin <span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>  --user=kubelet <span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>  --group=system:serviceaccounts</span><br><span class=\"line\"></span><br><span class=\"line\">1.第一步添加 kubernetes 名称：kubernetes</span><br><span class=\"line\">2.第二步连接 Kubernetes 地址：https://kubernetes.default.svc.cluster.local</span><br><span class=\"line\">3.第三步Kubernetes 命名空间： myjenkins （jenkins 的名称空间）</span><br><span class=\"line\">4.第四步Jenkins 地址：http://jenkins:8080</span><br><span class=\"line\">5.第五步Jenkins 通道：jenkins-agent.myjenkins:50000</span><br><span class=\"line\">6.第六步填写 jenkins pod 的 label: 键：jenkins 值：slave</span><br><span class=\"line\">7.第七步连接 Kubernetes API 的最大连接数 32</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125154552178-650412326.png\" alt=\"img\"></p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125154801871-685279111.png\" alt=\"img\"></p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125154906363-1557408259.png\" alt=\"img\"></p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125155008400-1103485718.png\" alt=\"img\"></p>\n<p>gitlab 钩子触发 jenkins 报错 403 </p>\n<p>FAQ： </p>\n<ol>\n<li>配置 jenkins 安全策略 系统管理–&gt;安全–&gt;全局安全配置–&gt;授权策略–&gt;勾选匿名用户具有可读权限 </li>\n<li>系统管理–&gt; 系统配置  Gitlab  Enable authentication for ‘/project’ end-point  取消前面勾选</li>\n</ol>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125161103532-1868457757.png\" alt=\"img\"></p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125161445406-1151808761.png\" alt=\"img\"></p>\n<h1 id=\"第一种情况-gitlab-代码结构下有-Jenkinsfile\"><a href=\"#第一种情况-gitlab-代码结构下有-Jenkinsfile\" class=\"headerlink\" title=\"第一种情况 gitlab 代码结构下有 Jenkinsfile\"></a>第一种情况 gitlab 代码结构下有 Jenkinsfile</h1><p>与gitlab 代码同级的包含有 Dockerfile 和 Jenkinsfile,这个项目包含有4个分支</p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125180130538-760589525.png\" alt=\"img\"></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Jenkinsfile 文件内容</span></span><br><span class=\"line\">变量含义：</span><br><span class=\"line\">bn  --&gt; 获取当前分支名称</span><br><span class=\"line\">bn_replace --&gt; 将分支名称中的 . 更换为 -</span><br><span class=\"line\">suffix --&gt; 为 jenkins 配置的全局环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">def bn = <span class=\"string\">&quot;<span class=\"subst\">$&#123;env.BRANCH_NAME&#125;</span>&quot;</span>;</span><br><span class=\"line\">def bn_replace = bn.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">def suffix = <span class=\"string\">&quot;<span class=\"subst\">$&#123;env.URL_SUFFIX&#125;</span>&quot;</span>;</span><br><span class=\"line\">stage(<span class=\"string\">&#x27;Deliver for development&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bn.startsWith(<span class=\"string\">&#x27;build-&#x27;</span>))&#123;</span><br><span class=\"line\">        helm&#123;</span><br><span class=\"line\">            scmUrl=<span class=\"string\">&quot;https://glab.tag/test/laravel-k8s-test.git&quot;</span></span><br><span class=\"line\">            project=<span class=\"string\">&quot;test-helm2-<span class=\"subst\">$&#123;bn_replace&#125;</span>&quot;</span></span><br><span class=\"line\">            email=<span class=\"string\">&quot;test@donews.com&quot;</span></span><br><span class=\"line\">            namespace=<span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">            branch=<span class=\"string\">&quot;<span class=\"subst\">$&#123;bn&#125;</span>&quot;</span></span><br><span class=\"line\">            registry=<span class=\"string\">&quot;harbor&quot;</span></span><br><span class=\"line\">            helm=<span class=\"string\">&quot;donews/myapp&quot;</span></span><br><span class=\"line\">            helmArgs=<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; --set service.port=80,ingress.hosts=&#123;myhelm-<span class=\"subst\">$&#123;bn_replace&#125;</span>.<span class=\"subst\">$&#123;suffix&#125;</span>&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">            &quot;</span><span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stage(<span class=\"string\">&#x27;Deliver for testing&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bn == <span class=\"string\">&#x27;dev&#x27;</span>)&#123;</span><br><span class=\"line\">        helm&#123;</span><br><span class=\"line\">            scmUrl=<span class=\"string\">&quot;https://glab.tag/test/laravel-k8s-test.git&quot;</span></span><br><span class=\"line\">            project=<span class=\"string\">&quot;test-helmdev&quot;</span></span><br><span class=\"line\">            email=<span class=\"string\">&quot;test@donews.com&quot;</span></span><br><span class=\"line\">            namespace=<span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">            branch=<span class=\"string\">&quot;dev&quot;</span></span><br><span class=\"line\">            registry=<span class=\"string\">&quot;harbor&quot;</span></span><br><span class=\"line\">            helm=<span class=\"string\">&quot;donews/myapp&quot;</span></span><br><span class=\"line\">            helmArgs=<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; --set service.port=80,ingress.hosts=&#123;myhelmdev-xy.a99.com&#125;&quot;</span><span class=\"string\">&quot;&quot;</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stage(<span class=\"string\">&#x27;Deploy for production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bn == <span class=\"string\">&#x27;master&#x27;</span>) &#123;</span><br><span class=\"line\">        helm&#123;</span><br><span class=\"line\">            scmUrl=<span class=\"string\">&quot;https://glab.tag/test/laravel-k8s-test.git&quot;</span></span><br><span class=\"line\">            project=<span class=\"string\">&quot;test-helmmaster&quot;</span></span><br><span class=\"line\">            email=<span class=\"string\">&quot;test@donews.com&quot;</span></span><br><span class=\"line\">            namespace=<span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">            branch=<span class=\"string\">&quot;master&quot;</span></span><br><span class=\"line\">            registry=<span class=\"string\">&quot;harbor&quot;</span></span><br><span class=\"line\">            helm=<span class=\"string\">&quot;donews/myapp&quot;</span></span><br><span class=\"line\">            helmArgs=<span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; --set service.port=80,ingress.hosts=&#123;myhelmmaster-xy.a99.com&#125;&quot;</span><span class=\"string\">&quot;&quot;</span>  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"groovy-使用\"><a href=\"#groovy-使用\" class=\"headerlink\" title=\"groovy 使用\"></a>groovy 使用</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">jekins 系统配置中  Global Pipeline Libraries git 项目https:<span class=\"comment\">//glab.tag.cn/test/kubernetes-standard.git ,在项目下新建立 vars 目录，vars 目录下 helm.groovy 内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> hudson.model.Result</span><br><span class=\"line\"><span class=\"keyword\">import</span> hudson.model.Run</span><br><span class=\"line\"><span class=\"keyword\">import</span> jenkins.model.CauseOfInterruption.UserInterruption</span><br><span class=\"line\"></span><br><span class=\"line\">def abortPreviousBuilds() &#123;</span><br><span class=\"line\">    Run previousBuild = currentBuild.rawBuild.getPreviousBuildInProgress()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (previousBuild != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previousBuild.isInProgress()) &#123;</span><br><span class=\"line\">            def executor = previousBuild.getExecutor()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (executor != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&quot;&gt;&gt; Aborting older build #<span class=\"subst\">$&#123;previousBuild.number&#125;</span>&quot;</span></span><br><span class=\"line\">                executor.interrupt(Result.ABORTED, new UserInterruption(</span><br><span class=\"line\">                    <span class=\"string\">&quot;Aborted by newer build #<span class=\"subst\">$&#123;currentBuild.number&#125;</span>&quot;</span></span><br><span class=\"line\">                ))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        previousBuild = previousBuild.getPreviousBuildInProgress()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def call(body) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// evaluate the body block, and collect configuration into the object</span></span><br><span class=\"line\">    abortPreviousBuilds()</span><br><span class=\"line\">    def pipelineParams= [:]</span><br><span class=\"line\">    def reg_prefix = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    def label = <span class=\"string\">&quot;worker-<span class=\"subst\">$&#123;pipelineParams.project&#125;</span>&quot;</span></span><br><span class=\"line\">    body.resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class=\"line\">    body.delegate = pipelineParams</span><br><span class=\"line\">    body()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pipelineParams.branch)&#123;</span><br><span class=\"line\">        pipelineParams.branch = <span class=\"string\">&quot;master&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pipelineParams.deployment)&#123;</span><br><span class=\"line\">        pipelineParams.deployment = pipelineParams.project</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pipelineParams.registry = <span class=\"string\">&quot;harbor&quot;</span></span><br><span class=\"line\">    reg_prefix = <span class=\"string\">&quot;k8s-harbor01.gdfsxxds.rjyun/xy/&quot;</span></span><br><span class=\"line\">    pullSecret = <span class=\"string\">&quot;harbor&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!! pipelineParams.oversea)&#123;</span><br><span class=\"line\">        http_proxy = <span class=\"string\">&quot;--build-arg HTTP_PROXY=localhost:3001&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        http_proxy = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    podTemplate(label: label, containers: [</span><br><span class=\"line\">      containerTemplate(name: <span class=\"string\">&#x27;docker&#x27;</span>, image: <span class=\"string\">&#x27;docker:18&#x27;</span>, command: <span class=\"string\">&#x27;cat&#x27;</span>, ttyEnabled: <span class=\"literal\">true</span>),</span><br><span class=\"line\">      containerTemplate(name: <span class=\"string\">&#x27;kubectl&#x27;</span>, image: <span class=\"string\">&#x27;lachlanevenson/k8s-kubectl:v1.16.0&#x27;</span>, command: <span class=\"string\">&#x27;cat&#x27;</span>, ttyEnabled: <span class=\"literal\">true</span>),</span><br><span class=\"line\">      containerTemplate(name: <span class=\"string\">&#x27;helm&#x27;</span>, image: <span class=\"string\">&#x27;k8s-harbor01.gdfsxxds.rjyun/xy/helm:2.15.2&#x27;</span>, command: <span class=\"string\">&#x27;cat&#x27;</span>, ttyEnabled: <span class=\"literal\">true</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    volumes: [</span><br><span class=\"line\">      hostPathVolume(mountPath: <span class=\"string\">&#x27;/var/run/docker.sock&#x27;</span>, hostPath: <span class=\"string\">&#x27;/var/run/docker.sock&#x27;</span>)</span><br><span class=\"line\">    ]) &#123;</span><br><span class=\"line\">      node(label) &#123;</span><br><span class=\"line\">        def myRepo = checkout([$<span class=\"class\"><span class=\"keyword\">class</span>: <span class=\"type\">&#x27;GitSCM&#x27;</span>, <span class=\"type\">branches: [[name: &quot;*/$&#123;pipelineParams.branch&#125;&quot;]]</span>, <span class=\"type\">doGenerateSubmoduleConfigurations: false</span>, <span class=\"type\">extensions:  [[$class: &#x27;CloneOption&#x27;</span>, <span class=\"type\">noTags: false</span>, <span class=\"type\">reference: &#x27;&#x27;</span>, <span class=\"type\">shallow: true</span>, <span class=\"type\">timeout: 1000]]+[[$class: &#x27;CheckoutOption&#x27;</span>, <span class=\"type\">timeout: 1000]]</span>, <span class=\"type\">submoduleCfg: []</span>, <span class=\"type\">userRemoteConfigs: [[credentialsId: &#x27;glab_pass&#x27;</span>, <span class=\"type\">url: pipelineParams.scmUrl]]]) </span></span></span><br><span class=\"line\">        def gitCommit = myRepo.GIT_COMMIT</span><br><span class=\"line\">        def gitBranch = myRepo.GIT_BRANCH</span><br><span class=\"line\">        def shortGitCommit = <span class=\"string\">&quot;<span class=\"subst\">$&#123;gitCommit[<span class=\"number\">0.</span><span class=\"number\">.10</span>]&#125;</span>&quot;</span></span><br><span class=\"line\">        def project = pipelineParams.scm</span><br><span class=\"line\">        </span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Create docker images&#x27;</span>) &#123;</span><br><span class=\"line\">            gitlabCommitStatus &#123;</span><br><span class=\"line\">                container(<span class=\"string\">&#x27;docker&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                        withCredentials([[$<span class=\"class\"><span class=\"keyword\">class</span>: <span class=\"type\">&#x27;UsernamePasswordMultiBinding&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"class\">                          <span class=\"type\">credentialsId: pipelineParams.registry</span>,</span></span><br><span class=\"line\"><span class=\"class\">                          <span class=\"type\">usernameVariable: &#x27;DOCKER_HUB_USER&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"class\">                          <span class=\"type\">passwordVariable: &#x27;DOCKER_HUB_PASSWORD&#x27;]]) &#123;</span></span></span><br><span class=\"line\">                            retry(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                              sh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                                docker login -u <span class=\"subst\">$&#123;DOCKER_HUB_USER&#125;</span> -p <span class=\"subst\">$&#123;DOCKER_HUB_PASSWORD&#125;</span> <span class=\"subst\">$&#123;reg_prefix&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">                                docker build  -t <span class=\"subst\">$&#123;reg_prefix&#125;</span><span class=\"subst\">$&#123;pipelineParams.project&#125;</span>:<span class=\"subst\">$&#123;shortGitCommit&#125;</span> .</span></span><br><span class=\"line\"><span class=\"string\">                                docker push <span class=\"subst\">$&#123;reg_prefix&#125;</span><span class=\"subst\">$&#123;pipelineParams.project&#125;</span>:<span class=\"subst\">$&#123;shortGitCommit&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">                                docker tag <span class=\"subst\">$&#123;reg_prefix&#125;</span><span class=\"subst\">$&#123;pipelineParams.project&#125;</span>:<span class=\"subst\">$&#123;shortGitCommit&#125;</span> <span class=\"subst\">$&#123;reg_prefix&#125;</span><span class=\"subst\">$&#123;pipelineParams.project&#125;</span>:latest</span></span><br><span class=\"line\"><span class=\"string\">                                docker push <span class=\"subst\">$&#123;reg_prefix&#125;</span><span class=\"subst\">$&#123;pipelineParams.project&#125;</span>:latest</span></span><br><span class=\"line\"><span class=\"string\">                                &quot;&quot;&quot;</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">                        println(e.toString());</span><br><span class=\"line\">                        currentBuild.result = <span class=\"string\">&#x27;FAILURE&#x27;</span></span><br><span class=\"line\">                        step([$<span class=\"class\"><span class=\"keyword\">class</span>: <span class=\"type\">&#x27;Mailer&#x27;</span>, <span class=\"type\">notifyEveryUnstableBuild: true</span>, <span class=\"type\">recipients: pipelineParams.email</span>, <span class=\"type\">sendToIndividuals: true])</span></span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;       </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pipelineParams.helm) &#123;</span><br><span class=\"line\">            stage(<span class=\"string\">&#x27;Run helm&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!!pipelineParams.helmArgs)&#123;</span><br><span class=\"line\">                    args = pipelineParams.helmArgs</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    args = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                container(<span class=\"string\">&#x27;helm&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        sh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                        helm init --client-only --stable-repo-url=https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br><span class=\"line\"><span class=\"string\">                        helm repo add donews http://chart.a99.com/</span></span><br><span class=\"line\"><span class=\"string\">                        helm repo update</span></span><br><span class=\"line\"><span class=\"string\">                        helm upgrade -i <span class=\"subst\">$&#123;pipelineParams.project&#125;</span> <span class=\"subst\">$&#123;pipelineParams.helm&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"string\">                        --set image.repository=<span class=\"subst\">$&#123;reg_prefix&#125;</span><span class=\"subst\">$&#123;pipelineParams.project&#125;</span>,image.tag=<span class=\"subst\">$&#123;shortGitCommit&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"string\">                        <span class=\"subst\">$&#123;args&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"string\">                        --namespace <span class=\"subst\">$&#123;pipelineParams.namespace&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">                        &quot;&quot;&quot;</span></span><br><span class=\"line\">                        &#125; </span><br><span class=\"line\">                    <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">                        println(e.toString());</span><br><span class=\"line\">                        currentBuild.result = <span class=\"string\">&#x27;FAILURE&#x27;</span></span><br><span class=\"line\">                        step([$<span class=\"class\"><span class=\"keyword\">class</span>: <span class=\"type\">&#x27;Mailer&#x27;</span>, <span class=\"type\">notifyEveryUnstableBuild: true</span>, <span class=\"type\">recipients: pipelineParams.email</span>, <span class=\"type\">sendToIndividuals: true])</span></span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            stage(<span class=\"string\">&#x27;Run kubectl&#x27;</span>) &#123;</span><br><span class=\"line\">              container(<span class=\"string\">&#x27;kubectl&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    sh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    kubectl set image deployment/<span class=\"subst\">$&#123;pipelineParams.deployment&#125;</span>-deployment <span class=\"subst\">$&#123;pipelineParams.project&#125;</span>=<span class=\"subst\">$&#123;reg_prefix&#125;</span><span class=\"subst\">$&#123;pipelineParams.project&#125;</span>:<span class=\"subst\">$&#123;shortGitCommit&#125;</span> -n <span class=\"subst\">$&#123;pipelineParams.namespace&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">                    kubectl rollout status deployment <span class=\"subst\">$&#123;pipelineParams.deployment&#125;</span>-deployment -n <span class=\"subst\">$&#123;pipelineParams.namespace&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span></span><br><span class=\"line\">                    &#125; </span><br><span class=\"line\">                <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">                    println(e.toString());</span><br><span class=\"line\">                    currentBuild.result = <span class=\"string\">&#x27;FAILURE&#x27;</span></span><br><span class=\"line\">                    step([$<span class=\"class\"><span class=\"keyword\">class</span>: <span class=\"type\">&#x27;Mailer&#x27;</span>, <span class=\"type\">notifyEveryUnstableBuild: true</span>, <span class=\"type\">recipients: pipelineParams.email</span>, <span class=\"type\">sendToIndividuals: true])</span></span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        currentBuild.result = <span class=\"string\">&#x27;SUCCESS&#x27;</span></span><br><span class=\"line\">        step([$<span class=\"class\"><span class=\"keyword\">class</span>: <span class=\"type\">&#x27;Mailer&#x27;</span>, <span class=\"type\">notifyEveryUnstableBuild: true</span>, <span class=\"type\">recipients: pipelineParams.email</span>, <span class=\"type\">sendToIndividuals: true])</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"helm-自建chart-仓库\"><a href=\"#helm-自建chart-仓库\" class=\"headerlink\" title=\"helm 自建chart 仓库\"></a>helm 自建chart 仓库</h2><p>这里不再多做介绍</p>\n<h2 id=\"jenkins-部署多分支流水线项目\"><a href=\"#jenkins-部署多分支流水线项目\" class=\"headerlink\" title=\"jenkins 部署多分支流水线项目\"></a>jenkins 部署多分支流水线项目</h2><p>新建任务–&gt; 起一个任务名称 duofenzhi  –&gt;选择多分支流水线 选择配置 –&gt;分支源–&gt;Git</p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125175701015-1704681465.png\" alt=\"img\"></p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125175732076-1667174861.png\" alt=\"img\"></p>\n<p><strong>等 1分钟，jenkins 将会自动拉取gitlab 代码进行编译构建</strong></p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210125180030419-406971674.png\" alt=\"img\"></p>\n<h2 id=\"gitlab-添加自动触发，必须是-project\"><a href=\"#gitlab-添加自动触发，必须是-project\" class=\"headerlink\" title=\"gitlab 添加自动触发，必须是 project\"></a>gitlab 添加自动触发，必须是 project</h2><p>在gitlab –&gt;项目下–&gt;settings–&gt;Integrations–&gt;增加 Webhooks</p>\n<p><a href=\"https://myjenkins.tagtic.cn/project/duofenzhi\">https://myjenkins.tagtic.cn/project/duofenzhi</a></p>\n<p>查看 jenkins 已构建完成</p>\n<p>查看k8s，容器已正常启动</p>\n<p>项目部署完成。</p>\n<h1 id=\"第二种情况-gitlab-代码结构下没有-Jenkinsfile\"><a href=\"#第二种情况-gitlab-代码结构下没有-Jenkinsfile\" class=\"headerlink\" title=\"第二种情况 gitlab 代码结构下没有 Jenkinsfile\"></a>第二种情况 gitlab 代码结构下没有 Jenkinsfile</h1><p><strong>结构：</strong> </p>\n<p>gitlab 代码下只有Dockerfile ，没有Jenkinsfile，不能使用Jenkins 多分支构建，只能使用流水线 </p>\n<p><strong>新建立流水线：</strong> </p>\n<p>新建任务–&gt;新建名称test –&gt;流水线 GitLab Connection 选择 duoniu glab</p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210127110723835-1473141819.png\" alt=\"img\"></p>\n<p>选择构建触发器，这是和gitlab 打通的渠道</p>\n<p><img src=\"/2021/10/11/devops/build/k8s-jekins-gitlab-harbor-build/1316729-20210127110825181-1366655406.png\" alt=\"img\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 流水线</span></span><br><span class=\"line\">新增加 Pipeline script</span><br><span class=\"line\"></span><br><span class=\"line\">helm&#123;</span><br><span class=\"line\">    scmUrl=<span class=\"string\">&quot;https://glab.tag/test/mall_h5.git&quot;</span></span><br><span class=\"line\">    project=<span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">    email=<span class=\"string\">&quot;test@do.com&quot;</span></span><br><span class=\"line\">    namespace=<span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    branch=<span class=\"string\">&quot;dev&quot;</span></span><br><span class=\"line\">    helm=<span class=\"string\">&quot;donews/myapp&quot;</span></span><br><span class=\"line\">    helmArgs=<span class=\"string\">&quot;&quot;&quot; --set service.port=80,ingress.hosts=&#123;mytest-xy.aaa.com&#125;&quot;&quot;&quot;</span>  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注：</span><br><span class=\"line\">这个helm 定义将会自动加载上文的 helm.groovy 脚本，使用helm 部署容器，这和 jenkinsfile 是不同的，因为Jenkinsfile 不用配置 jenkins 的流水线脚本</span><br></pre></td></tr></table></figure>\n\n<p>查看 jenkins 已构建完成</p>\n<p>查看k8s，容器已正常启动</p>\n<p>项目部署完成。</p>\n<h1 id=\"第三种情况-gitlab-代码结构下也没有-Jenkinsfile，但是已经有-deployment-svc-ingress-这些配置\"><a href=\"#第三种情况-gitlab-代码结构下也没有-Jenkinsfile，但是已经有-deployment-svc-ingress-这些配置\" class=\"headerlink\" title=\"第三种情况 gitlab 代码结构下也没有 Jenkinsfile，但是已经有 deployment svc ingress 这些配置\"></a>第三种情况 gitlab 代码结构下也没有 Jenkinsfile，但是已经有 deployment svc ingress 这些配置</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#新建流水线</span></span><br><span class=\"line\">新增加 Pipeline script</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">label</span> = &quot;<span class=\"title\">worker</span>-$&#123;<span class=\"title\">UUID</span>.<span class=\"title\">randomUUID</span>().<span class=\"title\">toString</span>()&#125;&quot;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">podTemplate</span>(<span class=\"params\">label: label, containers: [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  containerTemplate(<span class=\"params\">name: <span class=\"string\">&#x27;docker&#x27;</span>, image: <span class=\"string\">&#x27;docker&#x27;</span>, command: <span class=\"string\">&#x27;cat&#x27;</span>, ttyEnabled: true</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  containerTemplate(<span class=\"params\">name: <span class=\"string\">&#x27;kubectl&#x27;</span>, image: <span class=\"string\">&#x27;lachlanevenson/k8s-kubectl:v1.16.0&#x27;</span>, command: <span class=\"string\">&#x27;cat&#x27;</span>, ttyEnabled: true</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">volumes: [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  hostPathVolume(<span class=\"params\">mountPath: <span class=\"string\">&#x27;/var/run/docker.sock&#x27;</span>, hostPath: <span class=\"string\">&#x27;/var/run/docker.sock&#x27;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">]</span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">node</span>(<span class=\"params\">label</span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">def</span> <span class=\"title\">myRepo</span> = <span class=\"title\">checkout</span>(<span class=\"params\">[$<span class=\"keyword\">class</span>: <span class=\"string\">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class=\"string\">&#x27;*/master&#x27;</span>]], doGenerateSubmoduleConfigurations: false, extensions:  [[$<span class=\"keyword\">class</span>: <span class=\"string\">&#x27;CloneOption&#x27;</span>, noTags: false, reference: <span class=\"string\">&#x27;&#x27;</span>, shallow: true, timeout: <span class=\"number\">12000</span>]]+[[$<span class=\"keyword\">class</span>: <span class=\"string\">&#x27;CheckoutOption&#x27;</span>, timeout: <span class=\"number\">7000</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class=\"string\">&#x27;glab_pass&#x27;</span>, url: <span class=\"string\">&#x27;https://glaxxx.cn/test/tgbusmall_api.git&#x27;</span>]]]</span>) </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">def</span> <span class=\"title\">gitCommit</span> = <span class=\"title\">myRepo</span>.<span class=\"title\">GIT_COMMIT</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">def</span> <span class=\"title\">gitBranch</span> = <span class=\"title\">myRepo</span>.<span class=\"title\">GIT_BRANCH</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">def</span> <span class=\"title\">shortGitCommit</span> = &quot;$&#123;<span class=\"title\">gitCommit</span>[0..10]&#125;&quot;</span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;Create docker images&#x27;</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">gitlabCommitStatus</span> &#123;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">container</span>(<span class=\"params\"><span class=\"string\">&#x27;docker&#x27;</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"title\">withCredentials</span>(<span class=\"params\">[[$<span class=\"keyword\">class</span>: <span class=\"string\">&#x27;UsernamePasswordMultiBinding&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  credentialsId: <span class=\"string\">&#x27;dockerreg&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  usernameVariable: <span class=\"string\">&#x27;DOCKER_HUB_USER&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  passwordVariable: <span class=\"string\">&#x27;DOCKER_HUB_PASSWORD&#x27;</span>]]</span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">                  <span class=\"title\">sh</span> &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"function\">\t\t\t\t    <span class=\"title\">cp</span> <span class=\"title\">dockerfile</span>/<span class=\"title\">dockerfile</span>-<span class=\"title\">release</span>/<span class=\"title\">Dockerfile</span> .</span></span><br><span class=\"line\"><span class=\"function\">                    <span class=\"title\">docker</span> <span class=\"title\">login</span> -<span class=\"title\">u</span> $&#123;<span class=\"title\">DOCKER_HUB_USER</span>&#125; -<span class=\"title\">p</span> $&#123;<span class=\"title\">DOCKER_HUB_PASSWORD</span>&#125; <span class=\"title\">k8s</span>-<span class=\"title\">harbor01</span>.<span class=\"title\">gdfsxxds</span>.<span class=\"title\">rjyun</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t\t\t<span class=\"title\">docker</span> <span class=\"title\">build</span>  -<span class=\"title\">t</span> <span class=\"title\">k8s</span>-<span class=\"title\">harbor01</span>.<span class=\"title\">gdfsxxds</span>.<span class=\"title\">rjyun</span>/<span class=\"title\">xy</span>/<span class=\"title\">tgbusmall</span>-<span class=\"title\">api</span>:</span>$&#123;shortGitCommit&#125; . </span><br><span class=\"line\">                    docker push k8s-harbor01.gdfsxxds.rjyun/xy/tgbusmall-api:$&#123;shortGitCommit&#125;</span><br><span class=\"line\">                    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;       </span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    stage(&#x27;Run kubectl&#x27;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      container(&#x27;kubectl&#x27;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        sh &quot;&quot;&quot;</span></span><br><span class=\"line\">        kubectl <span class=\"built_in\">set</span> image deployment/tgbusmall-api-deployment tgbusmall-api=k8s-harbor01.gdfsxxds.rjyun/xy/tgbusmall-api:$&#123;shortGitCommit&#125; -n default</span><br><span class=\"line\">        kubectl rollout status deployment tgbusmall-api-deployment -n default</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>查看 jenkins 已构建完成</p>\n<p>查看k8s，容器已正常更新</p>\n<p>项目部署完成。</p>\n<h1 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h1><p>第一种方式jenkins 多分支流水线配置简单，只用在gitlab 代码下定义好 Jenkinsfile， 适合多分支代码测试，便捷开发和测试人员，通过 groovy 可以自动化部署。 </p>\n<p>第二种方式 jenkins 流水线配置不用定义Jenkinsfile ，只用配置好 pipeline 内容即可，适合分支少项目，通过 groovy 也可以自动化部署。</p>\n<p> 第三种方式前提是已经有部署好的 deployment、svc 和ingress ，只需要每次进行镜像替换即可，不推荐使用，因为每部署一个新的项目必须先手动准备好这些必配文件，不使用 groovy 自动部署。</p>\n","categories":["devops"],"tags":["k8s","devops"]},{"title":"Redis系列(二)：redis数据类型及基本操作","url":"/2021/07/22/db-resource/redis/Redis-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","content":"<h1 id=\"Redis系列-二-：redis数据类型及基本操作\"><a href=\"#Redis系列-二-：redis数据类型及基本操作\" class=\"headerlink\" title=\"Redis系列(二)：redis数据类型及基本操作\"></a>Redis系列(二)：redis数据类型及基本操作</h1><h1 id=\"Redis-的五大数据类型\"><a href=\"#Redis-的五大数据类型\" class=\"headerlink\" title=\"Redis 的五大数据类型\"></a>Redis 的五大数据类型</h1><h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 v1\t\t\t<span class=\"comment\">#设置值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; append key1 <span class=\"string\">&quot;hello&quot;</span>\t\t<span class=\"comment\"># 追加值，如果不存在，相当于 set key</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; strlen key1\t\t<span class=\"comment\"># 获取字符串长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>自增、自减</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> views 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incr views\t\t<span class=\"comment\"># 自增 1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; decr views       <span class=\"comment\"># 自减 1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; decr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incrby views 10\t\t<span class=\"comment\"># 设置步长、自增 10 </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby views 5      <span class=\"comment\"># 设置步长、自减 5</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></figure>\n\n<p>字符串范围</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 <span class=\"string\">&quot;hello,world!&quot;</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;hello,world!&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange key1 0 3\t\t<span class=\"comment\"># 截取字符串[0, 3]</span></span><br><span class=\"line\"><span class=\"string\">&quot;hell&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange key1 0 -1\t\t<span class=\"comment\"># 获取全部的字符串，和 get key一样</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello,world!&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>替换：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key2 abcdefg</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;abcdefg&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setrange key2 1 xx</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;axxdefg&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p><code>setex(set with expire)</code>：设置过期时间</p>\n<p>和<code>setnx(set if not exist)</code>：不存在再设置（在分布式锁中会经常使用）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setex key3 30 <span class=\"string\">&quot;hello&quot;</span>\t\t<span class=\"comment\"># 设置 30 秒后过期</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3\t\t\t\t\t<span class=\"comment\"># 剩余过期时间</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 25</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;redis&quot;</span>\t\t\t<span class=\"comment\"># mykey 不存在时设置成功</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;key2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;views&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;mykey&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;mongoDB&quot;</span>\t\t<span class=\"comment\"># mykey 存在时设置失败</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get mykey\t\t\t\t\t<span class=\"comment\"># mykey 值不变</span></span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>mset<code>和</code>mget</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3\t\t<span class=\"comment\"># 同时设置多个值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;k1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;k3&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;k2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mget k1 k2 k3\t\t\t<span class=\"comment\"># 同时获取多个值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4       <span class=\"comment\"># msetnx 是一个原子性的操作，要么一起成功，要么都失败</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k4</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对象</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> user:1 &#123;name:zhangsan, age:3&#125;     <span class=\"comment\"># 设置一个 user:1 对象 值为 json  字符来保存一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p><code>getset</code>：先 get 再 set</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getset db redis\t\t<span class=\"comment\"># 如果不存在值，则返回 nil</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get db</span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset db mongodb\t\t<span class=\"comment\"># 如果存在值，获取原来的值，并设置新的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get db</span><br><span class=\"line\"><span class=\"string\">&quot;mongodb&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>String 的使用场景：value 除了是字符串以外还可以是数字</p>\n<ul>\n<li>计数器</li>\n<li>统计多单位的数量</li>\n<li>粉丝数</li>\n<li>对象缓存存储</li>\n</ul>\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h2><p>基本的数据类型，列表。</p>\n<p>在 Redis 中可以把 list 用作栈、队列、阻塞队列。</p>\n<p>list 命令多数以 <code>l</code>开头。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush list one\t\t\t<span class=\"comment\"># 将一个值或者多个值，插入到列表的头部（左）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list two</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list three </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1\t\t\t<span class=\"comment\"># 查看全部元素</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 1\t\t\t\t<span class=\"comment\"># 通过区间获取值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush list right\t\t\t<span class=\"comment\"># 将一个值或者多个值，插入到列表的尾部（右）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;right&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>弹出 pop</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;!&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpop list\t\t<span class=\"comment\"># 移除list的第一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;!&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop list\t\t\t<span class=\"comment\"># 移除list的第一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>索引 Lindex</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 1\t\t<span class=\"comment\"># 通过下标获取list中的某一个值</span></span><br><span class=\"line\"><span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 0</span><br><span class=\"line\"><span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Llen 长度：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; llen list</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p>移除指定的值：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 1 world\t\t<span class=\"comment\"># 移除list集合中指定个数的value，精确匹配</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list hjk</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 2 hjk</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>trim 截断</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello4&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim mylist 1 2 <span class=\"comment\"># 通过下标截取指定长度，这个list已经被破坏了，截断之后只剩下截断后的元素</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>rpoplpush ：移除列表的最后一个元素，将他移动到新的列表中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpoplpush mylist myotherlist\t\t<span class=\"comment\"># 移除列表的最后一个元素，将他移动到新的列表中。</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1\t\t<span class=\"comment\"># 查看原来的列表</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange myotherlist 0 -1\t\t<span class=\"comment\"># 查看目标列表中，确实存在该值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>lset：将列表中指定下标的值替换为另一个值，更新操作</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; exists list\t\t<span class=\"comment\"># 判断这个列表是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item\t\t<span class=\"comment\"># 如果不存在的话，更新会报错</span></span><br><span class=\"line\">(error) ERR no such key</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list value1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 0 </span><br><span class=\"line\">1) <span class=\"string\">&quot;value1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item\t\t<span class=\"comment\"># 如果存在，更新当前下标的值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 1 other\t\t<span class=\"comment\"># 如果不存在的话，更新会报错</span></span><br><span class=\"line\">(error) ERR index out of range</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>linsert：将某个具体的value插入到列表中某个元素的前面或者后面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; linsert mylist before <span class=\"string\">&quot;hello2&quot;</span> hello</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; linsert mylist after <span class=\"string\">&quot;hello2&quot;</span> hello</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p><strong>小结</strong>：</p>\n<ul>\n<li>list 实际上是一个链表，前后都可以插入</li>\n<li>如果key不存在，创建新的链表</li>\n<li>如果移除了所有的值，空链表，也代表不存在</li>\n<li>在两边插入或者改动值，效率最高。</li>\n</ul>\n<h2 id=\"Set-（集合）\"><a href=\"#Set-（集合）\" class=\"headerlink\" title=\"Set （集合）\"></a>Set （集合）</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello&quot;</span>\t\t<span class=\"comment\"># set 集合中添加元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;world&quot;</span>\t\t</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset\t\t    <span class=\"comment\"># 查看指定Set的所有值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sismember myset hello\t\t<span class=\"comment\"># 判断某一个值是不是在set中</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember myset hello1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; scard myset\t\t<span class=\"comment\"># 获取集合中的个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello2&quot;</span>\t\t</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset   </span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; srem myset hello   <span class=\"comment\"># 移除元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kkk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember myset\t\t\t<span class=\"comment\"># 随机抽取一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember myset</span><br><span class=\"line\"><span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember myset 2\t\t\t<span class=\"comment\"># 随机抽取指定个数的元素</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember myset 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kkk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset\t\t<span class=\"comment\"># 随机删除元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;hjk&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kkk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset</span><br><span class=\"line\"><span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kkk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kkk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset2 set2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smove myset myset2 <span class=\"string\">&quot;kkk&quot;</span>\t\t\t<span class=\"comment\"># 将一个特定的值，移动到另一个set集合中</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smembers myset2</span><br><span class=\"line\">1) <span class=\"string\">&quot;kkk&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;set2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers key1</span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smembers key2</span><br><span class=\"line\">1) <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff key1 key2\t\t\t<span class=\"comment\"># 差集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sinter key1 key2         <span class=\"comment\"># 交集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sunion key1 key2\t\t<span class=\"comment\"># 并集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;b&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hash-哈希\"><a href=\"#Hash-哈希\" class=\"headerlink\" title=\"Hash(哈希)\"></a>Hash(哈希)</h2><p>也是 key - value 形式的，但是value 是一个map。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset myhash field xxx\t\t<span class=\"comment\"># set 一个 key-value</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget myhash field\t\t\t<span class=\"comment\"># 获取一个字段值</span></span><br><span class=\"line\"><span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world\t\t<span class=\"comment\"># set 多个 key-value</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget myhash field field1 field2\t\t\t<span class=\"comment\"># 获取多个字段值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash\t\t\t\t<span class=\"comment\"># 获取全部的数据</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hdel myhash field1\t\t<span class=\"comment\"># 删除指定的key，对应的value也就没有了</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash</span><br><span class=\"line\">1) <span class=\"string\">&quot;field&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hlen myhash\t\t<span class=\"comment\"># 获取长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists myhash field1   <span class=\"comment\"># 判断指定key是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists myhash field2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys myhash\t\t<span class=\"comment\"># 获取所有的key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hvals myhash\t\t<span class=\"comment\"># 获取所有的value</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset myhash field3 5\t\t</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrby myhash field3 1\t\t<span class=\"comment\"># 指定增量</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrby myhash field3 -1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 hello\t\t<span class=\"comment\"># 如果不存在则可以设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 world\t\t<span class=\"comment\"># 如果存在则不能设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>Hash 适合存储经常变动的对象信息，String 更适合于存储字符串。</p>\n<h2 id=\"zset-有序集合\"><a href=\"#zset-有序集合\" class=\"headerlink\" title=\"zset (有序集合)\"></a>zset (有序集合)</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 one\t\t<span class=\"comment\"># 添加一个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 two 3 three\t<span class=\"comment\"># 添加多个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange myset 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实现排序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd salary 2500 xiaohong</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 5000 xiaoming</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 500 xaiozhang</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;xaiozhang&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaoming&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf\t\t<span class=\"comment\"># 从小到大显示全部的用户</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;xaiozhang&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaoming&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrevrange salary 0 -1\t\t<span class=\"comment\"># 从大到小进行排序</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;xiaoming&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xaiozhang&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores   <span class=\"comment\"># 附带成绩的显示所有用户</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;xaiozhang&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;xiaoming&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;5000&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 withscores\t\t\t<span class=\"comment\"># 显示工资小于 2500 的用户</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;xaiozhang&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;xaiozhang&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaoming&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem salary xiaohong  <span class=\"comment\"># 移除特定元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;xaiozhang&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaoming&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zcard salary\t\t<span class=\"comment\"># 获取有序集合的个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 world 3 !</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 3\t\t<span class=\"comment\"># 获取指定区间的人员数量</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis-三种特殊数据类型\"><a href=\"#Redis-三种特殊数据类型\" class=\"headerlink\" title=\"Redis 三种特殊数据类型\"></a>Redis 三种特殊数据类型</h1><h2 id=\"geospatial\"><a href=\"#geospatial\" class=\"headerlink\" title=\"geospatial\"></a>geospatial</h2><p>Redis 在 3.2 推出 Geo 类型，该功能可以推算出地理位置信息，两地之间的距离。</p>\n<p>文档： <a href=\"https://www.redis.net.cn/order/3687.html\">https://www.redis.net.cn/order/3687.html</a></p>\n<p>借助网站模拟一些数据： <a href=\"http://www.jsons.cn/lngcode/\">http://www.jsons.cn/lngcode/</a></p>\n<blockquote>\n<p>geoadd 添加地理位置</p>\n</blockquote>\n<p>规则：两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p>\n<p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。当坐标位置超出指定范围时，该命令将会返回一个错误。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(error) ERR invalid longitude latitude pair xxx yyy</span><br></pre></td></tr></table></figure>\n\n<p>添加一些模拟数据：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shengzhen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>geopos 获得当前定位坐标值</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geopos china:city beijing\t\t<span class=\"comment\"># 获得指定城市的经纬度</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geopos china:city shanghai</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;121.47000163793563843&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;31.22999903975783553&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>geodist 获取两个位置之间的距离</p>\n</blockquote>\n<p>单位：</p>\n<ul>\n<li><strong>m</strong> 表示单位为米。</li>\n<li><strong>km</strong> 表示单位为千米。</li>\n<li><strong>mi</strong> 表示单位为英里。</li>\n<li><strong>ft</strong> 表示单位为英尺。</li>\n</ul>\n<p>如果用户没有显式地指定单位参数， 那么 <code>GEODIST</code> 默认使用米作为单位。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geodist china:city beijing shanghai km\t<span class=\"comment\"># 查看北京和上海直接的直线距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1067.3788&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geodist china:city beijing chongqing km</span><br><span class=\"line\"><span class=\"string\">&quot;1464.0708&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>georedius 以给定的经纬度为中心，找出某一半径内的元素</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km <span class=\"comment\"># 以110, 30 这个点为中心，寻找方圆 1000km 的城市</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 500 km </span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord\t<span class=\"comment\">#  显示他人的定位信息</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist <span class=\"comment\">#  显示到中心点的距离</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist withcoord count 1  <span class=\"comment\"># 指定数量</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist withcoord count 2</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEORADIUSBYMEMBER 找出位于指定元素周围的其他元素</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; georadiusbymember china:city shanghai 1000 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;shanghai&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>geo 底层实现原理其实就是 zset ，可以使用 zset 命令操作 geo</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;beijing&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem china:city beijing\t\t<span class=\"comment\"># 删除一个元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hyperloglog\"><a href=\"#hyperloglog\" class=\"headerlink\" title=\"hyperloglog\"></a>hyperloglog</h2><p>基数：数学上集合的元素个数，是不能重复的。</p>\n<p>UV（Unique visitor）：是指通过互联网访问、浏览这个网页的自然人。访问的一个电脑客户端为一个访客，一天内同一个访客仅被计算一次。</p>\n<p>Redis 2.8.9 版本更新了 hyperloglog 数据结构，是基于基数统计的算法。</p>\n<p>hyperloglog 的优点是占用内存小，并且是固定的。存储 2^64 个不同元素的基数，只需要 12 KB 的空间。但是也可能有 0.81% 的错误率。</p>\n<p>这个数据结构常用于统计网站的 UV。传统的方式是使用 set 保存用户的ID，然后统计 set 中元素的数量作为判断标准。但是这种方式保存了大量的用户 ID，ID 一般比较长，占空间，还很麻烦。我们的目的是计数，不是保存数据，所以这样做有弊端。但是如果使用 hyperloglog 就比较合适了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; pfadd mykey a b c d e f g h i j\t<span class=\"comment\"># 创建第一组元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey\t\t\t\t\t<span class=\"comment\"># 统计 mykey 基数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; PFADD mykey2 i j z x c v b n m  <span class=\"comment\"># 创建第二组元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey2\t\t\t\t\t<span class=\"comment\"># 统计 mykey2 基数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2\t\t<span class=\"comment\"># 合并两组 mykey mykey2 =&gt; mykey3</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bitmap-位图\"><a href=\"#bitmap-位图\" class=\"headerlink\" title=\"bitmap 位图\"></a>bitmap 位图</h2><p>bitmap就是通过最小的单位bit来进行0或者1的设置，表示某个元素对应的值或者状态。一个bit的值，或者是0，或者是1；也就是说一个bit能存储的最多信息是2。</p>\n<p>bitmap 常用于统计用户信息比如活跃粉丝和不活跃粉丝、登录和未登录、是否打卡等。</p>\n<p>这里使用一周打卡的案例说明其用法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setbit sign 0 1\t\t<span class=\"comment\"># 周一打卡了</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 1 0\t\t<span class=\"comment\"># 周二未打卡</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 2 0\t\t<span class=\"comment\"># 周三未打卡</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>查看某一天是否打卡：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GETBIT sign 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; GETBIT sign 6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p>统计：统计打卡的天数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BITCOUNT sign</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["redis"],"tags":["redis"]},{"title":"Redis系列（三）Redis配置文件和持久化","url":"/2021/07/23/db-resource/redis/Redis-3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96/","content":"<h1 id=\"Redis系列-三-Redis配置文件和持久化\"><a href=\"#Redis系列-三-Redis配置文件和持久化\" class=\"headerlink\" title=\"Redis系列(三): Redis配置文件和持久化\"></a>Redis系列(三): Redis配置文件和持久化</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>官方配置文件文档：<a href=\"https://raw.githubusercontent.com/redis/redis/6.0/redis.conf\">https://raw.githubusercontent.com/redis/redis/6.0/redis.conf</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Redis-conf-详解\"><a href=\"#Redis-conf-详解\" class=\"headerlink\" title=\"Redis.conf 详解\"></a>Redis.conf 详解</h1><p>找到启动时指定的配置文件：</p>\n<h3 id=\"1、单位\"><a href=\"#1、单位\" class=\"headerlink\" title=\"1、单位\"></a>1、单位</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Redis configuration file example.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that in order to read the configuration file, Redis must be</span></span><br><span class=\"line\"><span class=\"comment\"># started with the file path as first argument:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ./redis-server /path/to/redis.conf</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class=\"line\"><span class=\"comment\"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 1k =&gt; 1000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1kb =&gt; 1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1m =&gt; 1000000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1g =&gt; 1000000000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件中 unit 单位对大小写不敏感。</p>\n<h3 id=\"2、包含\"><a href=\"#2、包含\" class=\"headerlink\" title=\"2、包含\"></a>2、包含</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################## INCLUDES ###################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Include one or more other config files here.  This is useful if you</span></span><br><span class=\"line\"><span class=\"comment\"># have a standard template that goes to all Redis servers but also need</span></span><br><span class=\"line\"><span class=\"comment\"># to customize a few per-server settings.  Include files can include</span></span><br><span class=\"line\"><span class=\"comment\"># other files, so use this wisely.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class=\"line\"><span class=\"comment\"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class=\"line\"><span class=\"comment\"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If instead you are interested in using includes to override configuration</span></span><br><span class=\"line\"><span class=\"comment\"># options, it is better to use include as the last line.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># include /path/to/local.conf</span></span><br><span class=\"line\"><span class=\"comment\"># include /path/to/other.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件可以将多个配置文件合起来使用。</p>\n<h3 id=\"3、NETWORK-网络\"><a href=\"#3、NETWORK-网络\" class=\"headerlink\" title=\"3、NETWORK 网络\"></a>3、NETWORK 网络</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1\t\t<span class=\"comment\"># 绑定的 IP</span></span><br><span class=\"line\">protected-mode no   <span class=\"comment\"># 保护模式</span></span><br><span class=\"line\">port 6379\t\t\t<span class=\"comment\"># 端口设置</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、GENERAL-通用\"><a href=\"#4、GENERAL-通用\" class=\"headerlink\" title=\"4、GENERAL 通用\"></a>4、GENERAL 通用</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">daemonize yes\t\t<span class=\"comment\"># 以守护进程的方式运行，默认是 no ，我们需要自己开启为 yes</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid\t\t<span class=\"comment\">#  如果是后台启动，我们需要指定一个pid 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志级别</span></span><br><span class=\"line\"><span class=\"comment\"># Specify the server verbosity level.</span></span><br><span class=\"line\"><span class=\"comment\"># This can be one of:</span></span><br><span class=\"line\"><span class=\"comment\"># debug (a lot of information, useful for development/testing)</span></span><br><span class=\"line\"><span class=\"comment\"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class=\"line\"><span class=\"comment\"># notice (moderately verbose, what you want in production probably)</span></span><br><span class=\"line\"><span class=\"comment\"># warning (only very important / critical messages are logged)</span></span><br><span class=\"line\">loglevel notice</span><br><span class=\"line\">logfile <span class=\"string\">&quot;&quot;</span>\t\t<span class=\"comment\"># 日志文件的位置</span></span><br><span class=\"line\">databases 16\t<span class=\"comment\"># 数据库的数量，默认是 16</span></span><br><span class=\"line\">always-show-logo yes  <span class=\"comment\"># 是否总是显示 LOGO</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、快照-SNAPSHOTTING\"><a href=\"#5、快照-SNAPSHOTTING\" class=\"headerlink\" title=\"5、快照 SNAPSHOTTING\"></a>5、快照 SNAPSHOTTING</h3><p>持久化，在规定的时间内，执行了多少次操作则会持久化到文件</p>\n<p>Redis 是内存数据库，如果没有持久化，那么数据断电即失。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################ SNAPSHOTTING  ################################</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Save the DB on disk:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   Will save the DB if both the given number of seconds and the given</span></span><br><span class=\"line\"><span class=\"comment\">#   number of write operations against the DB occurred.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   In the example below the behaviour will be to save:</span></span><br><span class=\"line\"><span class=\"comment\">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class=\"line\"><span class=\"comment\">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class=\"line\"><span class=\"comment\">#   after 60 sec if at least 10000 keys changed</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   It is also possible to remove all the previously configured save</span></span><br><span class=\"line\"><span class=\"comment\">#   points by adding a save directive with a single empty string argument</span></span><br><span class=\"line\"><span class=\"comment\">#   like in the following example:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果 900s 内，至少有 1 个 key 进行了修改，进行持久化操作</span></span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果 300s 内，至少有 10 个 key 进行了修改，进行持久化操作</span></span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\">stop-writes-on-bgsave-error yes  <span class=\"comment\"># 如果持久化出错，是否还要继续工作</span></span><br><span class=\"line\">rdbcompression yes    <span class=\"comment\"># 是否压缩 rdb 文件，需要消耗一些 cpu 资源</span></span><br><span class=\"line\">rdbchecksum yes <span class=\"comment\"># 保存 rdb 文件的时候，进行错误的检查校验</span></span><br><span class=\"line\">dir ./  <span class=\"comment\"># rdb 文件保存的目录</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、SECURITY-安全\"><a href=\"#6、SECURITY-安全\" class=\"headerlink\" title=\"6、SECURITY 安全\"></a>6、SECURITY 安全</h3><p>可以设置 Redis 的密码，默认是没有密码的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass\t\t<span class=\"comment\"># 获取 redis 密码</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; config <span class=\"built_in\">set</span> requirepass <span class=\"string\">&quot;123456&quot;</span>  <span class=\"comment\"># 设置 redis 密码</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">(error) NOAUTH Authentication required.\t\t<span class=\"comment\"># 发现所有的命令都没有权限了</span></span><br><span class=\"line\">127.0.0.1:6379&gt; auth 123456\t\t\t<span class=\"comment\"># 使用密码登录</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、CLIENTS-限制\"><a href=\"#7、CLIENTS-限制\" class=\"headerlink\" title=\"7、CLIENTS 限制\"></a>7、CLIENTS 限制</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################### CLIENTS ####################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the max number of connected clients at the same time. By default</span></span><br><span class=\"line\"><span class=\"comment\"># this limit is set to 10000 clients, however if the Redis server is not</span></span><br><span class=\"line\"><span class=\"comment\"># able to configure the process file limit to allow for the specified limit</span></span><br><span class=\"line\"><span class=\"comment\"># the max number of allowed clients is set to the current file limit</span></span><br><span class=\"line\"><span class=\"comment\"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Once the limit is reached Redis will close all the new connections sending</span></span><br><span class=\"line\"><span class=\"comment\"># an error &#x27;max number of clients reached&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># maxclients 10000\t\t# 设置能链接上 redis 的最大客户端数量</span></span><br><span class=\"line\"><span class=\"comment\"># maxmemory &lt;bytes&gt;\t\t# redis 设置最大的内存容量</span></span><br><span class=\"line\"> maxmemory-policy noeviction  <span class=\"comment\"># 内存达到上限之后的处理策略</span></span><br><span class=\"line\">     - noeviction：当内存使用达到阈值的时候，所有引起申请内存的命令会报错。</span><br><span class=\"line\">    - allkeys-lru：在所有键中采用lru算法删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - volatile-lru：在设置了过期时间的键中采用lru算法删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - allkeys-random：在所有键中采用随机删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - volatile-random：在设置了过期时间的键中随机删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - volatile-ttl：在设置了过期时间的键空间中，具有更早过期时间的key优先移除。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、APPEND-ONLY-模式-AOF-配置\"><a href=\"#8、APPEND-ONLY-模式-AOF-配置\" class=\"headerlink\" title=\"8、APPEND ONLY 模式 AOF 配置\"></a>8、APPEND ONLY 模式 AOF 配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly no  <span class=\"comment\"># 默认是不开启 AOF 模式的，默认使用 rdb 方式持久化，大部分情况下，rdb 完全够用</span></span><br><span class=\"line\"></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span>\t\t<span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always  # 每次修改都会 sync 消耗性能</span></span><br><span class=\"line\">appendfsync everysec  <span class=\"comment\"># 每秒执行一次 sync 可能会丢失这 1s 的数据。</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no      # 不执行 sync 这个时候操作系统自己同步数据，速度最快。</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2、持久化\"><a href=\"#2、持久化\" class=\"headerlink\" title=\"2、持久化\"></a>2、持久化</h2><p><a href=\"https://mp.weixin.qq.com/s/NpUV-7bvXTD3iu0_2aRssQ\">Redis RDB 持久化详解</a></p>\n<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态就会消失，所以 Redis 提供了持久化功能。</p>\n<h3 id=\"1、RDB-Redis-DataBase\"><a href=\"#1、RDB-Redis-DataBase\" class=\"headerlink\" title=\"1、RDB (Redis DataBase)\"></a>1、RDB (Redis DataBase)</h3><blockquote>\n<p>什么是 RDB</p>\n</blockquote>\n<p><img src=\"/2021/07/23/db-resource/redis/Redis-3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96/Redis%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96/JvJLdO-7059514.png\" alt=\"img\"></p>\n<p>在指定的时间间隔内，将内存中的数据集快照写入磁盘，也就是 Snapshot 快照，它恢复时是将快照文件直接读取到内存里的。</p>\n<p>Redis 会单独创建（fork）一个子进程进行持久化，会先将数据写入一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程不进行任何 IO 操作，这就确保的极高的性能。如果需要大规模的数据的恢复，且对数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加高效。RDB 唯一的缺点是最后一次持久化的数据可能会丢失。</p>\n<p>生产环境下，需要对这个文件记性</p>\n<p>默认持久化方式是 RDB，一般不需要修改。</p>\n<p>rdb 保存的文件是 dump.rdb ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The filename where to dump the DB</span></span><br><span class=\"line\">dbfilename dump.rdb</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试1：</strong></p>\n<p>首先修改配置文件保存快照的策略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################ SNAPSHOTTING  ################################</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Save the DB on disk:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># save 900 1</span></span><br><span class=\"line\"><span class=\"comment\"># save 300 10</span></span><br><span class=\"line\"><span class=\"comment\"># save 60 10000</span></span><br><span class=\"line\">save 60 5  <span class=\"comment\"># 只要 60s 内修改了 5 次 key 就会触发 rdb 操作。</span></span><br></pre></td></tr></table></figure>\n\n<p>保存配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; save</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>删除原始的 dump.rdb 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">dump.rdb         jemalloc.sh  kconfig           luajit        mcrypt    redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">jemalloc-config  jeprof       libmcrypt-config  luajit-2.0.4  mdecrypt  redis-check-aof  redis-cli        redis-server</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># rm -rf dump.rdb </span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">jemalloc-config  jeprof   libmcrypt-config  luajit-2.0.4  mdecrypt         redis-check-aof  redis-cli       redis-server</span><br><span class=\"line\">jemalloc.sh      kconfig  luajit            mcrypt        redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>60s 内修改 5 次 key ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>dump.rdb 文件再次出现。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">dump.rdb         jemalloc.sh  kconfig           luajit        mcrypt    redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">jemalloc-config  jeprof       libmcrypt-config  luajit-2.0.4  mdecrypt  redis-check-aof  redis-cli        redis-server</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>恢复数据：</p>\n<p>关闭 Redis 服务和客户端，再次进入时数据被自动恢复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; shutdown\t\t<span class=\"comment\"># 关闭 Redis 服务</span></span><br><span class=\"line\">not connected&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ps -ef|grep redis\t\t# redis 已经关闭了</span></span><br><span class=\"line\">root     25989 23576  0 14:27 pts/1    00:00:00 grep --color=auto redis</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-server kconfig/redis.conf \t\t# 再次开启服务</span></span><br><span class=\"line\">25994:C 02 May 2020 14:28:01.003 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">25994:C 02 May 2020 14:28:01.003 <span class=\"comment\"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=25994, just started</span></span><br><span class=\"line\">25994:C 02 May 2020 14:28:01.003 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379\t\t# 客户端连接</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k2\t\t\t\t\t\t<span class=\"comment\"># 可以直接获取数据，说明k2 被持久化了。</span></span><br><span class=\"line\"><span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>测试2：</strong></p>\n<p>删除 dump.rdb 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@itzhouc bin]<span class=\"comment\"># rm -rf dump.rdb </span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">jemalloc-config  jeprof   libmcrypt-config  luajit-2.0.4  mdecrypt         redis-check-aof  redis-cli       redis-server</span><br><span class=\"line\">jemalloc.sh      kconfig  luajit </span><br></pre></td></tr></table></figure>\n\n<p>在客户端清除所有数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; flushall</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>再次检验 dump.rdb 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">dump.rdb         jemalloc.sh  kconfig           luajit        mcrypt    redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">jemalloc-config  jeprof       libmcrypt-config  luajit-2.0.4  mdecrypt  redis-check-aof  redis-cli        redis-server</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>dump.rdb 文件再次出现。</p>\n<blockquote>\n<p>触发机制</p>\n</blockquote>\n<p>1、save 的规则满足的情况下，会自动触发 rdb 规则</p>\n<p>2、执行 flushall 命令，也会触发 rdb 规则</p>\n<p>3、退出 redis 也会产生 rdb 文件</p>\n<p>备份就自动生成一个 dump.rdb 文件。</p>\n<blockquote>\n<p>如何恢复 rdb 文件</p>\n</blockquote>\n<p>1、只需要将 rdb 文件放在 Redis 启动目录就可以，Redis 启动的时候会自动检查 dump.rdb ，恢复其中的数据；</p>\n<p>2、查看存放 rdb 文件的位置，在客户端中使用如下命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; config get dir</span><br><span class=\"line\">1) <span class=\"string\">&quot;dir&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;/usr/local/bin&quot;</span>  <span class=\"comment\"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>RDB 的优缺点</p>\n</blockquote>\n<p><strong>优点：</strong></p>\n<p>1、适合大规模的数据恢复</p>\n<p>2、对数据的完整性要求不高</p>\n<p><strong>缺点：</strong></p>\n<p>1、需要一定的时间间隔进行操作，如果 Redis 意外宕机，最后一次修改的数据就没有了</p>\n<p>2、fork 进程的时候，会占用一定的空间。</p>\n<h3 id=\"2、AOF-（Append-Only-File）\"><a href=\"#2、AOF-（Append-Only-File）\" class=\"headerlink\" title=\"2、AOF （Append Only File）\"></a>2、AOF （Append Only File）</h3><p>AOF( append only file )持久化以独立日志的方式记录每次写命令，并在 Redis 重启时在重新执行 AOF 文件中的命令以达到恢复数据的目的。AOF 的主要作用是解决数据持久化的实时性。</p>\n<p><a href=\"https://juejin.im/post/5d405370e51d4561fa2ebfe8\">Redis AOF持久化详解</a></p>\n<p>以日志形式来记录每个操作，将 Redis 执行的过程的所有指令记录下来（读操作不记录），只追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一遍以完成数据的恢复工作。</p>\n<p>AOF 保存的是 appendonly.aof 文件。</p>\n<blockquote>\n<p>开启 AOF 模式</p>\n</blockquote>\n<p>将配置文件中默认为 no 的 appendonly 修改为 yes ，重启服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"comment\"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启后可以看到 AOF 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">appendonly.aof  ipsort           jeprof            logs          mcrypt    redis-benchmark  redis-cli       tntrecht</span><br><span class=\"line\">backup.db       jemalloc-config  kconfig           luajit        mdecrypt  redis-check-aof  redis-sentinel</span><br><span class=\"line\">dump.rdb        jemalloc.sh      libmcrypt-config  luajit-2.0.4  pnscan    redis-check-rdb  redis-server</span><br></pre></td></tr></table></figure>\n\n<p>但是文件是空的。使用客户端添加一些数据再次查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># cat appendonly.aof </span></span><br><span class=\"line\">*2</span><br><span class=\"line\"><span class=\"variable\">$6</span></span><br><span class=\"line\">SELECT</span><br><span class=\"line\"><span class=\"variable\">$1</span></span><br><span class=\"line\">0</span><br><span class=\"line\">*3</span><br><span class=\"line\"><span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k1</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v1</span><br><span class=\"line\">*3</span><br><span class=\"line\"><span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k2</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v2</span><br><span class=\"line\">*3</span><br><span class=\"line\"><span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k3</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自动修复 AOF文件</p>\n</blockquote>\n<p>如果手动修改AOF 文件，可能导致 Redis 服务不能启动。比如这里我手动在 AOF 文件的最后一行随便添加一些命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k3</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v3</span><br><span class=\"line\">gjjjjjjjjj</span><br></pre></td></tr></table></figure>\n\n<p>删除 dump.rdb 文件，重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># rm -rf dump.rdb </span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">appendonly.aof   jemalloc.sh  libmcrypt-config  luajit-2.0.4  pnscan           redis-check-rdb  redis-server</span><br><span class=\"line\">ipsort           jeprof       logs              mcrypt        redis-benchmark  redis-cli        tntrecht</span><br><span class=\"line\">jemalloc-config  kconfig      luajit            mdecrypt      redis-check-aof  redis-sentinel</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-server kconfig/redis.conf </span></span><br><span class=\"line\">13746:C 02 May 2020 16:22:43.345 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">13746:C 02 May 2020 16:22:43.346 <span class=\"comment\"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=13746, just started</span></span><br><span class=\"line\">13746:C 02 May 2020 16:22:43.346 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">Could not connect to Redis at 127.0.0.1:6379: Connection refused\t\t<span class=\"comment\"># 连接失败</span></span><br><span class=\"line\">not connected&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果这个 AOF 文件有错位，客户端就不能链接了，需要修复 AOF 文件。Redis 提供了工具 <code>redis-check-aof --fix</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-check-aof --fix appendonly.aof </span></span><br><span class=\"line\">0x              6e: Expected prefix <span class=\"string\">&#x27;*&#x27;</span>, got: <span class=\"string\">&#x27;g&#x27;</span></span><br><span class=\"line\">AOF analyzed: size=122, ok_up_to=110, diff=12</span><br><span class=\"line\">This will shrink the AOF from 122 bytes, with 12 bytes, to 110 bytes</span><br><span class=\"line\">Continue? [y/N]: y</span><br><span class=\"line\">Successfully truncated AOF</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>重启服务，再次尝试链接成功。</p>\n<blockquote>\n<p>AOF 的优缺点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly yes\t\t<span class=\"comment\"># 默认是 no</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span>  <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always   # 每次修改都会 sync ，消耗性能</span></span><br><span class=\"line\">appendfsync everysec   <span class=\"comment\"># 每秒执行一次 sync ，可能会丢失这 1s 的数据</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no       # 不执行 sync，这个时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、每一次修改都同步，文件的完整性更加好</p>\n<p>2、每秒同步一次，可能会丢失一秒的数据</p>\n<p>3、从不同步，效率最高的</p>\n<p><strong>缺点：</strong></p>\n<p>1、相对于数据文件来说， AOF 远远大于 RDB ，修复的速度也比 RDB 慢</p>\n<p>2、AOF 的运行效率也比 RDB 慢，所以 Redis 默认的配置就是 RDB 持久化。</p>\n<h3 id=\"3、扩展\"><a href=\"#3、扩展\" class=\"headerlink\" title=\"3、扩展\"></a>3、扩展</h3><p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>\n<p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以Redis 协议追加保存每次写的操作到文件尾部，Redis 还能对 AOF 文件记性后台重写，使得AOF 文件的体积不至于过大</p>\n<p>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</p>\n<p>4、同时开启两种持久化方式</p>\n<ul>\n<li>在这种情况下，当 Redis 重启的时候会优先加载AOF 文件来恢复原始的数据，因为在通常情况下，AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li>\n<li>RDB 的数据不实时，同步使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？作者建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 BUG，留着作为一个万一的手段。</li>\n</ul>\n<p>5、性能建议</p>\n<ul>\n<li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够了，只保留save 900 1 这条规则。</li>\n<li>如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒的数据，启动脚本较简单只 load 自己的 AOF 文件就可以了，代价是一是带来了持续的IO，而是 AOF rewrite 的最后将rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值是 64M 太小了，可以设置到 5G 以上，默认值超过原大小 100% 大小重写可以改到适当的数值。</li>\n<li>如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用也可以，能省掉一大笔 IO ，也减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时宕掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li>\n</ul>\n","categories":["redis"],"tags":["redis"]},{"title":"Redis系列(四):Redis性能及优化","url":"/2021/08/23/db-resource/redis/Redis-4-%E6%80%A7%E8%83%BD%E5%8F%8A%E4%BC%98%E5%8C%96/","content":"<h1 id=\"Redis系列-四-Redis性能及优化\"><a href=\"#Redis系列-四-Redis性能及优化\" class=\"headerlink\" title=\"Redis系列(四): Redis性能及优化\"></a>Redis系列(四): Redis性能及优化</h1><h1 id=\"Redis6多线程配置\"><a href=\"#Redis6多线程配置\" class=\"headerlink\" title=\"Redis6多线程配置\"></a>Redis6多线程配置</h1><p>redis开启多线程io<br>配置参数<br>io-threads-do-redis yes(改为yes开启多线程io模式)<br>io-thread 2 (开启多线程个数，具体个数根据cpu核数具体配置，推荐线程大小小于等于核数，例如4核建议最大开启3个最小开启2个，8核则建议开启6个，具体可进行压测进行评估，看io的大小，最大为最优个数)</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 也可单独测试get或set</span></span><br><span class=\"line\">redis-benchmark -h 127.0.0.1 -t <span class=\"built_in\">set</span>,get -n 1000 -r 1000 --threads 2 -d 128 -c 100</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/08/23/db-resource/redis/Redis-4-%E6%80%A7%E8%83%BD%E5%8F%8A%E4%BC%98%E5%8C%96/Redis%E7%B3%BB%E5%88%97(%E5%9B%9B\" alt=\"img\">: Redis性能及优化/707331-20180201145503750-901697180.png)</p>\n<p>压测需要一段时间，因为它需要依次压测多个命令的结果，如：get、set、incr、lpush等等，所以我们需要耐心等待，如果只需要压测某个命令，如：get，那么可以在以上的命令后加一个参数-t（红色部分）</p>\n","categories":["redis"],"tags":["redis"]},{"title":"Redis系列(六):发布订阅模式、主从复制和哨兵模式","url":"/2021/11/23/db-resource/redis/Redis-6-HA/","content":"<h1 id=\"Redis系列（六）发布订阅模式、主从复制和哨兵模式\"><a href=\"#Redis系列（六）发布订阅模式、主从复制和哨兵模式\" class=\"headerlink\" title=\"Redis系列（六）发布订阅模式、主从复制和哨兵模式\"></a>Redis系列（六）发布订阅模式、主从复制和哨兵模式</h1><h1 id=\"Redis-订阅发布\"><a href=\"#Redis-订阅发布\" class=\"headerlink\" title=\"Redis 订阅发布\"></a>Redis 订阅发布</h1><p>Redis 发布订阅（pub/sub）是一种消息通信模式：发送者发（pub）送消息，订阅者(sub)接收消息。</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p>订阅 / 发布消息图：</p>\n<span id=\"more\"></span>\n\n<img src=\"/2021/11/23/db-resource/redis/Redis-6-HA/Jx8lVS-20220107032209304.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>下图展示了频道 channel1，已经订阅这个频道的三个客户端</p>\n<img src=\"/2021/11/23/db-resource/redis/Redis-6-HA/Jx8jZ8.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>当有新消息通过 publish 命令发送给频道 channel1 时，这个消息就会被发送给订阅它的三个客户端。</p>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p>这些命令被广泛应用于构建即时通讯应用、比如网络聊天室和实时广播、实时提醒等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">[PSUBSCRIBE pattern <a href=\"https://www.runoob.com/redis/pub-sub-psubscribe.html\">pattern …]</a> 订阅一个或多个符合给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">[PUBSUB subcommand <a href=\"https://www.runoob.com/redis/pub-sub-pubsub.html\">argument [argument …]]</a> 查看订阅与发布系统状态。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-publish.html\">PUBLISH channel message</a> 将信息发送到指定的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">[PUNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-punsubscribe.html\">pattern [pattern …]]</a> 退订所有给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">[SUBSCRIBE channel <a href=\"https://www.runoob.com/redis/pub-sub-subscribe.html\">channel …]</a> 订阅给定的一个或多个频道的信息。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">[UNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-unsubscribe.html\">channel [channel …]]</a> 指退订给定的频道。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p>以下实例演示了发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 <strong>redisChat</strong>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat</span><br><span class=\"line\"></span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">&quot;subscribe&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;redisChat&quot;</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; PUBLISH redisChat <span class=\"string\">&quot;Redis is a great caching technique&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PUBLISH redisChat <span class=\"string\">&quot;Learn redis by runoob.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 订阅者的客户端会显示如下消息</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;message&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;redisChat&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;Redis is a great caching technique&quot;</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;message&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;redisChat&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;Learn redis by runoob.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原理</p>\n</blockquote>\n<p>Redis 是使用 C 实现的，通过分析 Redis 源码里的 public.c 文件，了解发布和订阅机制的底层实现，借此加深对 Redis 的理解。Redis 通过 public 、subscribe 和 psubscribe 等命令实现发布和订阅功能。</p>\n<p>微信：</p>\n<p>通过 subscribe 命令订阅某频道后，redis=server 里面维护了一个字典，字典的键就是一个个频道！而字典的值则是一个链表，链表保存了所有订阅这个 channel 的客户端。subscribe 命令的关键，就是讲客户端添加到给定 channel 的订阅链中。</p>\n<p>通过 publish 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有的订阅者。</p>\n<p><strong>使用场景：</strong></p>\n<p>1、实时消息系统</p>\n<p>2、实时聊天</p>\n<p>3、订阅、关注系统都可以</p>\n<p>稍微复杂的场景更多的使用消息中间件 MQ。</p>\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称之为主节点（master/leader），后者称之为从节点（slave/flower）；数据的复制都是单向的，只能从主节点到从节点。Master 以写为主，Slave 以读为主。</p>\n<p>默认情况下，每台 Redis 服务器都是主节点。且一个主节点可以有多个从节点或者没有从节点，但是一个从节点只能有一个主节点。</p>\n<h3 id=\"主从复制的作用\"><a href=\"#主从复制的作用\" class=\"headerlink\" title=\"主从复制的作用\"></a>主从复制的作用</h3><p>1、数据冗余：主从复制实现了数据的热备份，是持久化的之外的一种数据冗余方式。</p>\n<p>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复。实际也是一种服务的冗余。</p>\n<p>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis 数据时应用连接主节点，读 Redis 的时候应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个节点分担读负载，可以大大提高 Redis 服务器的并发量。</p>\n<p>4、高可用（集群）的基石：除了上述作用以外，主从复制还是哨兵模式和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p>\n<p>一般来说，要将Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（可能会宕机），原因如下：</p>\n<p>1、从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力很大；</p>\n<p>2、从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为 265G， 也不能将所有的内存用作 Redis 存储内存，一般来说，<strong>单台 Redis最大使用内存不应该超过 20G</strong>。</p>\n<p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点就是“多读少写”。</p>\n<p>对于这种场景，我们可以使用如下这种架构</p>\n<img src=\"/2021/11/23/db-resource/redis/Redis-6-HA/YsMvfP.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>主从复制，读写分离！80% 的情况下，都是在进行读操作。这种架构可以减少服务器压力，经常使用实际生产环境中，最少是“一主二从”的配置。真实环境中不可能使用单机 Redis。</p>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p>只配置从库，不用配置主库。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; info replication\t\t\t<span class=\"comment\"># 查看当前库的信息</span></span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master\t\t\t\t\t\t\t\t\t<span class=\"comment\"># 角色</span></span><br><span class=\"line\">connected_slaves:0\t\t\t\t\t\t\t<span class=\"comment\"># 当前没有从库</span></span><br><span class=\"line\">master_replid:2467dd9bd1c252ce80df280c925187b3417055ad</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>复制 3 个配置文件，然后修改对应的信息</p>\n<p>1、端口</p>\n<p>2、pid 名称</p>\n<p>3、log 文件名称</p>\n<p>4、dump.rdb 名称</p>\n<p>port 6381 pidfile /var/run/redis_6381.pid logfile “6381.log” dbfilename dump6381.rdb</p>\n<p>修改完毕后，启动我们的 3 个 redis 服务器，可以通过进程信息查询。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc ~]<span class=\"comment\"># ps -ef|grep redis</span></span><br><span class=\"line\">root       426     1  0 16:53 ?        00:00:00 redis-server *:6379</span><br><span class=\"line\">root       446     1  0 16:54 ?        00:00:00 redis-server *:6380</span><br><span class=\"line\">root       457     1  0 16:54 ?        00:00:00 redis-server *:6381</span><br><span class=\"line\">root       464   304  0 16:54 pts/3    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一主二从\"><a href=\"#一主二从\" class=\"headerlink\" title=\"一主二从\"></a>一主二从</h3><p>默认情况下，每台 Redis 服务器都是主节点，我们一般情况下，只用配置从机就好了。</p>\n<p>主机：6379， 从机：6380 和 6381</p>\n<p>配置的方式有两种：一种是直接使用命令配置，这种方式当 Redis 重启后配置会失效。另一种方式是使用配置文件。这里使用命令演示一下。</p>\n<p>下面将80 和 81 两个配置为在从机。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379\t\t<span class=\"comment\"># SLAVEOF host  port</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:slave\t\t\t<span class=\"comment\"># 角色已经是从机了</span></span><br><span class=\"line\">master_host:127.0.0.1\t<span class=\"comment\"># 主节点地址</span></span><br><span class=\"line\">master_port:6379\t\t\t<span class=\"comment\"># 主节点端口</span></span><br><span class=\"line\">master_link_status:up</span><br><span class=\"line\">master_last_io_seconds_ago:6</span><br><span class=\"line\">master_sync_in_progress:0</span><br><span class=\"line\">slave_repl_offset:0</span><br><span class=\"line\">slave_priority:100</span><br><span class=\"line\">slave_read_only:1</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_replid:907bcdf00c69d361ede43f4f6181004e2148efb7</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\">127.0.0.1:6380&gt; </span><br></pre></td></tr></table></figure>\n\n<p>配置好了之后，看主机：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:2\t\t<span class=\"comment\"># 主节点下有两个从节点</span></span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6380,state=online,offset=420,lag=1</span><br><span class=\"line\">slave1:ip=127.0.0.1,port=6381,state=online,offset=420,lag=1</span><br><span class=\"line\">master_replid:907bcdf00c69d361ede43f4f6181004e2148efb7</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:420</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:420</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>真实的主从配置应该是在配置文件中配置，这样才是永久的。这里使用命令是暂时的。</p>\n<p>配置文件 redis.conf</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################# REPLICATION #################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span></span><br><span class=\"line\"><span class=\"comment\"># another Redis server. A few things to understand ASAP about Redis replication.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   +------------------+      +---------------+</span></span><br><span class=\"line\"><span class=\"comment\">#   |      Master      | ---&gt; |    Replica    |</span></span><br><span class=\"line\"><span class=\"comment\">#   | (receive writes) |      |  (exact copy) |</span></span><br><span class=\"line\"><span class=\"comment\">#   +------------------+      +---------------+</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 1) Redis replication is asynchronous, but you can configure a master to</span></span><br><span class=\"line\"><span class=\"comment\">#    stop accepting writes if it appears to be not connected with at least</span></span><br><span class=\"line\"><span class=\"comment\">#    a given number of replicas.</span></span><br><span class=\"line\"><span class=\"comment\"># 2) Redis replicas are able to perform a partial resynchronization with the</span></span><br><span class=\"line\"><span class=\"comment\">#    master if the replication link is lost for a relatively small amount of</span></span><br><span class=\"line\"><span class=\"comment\">#    time. You may want to configure the replication backlog size (see the next</span></span><br><span class=\"line\"><span class=\"comment\">#    sections of this file) with a sensible value depending on your needs.</span></span><br><span class=\"line\"><span class=\"comment\"># 3) Replication is automatic and does not need user intervention. After a</span></span><br><span class=\"line\"><span class=\"comment\">#    network partition replicas automatically try to reconnect to masters</span></span><br><span class=\"line\"><span class=\"comment\">#    and resynchronize with them.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># replicaof &lt;masterip&gt; &lt;masterport&gt;\t\t\t# 这里配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If the master is password protected (using the &quot;requirepass&quot; configuration</span></span><br><span class=\"line\"><span class=\"comment\"># directive below) it is possible to tell the replica to authenticate before</span></span><br><span class=\"line\"><span class=\"comment\"># starting the replication synchronization process, otherwise the master will</span></span><br><span class=\"line\"><span class=\"comment\"># refuse the replica request.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># masterauth &lt;master-password&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置方式也是一样的。</p>\n<h3 id=\"几个问题\"><a href=\"#几个问题\" class=\"headerlink\" title=\"几个问题\"></a>几个问题</h3><p>1、主机可以写，从机不能写只能读。主机中的所有信息和数据都会保存在从机中。如果从机尝试进行写操作就会报错。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; get k1\t\t\t<span class=\"comment\"># k1的值是在主机中写入的，从机中可以读取到。</span></span><br><span class=\"line\"><span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">127.0.0.1:6381&gt; <span class=\"built_in\">set</span> k2 v2\t\t\t<span class=\"comment\"># 从机尝试写操作，报错了</span></span><br><span class=\"line\">(error) READONLY You can<span class=\"string\">&#x27;t write against a read only replica.</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6381&gt; </span></span><br></pre></td></tr></table></figure>\n\n<p>2、如果主机断开了，从机依然链接到主机，可以进行读操作，但是还是没有写操作。这个时候，主机如果恢复了，从机依然可以直接从主机同步信息。</p>\n<p>3、使用命令行配置的主从机，如果从机重启了，就会变回主机。如果再通过命令变回从机的话，立马就可以从主机中获取值。这是复制原理决定的。</p>\n<h3 id=\"复制原理\"><a href=\"#复制原理\" class=\"headerlink\" title=\"复制原理\"></a>复制原理</h3><p><strong>Slave 启动成功连接到 Master 后会发送一个 sync 同步命令。</strong></p>\n<p>Master 接收到命令后，启动后台的存盘进程，同时收集所有接收到的用于修改数据集的命令，在后台进程执行完毕后，master 将传送整个数据文件到 slave ，并完成一次完全同步。</p>\n<p><strong>全量复制：</strong>Slave 服务在接收到数据库文件后，将其存盘并加载到内存中。</p>\n<p><strong>增量复制：</strong> Master 继续将新的所有收集到的修改命令一次传给 slave，完成同步。</p>\n<p>但是只要重新连接 master ，一次完全同步（全量复制）将被自动执行。我们的数据一定可以在从机中看到。</p>\n<p>这种模式的原理图：</p>\n<img src=\"/2021/11/23/db-resource/redis/Redis-6-HA/Ys7G5T.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<h3 id=\"第二种模式\"><a href=\"#第二种模式\" class=\"headerlink\" title=\"第二种模式\"></a>第二种模式</h3><p><img src=\"/2021/11/23/db-resource/redis/Redis-6-HA/Ys7gRe.png\" alt=\"img\"></p>\n<p>这种模式的话，将 6381 的主节点配置为 6380 。主节点 6379 只有一个从机。</p>\n<p>如果现在 6379 节点宕机了， 6380 和 6381 节点都是从节点，只能进行读操作，都不会自动变为主节点。需要手动将其中一个变为主节点，使用如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">SLAVEOF no one</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>主从切换技术的方式是：当主机服务器宕机之后，需要手动将一台服务器切换为主服务器，这需要人工干预，费时费力，还会造成一段时间内的服务不可用。这不是一种推荐的方式，更多的时候我们优先考虑的的是哨兵模式。Redis 从 2.8 开始正式提供了 Sentinel（哨兵）架构来解决这个问题。</p>\n<p>哨兵模式能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p>\n<p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它独立运行。其原理是<strong>哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例</strong>。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-6-HA/YsvNuD.png\" alt=\"img\"></p>\n<p>这里的哨兵有两个作用</p>\n<ul>\n<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器</li>\n<li>当哨兵检测到 master 宕机，会自动将 slave 切换为 master，然后通过发布订阅模式通知其他的从放服务器，修改配置文件，让他们切换主机。</li>\n</ul>\n<p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-6-HA/YypgWn.png\" alt=\"img\"></p>\n<p>假设主服务器宕机了，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵 1 主观认为主服务器不可用，这个现象称之为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 【故障转移】。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称之为<strong>客观下线</strong>。</p>\n<h3 id=\"配置一个一主二从的哨兵模式\"><a href=\"#配置一个一主二从的哨兵模式\" class=\"headerlink\" title=\"配置一个一主二从的哨兵模式\"></a>配置一个一主二从的哨兵模式</h3><p>1、配置哨兵模式配置文件，新建文件 <code>/usr/local/bin/kconfig/sentinel.conf</code>。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sentinel monitor 被监控的名字（随便写） host 1</span></span><br><span class=\"line\">sentinel monitor myredis 127.0.0.1 1</span><br></pre></td></tr></table></figure>\n\n<p>后面的数字1代表主机宕机后，slave投票决定谁成为新的主机，票数最多成为主机。</p>\n<p>2、启动哨兵</p>\n<p>如果现在 Master 节点宕机了，这个时候会从从机中根据投票算法选择一个作为主机。</p>\n<p>如果原来的主机恢复运行了，只能归到新的主机下，作为从机， 这就是哨兵模式的规则。</p>\n<blockquote>\n<p>哨兵模式的优点</p>\n</blockquote>\n<p>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>\n<p>2、主从可以切换，故障可以转移，系统的可用性就会更好</p>\n<p>3、哨兵模式就是主从模式的升级，手动到自动，更加健壮。</p>\n<blockquote>\n<p>哨兵模式的缺点</p>\n</blockquote>\n<p>1、Redis 不方便在线扩容，集群达到一定的上限，在线扩容就会十分麻烦；</p>\n<p>2、实现哨兵模式的配置其实也很麻烦，里面有甚多的配置项。</p>\n","categories":["redis"],"tags":["redis"]},{"title":"Redis系列(五):Redis配置文件和持久化","url":"/2021/11/23/db-resource/redis/Redis-5-config-persistence/","content":"<h1 id=\"Redis系列-五-Redis配置文件和持久化\"><a href=\"#Redis系列-五-Redis配置文件和持久化\" class=\"headerlink\" title=\"Redis系列(五):Redis配置文件和持久化\"></a>Redis系列(五):Redis配置文件和持久化</h1><h1 id=\"Redis-conf-详解\"><a href=\"#Redis-conf-详解\" class=\"headerlink\" title=\"Redis.conf 详解\"></a>Redis.conf 详解</h1><p>找到启动时指定的配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc ~]<span class=\"comment\"># cd /usr/local/bin</span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">dump.rdb         jemalloc.sh  kconfig           luajit        mcrypt    redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">jemalloc-config  jeprof       libmcrypt-config  luajit-2.0.4  mdecrypt  redis-check-aof  redis-cli        redis-server</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># cd kconfig/</span></span><br><span class=\"line\">[root@itzhouc kconfig]<span class=\"comment\"># vim redis.conf</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"单位\"><a href=\"#单位\" class=\"headerlink\" title=\"单位\"></a>单位</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Redis configuration file example.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that in order to read the configuration file, Redis must be</span></span><br><span class=\"line\"><span class=\"comment\"># started with the file path as first argument:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ./redis-server /path/to/redis.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class=\"line\"><span class=\"comment\"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 1k =&gt; 1000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1kb =&gt; 1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1m =&gt; 1000000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1g =&gt; 1000000000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件中 unit 单位对大小写不敏感。</p>\n<h2 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################## INCLUDES ###################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Include one or more other config files here.  This is useful if you</span></span><br><span class=\"line\"><span class=\"comment\"># have a standard template that goes to all Redis servers but also need</span></span><br><span class=\"line\"><span class=\"comment\"># to customize a few per-server settings.  Include files can include</span></span><br><span class=\"line\"><span class=\"comment\"># other files, so use this wisely.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class=\"line\"><span class=\"comment\"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class=\"line\"><span class=\"comment\"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If instead you are interested in using includes to override configuration</span></span><br><span class=\"line\"><span class=\"comment\"># options, it is better to use include as the last line.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># include /path/to/local.conf</span></span><br><span class=\"line\"><span class=\"comment\"># include /path/to/other.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件可以将多个配置文件合起来使用。</p>\n<h2 id=\"NETWORK-网络\"><a href=\"#NETWORK-网络\" class=\"headerlink\" title=\"NETWORK 网络\"></a>NETWORK 网络</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1\t\t<span class=\"comment\"># 绑定的 IP</span></span><br><span class=\"line\">protected-mode no   <span class=\"comment\"># 保护模式</span></span><br><span class=\"line\">port 6379\t\t\t<span class=\"comment\"># 端口设置</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GENERAL-通用\"><a href=\"#GENERAL-通用\" class=\"headerlink\" title=\"GENERAL 通用\"></a>GENERAL 通用</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">daemonize yes\t\t<span class=\"comment\"># 以守护进程的方式运行，默认是 no ，我们需要自己开启为 yes</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid\t\t<span class=\"comment\">#  如果是后台启动，我们需要指定一个pid 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志级别</span></span><br><span class=\"line\"><span class=\"comment\"># Specify the server verbosity level.</span></span><br><span class=\"line\"><span class=\"comment\"># This can be one of:</span></span><br><span class=\"line\"><span class=\"comment\"># debug (a lot of information, useful for development/testing)</span></span><br><span class=\"line\"><span class=\"comment\"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class=\"line\"><span class=\"comment\"># notice (moderately verbose, what you want in production probably)</span></span><br><span class=\"line\"><span class=\"comment\"># warning (only very important / critical messages are logged)</span></span><br><span class=\"line\">loglevel notice</span><br><span class=\"line\">logfile <span class=\"string\">&quot;&quot;</span>\t\t<span class=\"comment\"># 日志文件的位置</span></span><br><span class=\"line\">databases 16\t<span class=\"comment\"># 数据库的数量，默认是 16</span></span><br><span class=\"line\">always-show-logo yes  <span class=\"comment\"># 是否总是显示 LOGO</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快照-SNAPSHOTTING\"><a href=\"#快照-SNAPSHOTTING\" class=\"headerlink\" title=\"快照 SNAPSHOTTING\"></a>快照 SNAPSHOTTING</h2><p>持久化，在规定的时间内，执行了多少次操作则会持久化到文件</p>\n<p>Redis 是内存数据库，如果没有持久化，那么数据断电即失。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################ SNAPSHOTTING  ################################</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Save the DB on disk:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   Will save the DB if both the given number of seconds and the given</span></span><br><span class=\"line\"><span class=\"comment\">#   number of write operations against the DB occurred.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   In the example below the behaviour will be to save:</span></span><br><span class=\"line\"><span class=\"comment\">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class=\"line\"><span class=\"comment\">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class=\"line\"><span class=\"comment\">#   after 60 sec if at least 10000 keys changed</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   It is also possible to remove all the previously configured save</span></span><br><span class=\"line\"><span class=\"comment\">#   points by adding a save directive with a single empty string argument</span></span><br><span class=\"line\"><span class=\"comment\">#   like in the following example:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果 900s 内，至少有 1 个 key 进行了修改，进行持久化操作</span></span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果 300s 内，至少有 10 个 key 进行了修改，进行持久化操作</span></span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\">stop-writes-on-bgsave-error yes  <span class=\"comment\"># 如果持久化出错，是否还要继续工作</span></span><br><span class=\"line\">rdbcompression yes    <span class=\"comment\"># 是否压缩 rdb 文件，需要消耗一些 cpu 资源</span></span><br><span class=\"line\">rdbchecksum yes <span class=\"comment\"># 保存 rdb 文件的时候，进行错误的检查校验</span></span><br><span class=\"line\">dir ./  <span class=\"comment\"># rdb 文件保存的目录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SECURITY-安全\"><a href=\"#SECURITY-安全\" class=\"headerlink\" title=\"SECURITY 安全\"></a>SECURITY 安全</h2><p>可以设置 Redis 的密码，默认是没有密码的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass\t\t<span class=\"comment\"># 获取 redis 密码</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; config <span class=\"built_in\">set</span> requirepass <span class=\"string\">&quot;123456&quot;</span>  <span class=\"comment\"># 设置 redis 密码</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">(error) NOAUTH Authentication required.\t\t<span class=\"comment\"># 发现所有的命令都没有权限了</span></span><br><span class=\"line\">127.0.0.1:6379&gt; auth 123456\t\t\t<span class=\"comment\"># 使用密码登录</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CLIENTS-限制\"><a href=\"#CLIENTS-限制\" class=\"headerlink\" title=\"CLIENTS 限制\"></a>CLIENTS 限制</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################### CLIENTS ####################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the max number of connected clients at the same time. By default</span></span><br><span class=\"line\"><span class=\"comment\"># this limit is set to 10000 clients, however if the Redis server is not</span></span><br><span class=\"line\"><span class=\"comment\"># able to configure the process file limit to allow for the specified limit</span></span><br><span class=\"line\"><span class=\"comment\"># the max number of allowed clients is set to the current file limit</span></span><br><span class=\"line\"><span class=\"comment\"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Once the limit is reached Redis will close all the new connections sending</span></span><br><span class=\"line\"><span class=\"comment\"># an error &#x27;max number of clients reached&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># maxclients 10000\t\t# 设置能链接上 redis 的最大客户端数量</span></span><br><span class=\"line\"><span class=\"comment\"># maxmemory &lt;bytes&gt;\t\t# redis 设置最大的内存容量</span></span><br><span class=\"line\"> maxmemory-policy noeviction  <span class=\"comment\"># 内存达到上限之后的处理策略</span></span><br><span class=\"line\">     - noeviction：当内存使用达到阈值的时候，所有引起申请内存的命令会报错。</span><br><span class=\"line\">    - allkeys-lru：在所有键中采用lru算法删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - volatile-lru：在设置了过期时间的键中采用lru算法删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - allkeys-random：在所有键中采用随机删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - volatile-random：在设置了过期时间的键中随机删除键，直到腾出足够内存为止。</span><br><span class=\"line\">    - volatile-ttl：在设置了过期时间的键空间中，具有更早过期时间的key优先移除。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"APPEND-ONLY-模式-AOF-配置\"><a href=\"#APPEND-ONLY-模式-AOF-配置\" class=\"headerlink\" title=\"APPEND ONLY 模式 AOF 配置\"></a>APPEND ONLY 模式 AOF 配置</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly no  <span class=\"comment\"># 默认是不开启 AOF 模式的，默认使用 rdb 方式持久化，大部分情况下，rdb 完全够用</span></span><br><span class=\"line\"></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span>\t\t<span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always  # 每次修改都会 sync 消耗性能</span></span><br><span class=\"line\">appendfsync everysec  <span class=\"comment\"># 每秒执行一次 sync 可能会丢失这 1s 的数据。</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no      # 不执行 sync 这个时候操作系统自己同步数据，速度最快。</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态就会消失，所以 Redis 提供了持久化功能。</p>\n<h2 id=\"RDB-Redis-DataBase\"><a href=\"#RDB-Redis-DataBase\" class=\"headerlink\" title=\"RDB (Redis DataBase)\"></a>RDB (Redis DataBase)</h2><p>什么是 RDB</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/JvJLdO-1491114.png\" alt=\"img\"></p>\n<p>在指定的时间间隔内，将内存中的数据集快照写入磁盘，也就是 Snapshot 快照，它恢复时是将快照文件直接读取到内存里的。</p>\n<p>Redis 会单独创建（fork）一个子进程进行持久化，会先将数据写入一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程不进行任何 IO 操作，这就确保的极高的性能。如果需要大规模的数据的恢复，且对数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加高效。RDB 唯一的缺点是最后一次持久化的数据可能会丢失。</p>\n<p>生产环境下，需要对这个文件记性</p>\n<p>默认持久化方式是 RDB，一般不需要修改。</p>\n<p>rdb 保存的文件是 dump.rdb ：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The filename where to dump the DB</span></span><br><span class=\"line\">dbfilename dump.rdb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RDB-持久化详解\"><a href=\"#RDB-持久化详解\" class=\"headerlink\" title=\"RDB 持久化详解\"></a>RDB 持久化详解</h3><p>Redis 是一种内存数据库，将数据保存在内存中，读写效率要比传统的将数据保存在磁盘上的数据库要快很多。但是一旦进程退出，Redis 的数据就会丢失。</p>\n<p>为了解决这个问题，Redis 提供了 RDB 和 AOF 两种持久化方案，将内存中的数据保存到磁盘中，避免数据丢失。</p>\n<p>antirez 在《Redis 持久化解密》一文中说，一般来说有三种常见的策略来进行持久化操作，防止数据损坏：</p>\n<ul>\n<li>方法1 是数据库不关心发生故障，在数据文件损坏后通过数据备份或者快照来进行恢复。Redis 的 RDB 持久化就是这种方式。</li>\n<li>方法2 是数据库使用操作日志，每次操作时记录操作行为，以便在故障后通过日志恢复到一致性的状态。因为操作日志是顺序追加的方式写的，所以不会出现操作日志也无法恢复的情况。类似于 Mysql 的 redo 和 undo 日志，具体可以看这篇<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NjE5NDQyOA==&mid=2247483785&idx=1&sn=e40537c048f0880daf441350c695ffc6&scene=21#wechat_redirect\">《InnoDB的磁盘文件及落盘机制》</a>文章。</li>\n<li>方法3 是数据库不进行老数据的修改，只是以追加方式去完成写操作，这样数据本身就是一份日志，这样就永远不会出现数据无法恢复的情况了。CouchDB就是此做法的优秀范例。</li>\n</ul>\n<p>RDB 就是第一种方法，它就是把当前 Redis 进程的数据生成时间点快照( point-in-time snapshot ) 保存到存储设备的过程。</p>\n<p><strong>RDB 的使用</strong></p>\n<p>RDB 触发机制分为使用指令手动触发和 redis.conf 配置自动触发。</p>\n<p>手动触发 Redis 进行 RDB 持久化的指令的为:</p>\n<ul>\n<li>save ，该指令会阻塞当前 Redis 服务器，执行 save 指令期间，Redis 不能处理其他命令，直到 RDB 过程完成为止。</li>\n<li>bgsave，执行该命令时，Redis 会在后台异步执行快照操作，此时 Redis 仍然可以相应客户端请求。具体操作是 Redis 进程执行 <code>fork</code> 操作创建子进程，RDB 持久化过程由子进程负责，完成后自动结束。Redis 只会在 <code>fork</code> 期间发生阻塞，但是一般时间都很短。但是如果 Redis 数据量特别大， <code>fork</code> 时间就会变长，而且占用内存会加倍，这一点需要特别注意。</li>\n</ul>\n<p>自动触发 RDB 的默认配置如下所示:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">save 900 1 <span class=\"comment\"># 表示900 秒内如果至少有 1 个 key 的值变化，则触发RDB</span></span><br><span class=\"line\">save 300 10 <span class=\"comment\"># 表示300 秒内如果至少有 10 个 key 的值变化，则触发RDB</span></span><br><span class=\"line\">save 60 10000 <span class=\"comment\"># 表示60 秒内如果至少有 10000 个 key 的值变化，则触发RDB</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不需要 Redis 进行持久化，那么可以注释掉所有的 save 行来停用保存功能，也可以直接一个空字符串来停用持久化：save “”。</p>\n<p>Redis 服务器周期操作函数 <code>serverCron</code> 默认每个 100 毫秒就会执行一次，该函数用于正在运行的服务器进行维护，它的一项工作就是检查 save 选项所设置的条件是否有一项被满足，如果满足的话，就执行 bgsave 指令。</p>\n<p>如果不需要 Redis 进行持久化，那么可以注释掉所有的 save 行来停用保存功能，也可以直接一个空字符串来停用持久化：save “”。</p>\n<p>Redis 服务器周期操作函数 <code>serverCron</code> 默认每个 100 毫秒就会执行一次，该函数用于正在运行的服务器进行维护，它的一项工作就是检查 save 选项所设置的条件是否有一项被满足，如果满足的话，就执行 bgsave 指令。</p>\n<p><strong>RDB 整体流程</strong></p>\n<p>了解了 RDB 的基础使用后，我们要继续深入对 RDB持久化的学习。在此之前，我们可以先思考一下如何实现一个持久化机制，毕竟这是很多中间件所需的一个模块。</p>\n<p>首先，持久化保存的文件内容结构必须是紧凑的，特别对于数据库来说，需要持久化的数据量十分大，需要保证持久化文件不至于占用太多存储。其次，进行持久化时，中间件应该还可以快速地响应用户请求，持久化的操作应该尽量少影响中间件的其他功能。最后，毕竟持久化会消耗性能，如何在性能和数据安全性之间做出平衡，如何灵活配置触发持久化操作。</p>\n<p>接下来我们将带着这些问题，到源码中寻求答案。</p>\n<p>本文中的源码来自 Redis 4.0 ，RDB持久化过程的相关源码都在 rdb.c 文件中。其中大概的流程如下图所示。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/640-1491917.jpeg\" alt=\"图片\"></p>\n<p>上图表明了三种触发 RDB 持久化的手段之间的整体关系。通过 <code>serverCron</code> 自动触发的 RDB 相当于直接调用了 bgsave 指令的流程进行处理。而 bgsave 的处理流程启动子进程后，调用了 save 指令的处理流程。</p>\n<p>下面我们从 <code>serverCron</code> 自动触发逻辑开始研究。</p>\n<p><strong>自动触发 RDB 持久化</strong></p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/640-20220107015904797-1491946.jpeg\" alt=\"图片\"></p>\n<p>如上图所示， <code>redisServer</code> 结构体的 <code>save_params</code>指向拥有三个值的数组，该数组的值与 redis.conf 文件中 save 配置项一一对应。分别是 <code>save9001</code>、 <code>save30010</code> 和 <code>save6010000</code>。<code>dirty</code> 记录着有多少键值发生变化， <code>lastsave</code>记录着上次 RDB 持久化的时间。</p>\n<p>而 <code>serverCron</code> 函数就是遍历该数组的值，检查当前 Redis 状态是否符合触发 RDB 持久化的条件，比如说距离上次 RDB 持久化过去了 900 秒并且有至少一条数据发生变更。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">serverCron</span><span class=\"params\">(struct aeEventLoop *eventLoop, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> id, <span class=\"keyword\">void</span> *clientData)</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">   <span class=\"comment\">/* Check if a background saving or AOF rewrite in progress terminated. */</span></span><br><span class=\"line\">  <span class=\"comment\">/*判断后台是否正在进行rdb或者aof操作*/</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (server.rdb_child_pid != -<span class=\"number\">1</span> || server.aof_child_pid != -<span class=\"number\">1</span> || ldbPendingChildren())</span><br><span class=\"line\">   &#123; </span><br><span class=\"line\">     ...</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//到这儿就能确定当前木有进行rdb或者aof操作</span></span><br><span class=\"line\">       <span class=\"comment\">//遍历每一个rdb保存条件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; server.saveparamslen; j++) &#123;</span><br><span class=\"line\">          struct saveparam *sp = server.saveparams+j;</span><br><span class=\"line\">          <span class=\"comment\">//如果数据保存记录大于规定的修改次数且距离上一次保存的时间大于规定时间或者上次BG 行成功，才执行BGSAVE操作</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (server.dirty &gt;= sp-&gt;changes &amp;&amp;</span><br><span class=\"line\">              server.unixtime-server.lastsave &gt; sp-&gt;seconds &amp;&amp;</span><br><span class=\"line\">              (server.unixtime-server.lastbgsave_try &gt;</span><br><span class=\"line\">              CONFIG_BGSAVE_RETRY_DELAY ||</span><br><span class=\"line\">               server.lastbgsave_status == C_0K)) &#123;</span><br><span class=\"line\">              <span class=\"comment\">//记录日志</span></span><br><span class=\"line\">              serverLog(LL_NOTICE,<span class=\"string\">&quot;%d changes in %d seconds. Saving…&quot;</span>,</span><br><span class=\"line\">                        sp-&gt;changesf (<span class=\"keyword\">int</span>)sp-&gt;seconds);</span><br><span class=\"line\">              rdbSavelnfo rsi, *rsiptr;</span><br><span class=\"line\">              rsiptr = rdbPopulateSaveInfo(&amp;rsi);</span><br><span class=\"line\">              <span class=\"comment\">//异步保存操作</span></span><br><span class=\"line\">              rdbSaveBackground(server.rdb_filename,rsiptr);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">   server.cronloops++;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">1000</span>/server.hz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果符合触发 RDB 持久化的条件， <code>serverCron</code>会调用 <code>rdbSaveBackground</code>函数，也就是 bgsave 指令会触发的函数。</p>\n<p><strong>子进程后台执行 RDB 持久化</strong></p>\n<p>执行 bgsave 指令时，Redis 会先触发 <code>bgsaveCommand</code> 进行当前状态检查，然后才会调用 <code>rdbSaveBackground</code>，其中的逻辑如下图所示。</p>\n<img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/640-20220107021948044.jpeg\" alt=\"图片\" style=\"zoom:50%;\">\n\n<p><code>rdbSaveBackground</code> 函数中最主要的工作就是调用 <code>fork</code> 命令生成子流程，然后在子流程中执行 <code>rdbSave</code>函数，也就是 save 指令最终会触发的函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rdbSaveBackground</span><span class=\"params\">(<span class=\"keyword\">char</span> *filename, rdbSavelnfo *rsi)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> childpid;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> start;</span><br><span class=\"line\">\t<span class=\"comment\">//检查后台是否正在执行aof或者rdb操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (server.aof_child_pid != <span class=\"number\">-1</span> || server.rdb_child_pid != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">\t<span class=\"comment\">//拿出 数据保存记录，保存为 上次记录</span></span><br><span class=\"line\">\tserver.dirty_before_bgsave = server.dirty;</span><br><span class=\"line\">\t<span class=\"comment\">// bgsave 时间</span></span><br><span class=\"line\">\tserver.<span class=\"keyword\">lastbgsave_t</span> ry = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tstart = ustime();</span><br><span class=\"line\">\t<span class=\"comment\">// fork子进程</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((childpid = fork()) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> retval;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*关闭子进程继承的socket监听*/</span></span><br><span class=\"line\">\t\t\tcloseListeningSockets(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//子进程title修改</span></span><br><span class=\"line\">\t\t\tredisSetProcTitleC redis-rdb-bgsave<span class=\"string\">&quot;); //执行rdb写入操作</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tretval = rdbSave(filename,rsi);</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t//执行完毕以后</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t...</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t//退出子进程</span></span><br><span class=\"line\"><span class=\"string\">\t\t\texitFromChilcK (retval == C_0K) ? 0 : 1); </span></span><br><span class=\"line\"><span class=\"string\">&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t/*父进程，进行fork时间的统计和信息记录，比如说rdb_save_time_start、rdb_child_pid和 rdb_child_type */</span></span><br><span class=\"line\"><span class=\"string\">\t...</span></span><br><span class=\"line\"><span class=\"string\">\t// rdb保存开始时间bgsave子进程 </span></span><br><span class=\"line\"><span class=\"string\">    server.rdb_save_time_start = time(NULL); </span></span><br><span class=\"line\"><span class=\"string\">    server.rdb_child_pid = \tchildpid; </span></span><br><span class=\"line\"><span class=\"string\">    server.rdb_child_type = RDB_CHILD_TYPE_DISK; </span></span><br><span class=\"line\"><span class=\"string\">    updateDictResizePolicy();</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn C_0K;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">return C_0K; /* unreached */</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么 Redis 使用子进程而不是线程来进行后台 RDB 持久化呢？主要是出于Redis性能的考虑，我们知道Redis对客户端响应请求的工作模型是单进程和单线程的，如果在主进程内启动一个线程，这样会造成对数据的竞争条件。所以为了避免使用锁降低性能，Redis选择启动新的子进程，独立拥有一份父进程的内存拷贝，以此为基础执行RDB持久化。</p>\n<p>但是需要注意的是，fork 会消耗一定时间，并且父子进程所占据的内存是相同的，当 Redis 键值较大时，fork 的时间会很长，这段时间内 Redis 是无法响应其他命令的。除此之外，Redis 占据的内存空间会翻倍。</p>\n<p><strong>生成 RDB 文件，并且持久化到硬盘</strong></p>\n<p>Redis 的 <code>rdbSave</code> 函数是真正进行 RDB 持久化的函数，它的大致流程如下：</p>\n<ul>\n<li>首先打开一个临时文件，</li>\n<li>调用 <code>rdbSaveRio</code>函数，将当前 Redis 的内存信息写入到这个临时文件中，</li>\n<li>接着调用 <code>fflush</code>、 <code>fsync</code> 和 <code>fclose</code> 接口将文件写入磁盘中，</li>\n<li>使用 <code>rename</code> 将临时文件改名为 正式的 RDB 文件，</li>\n<li>最后记录 <code>dirty</code> 和 <code>lastsave</code>等状态信息。这些状态信息在 <code>serverCron</code>时会使用到。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rdbSave</span><span class=\"params\">(<span class=\"keyword\">char</span> *filename, rdbSavelnfo *rsi)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> tmpfile[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//当前工作目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> cwd[MAXPATHLEN];</span><br><span class=\"line\">\tFILE *fp;</span><br><span class=\"line\">\trio rdb;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> error = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 生成tmpfile文件名 temp-[pid]. rdb */</span></span><br><span class=\"line\">\t<span class=\"built_in\">snprintf</span>(tmpfile,<span class=\"number\">256</span>,temp-%d.rdb<span class=\"string\">&quot;, (int) getpid()); </span></span><br><span class=\"line\"><span class=\"string\">           /*打开文件*/</span></span><br><span class=\"line\"><span class=\"string\">    fp = fopen(tmpfile/&#x27;w&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/*初始化rio结构*/</span></span><br><span class=\"line\">\trioInitWithFile(&amp;rdbffp);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rdbSaveRio(&amp;rdb,&amp;errorfRDB.SAVE.NONE,rsi) == C.ERR) &#123;</span><br><span class=\"line\">\t\terrno = error;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fflush(fp) == EOF) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fsync(fileno(fp)) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fclose(fp) == EOF) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t<span class=\"comment\">/*重新命名rdb文件，把之前临时的名称修改为正式的rdb文件名称*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rename(tmpfile,filename) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//异常处理</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//写入完成，打印日志</span></span><br><span class=\"line\">\tserverLog(LL_N0TICE,<span class=\"string\">&quot;DB saved on disk&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//清理数据保存记录</span></span><br><span class=\"line\">\tserver.dirty = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//最后一次完成SAVE命令的时间</span></span><br><span class=\"line\">\tserver.lastsave = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//最后一次bgsave的状态置位 成功</span></span><br><span class=\"line\">\tserver.lastbgsave_status = C_0K;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> C_OK;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要简单说一下 <code>fflush</code>和 <code>fsync</code>的区别。它们俩都是用于刷缓存，但是所属的层次不同。<code>fflush</code>函数用于 <code>FILE*</code> 指针上，将缓存数据从应用层缓存刷新到内核中，而 <code>fsync</code>函数则更加底层，作用于文件描述符，用于将内核缓存刷新到物理设备上。</p>\n<p>关于 Linux IO 的具体原理可以参考<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NjE5NDQyOA==&mid=2247483824&idx=1&sn=48d3fd8374c035361a9df4e67b6528df&scene=21#wechat_redirect\">《聊聊Linux IO》</a></p>\n<p><strong>内存数据到 RDB 文件</strong></p>\n<p><code>rdbSaveRio</code> 会将 Redis 内存中的数据以相对紧凑的格式写入到文件中，其文件格式的示意图如下所示。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/640-20220107024145695-1494507.jpeg\" alt=\"图片\"></p>\n<p><code>rdbSaveRio</code>函数的写入大致流程如下：</p>\n<ul>\n<li>先写入 REDIS 魔法值，然后是 RDB 文件的版本( rdb_version )，额外辅助信息 ( aux )。辅助信息中包含了 Redis 的版本，内存占用和复制库( repl-id )和偏移量( repl-offset )等。</li>\n<li>然后 <code>rdbSaveRio</code> 会遍历当前 Redis 的所有数据库，将数据库的信息依次写入。先写入 <code>RDB_OPCODE_SELECTDB</code>识别码和数据库编号，接着写入 <code>RDB_OPCODE_RESIZEDB</code>识别码和数据库键值数量和待失效键值数量，最后会遍历所有的键值，依次写入。</li>\n<li>在写入键值时，当该键值有失效时间时，会先写入 <code>RDB_OPCODE_EXPIRETIME_MS</code>识别码和失效时间，然后写入键值类型的识别码，最后再写入键和值。</li>\n<li>写完数据库信息后，还会把 Lua 相关的信息写入，最后再写入 <code>RDB_OPCODE_EOF</code>结束符识别码和校验值。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rdbSaveRio</span><span class=\"params\">(rio *rdb, <span class=\"keyword\">int</span> terror, <span class=\"keyword\">int</span> flags, rdbSavelnfo *rsi)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">snprintf</span> (magic, <span class=\"keyword\">sizeof</span> (magic)/,,REDIS%<span class=\"number\">04</span>d,,/RDB_VERSION);</span><br><span class=\"line\">\t<span class=\"comment\">/* 1写入magic字符BREDIS，和RDB版本*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rdbWriteRaw( rdb^magic^) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t<span class=\"comment\">/* 2写入辅助信息 REDIS版本，服务器操作系统位数，当前时间，复制信息比如repl-stream-db, rep -id 和 repl-off set 等等数据*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rdbSaveInfoAuxFields(rdb,flags,rsi) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t<span class=\"comment\">/* 3遍历每一个数据库，逐个数据库数据保存*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*获取数据库指针地址和数据库字典*/</span></span><br><span class=\"line\">\t\tredisDb *db = server.db+j;</span><br><span class=\"line\">\t\tdiet *d = db-&gt;dict;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 3.1写入数据库部分的开始标识*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_SELECTDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 3.2写入当前数据库号*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rdbSaveLen(rdb,j) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> db_size/ expires_size;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*获取数据库字典大小和过期键字典大小，此处代码逻辑有简化*/</span></span><br><span class=\"line\">\t\tdb_size = dictSize(db-&gt;dict);</span><br><span class=\"line\">\t\texpires_size = dictSize(db-&gt;expires);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 3.3写入当前待写入数据的类型，此处为RDB_OPCODE_RESIZEDB,表示数据库大小*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_RESIZEDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 3.4写入获取数据库字典大小和过期键字典大小*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rdbSaveLen(rdb,db_size) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rdbSaveLen(rdb,expires_size) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 4遍历当前数据库的键值对*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((de = dictNext(di)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\tsds keystr = dictGetKey(de);</span><br><span class=\"line\">\t\t\trobj key, *o = dictGetVal(de);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> expire;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*初始化key,因为操作的是key字符串对象，而不是直接操作键的字符串内容*/</span></span><br><span class=\"line\">\t\t\tinitStaticStringObject(key,keystr);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*获取键的过期数据*/</span></span><br><span class=\"line\">\t\t\texpire = getExpire(db,&amp;key);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* 4,1保存键值对数据*/</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rdbSaveKeyValuePair(rdb^&amp;key,o,expire) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* 5保存Lua脚本*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rsi &amp;&amp; dictSize(server.lua_scripts)) &#123;</span><br><span class=\"line\">\t\tdi = dictGetIterator(server.lua_scripts);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((de = dictNext(di)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\trobj *body = dictGetVal(de);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rdbSaveAuxField(rdb/<span class=\"string\">&#x27;lua&quot;『3-body-Aptr,sdslen(body-&gt;ptr)) == -1) goto werr;</span></span><br><span class=\"line\"><span class=\"string\">    &#125; </span></span><br><span class=\"line\"><span class=\"string\">    dictReleaselterator(di); </span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t/* 6写入结束符*/ </span></span><br><span class=\"line\"><span class=\"string\">  \tif (rdbSaveType(rdb,RDB_0PC0DE_E0F) == -1) goto werr;</span></span><br><span class=\"line\"><span class=\"string\">\t\t/* 7写入CRC64校验和*/ </span></span><br><span class=\"line\"><span class=\"string\">\t\tcksum = rdb-&gt;cksum; </span></span><br><span class=\"line\"><span class=\"string\">\t\tmemrev64ifbe(&amp;cksum); </span></span><br><span class=\"line\"><span class=\"string\">\t\tif (rioWrite( rdb^cksum,S) == 0) goto werr;</span></span><br><span class=\"line\"><span class=\"string\"> \t\treturn C_0K;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>rdbSaveRio</code>在写键值时，会调用 <code>rdbSaveKeyValuePair</code> 函数。该函数会依次写入键值的过期时间，键的类型，键和值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rdbSaveKeyValuePair</span><span class=\"params\">(rio *rdbf robj *key, robj *valf <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> expiretime)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*如果有过期信息*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (expiretime != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*保存过期信息标识*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rdbSaveType(rdbfRDB_OPCODE_EXPIRETIME_MS) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*保存过期具体数据内容*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rdbSaveMillisecondTime(rdbfexpiretime) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* Save type, key, value */</span></span><br><span class=\"line\">\t<span class=\"comment\">/*保存键值对类型的标识*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rdbSaveObjectType(rdbfval) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/*保存键值对键的内容*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rdbSaveStringObject(rdbf key) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/*保存键值对值的内容*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rdbSaveObject(rdb,val) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据键的不同类型写入不同格式，各种键值的类型和格式如下所示。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/640-20220107024950749-1494992.jpeg\" alt=\"图片\"></p>\n<p>Redis 有庞大的对象和数据结构体系，它使用六种底层数据结构构建了包含字符串对象、列表对象、哈希对象、集合对象和有序集合对象的对象系统。感兴趣的同学可以参考 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NjE5NDQyOA==&mid=2247483760&idx=1&sn=a601a4425e6316a4bba8d7936ce7c988&scene=21#wechat_redirect\">《十二张图带你了解 Redis 的数据结构和对象系统》</a>一文。</p>\n<p>不同的数据结构进行 RDB 持久化的格式都不同。我们今天只看一下集合对象是如何持久化的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">rdbSaveObject</span><span class=\"params\">(rio *rdbf robj *o)</span> </span>&#123;</span><br><span class=\"line\">\tssize-t n = <span class=\"number\">0</span>, nwritten = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (o-&gt;type == <span class=\"number\">0B</span>J_SET) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* Save a set value */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (o-&gt;encoding == OBJ,ENCODING.HT) &#123;</span><br><span class=\"line\">\t\tdiet *<span class=\"built_in\">set</span> = o-&gt;ptr;</span><br><span class=\"line\">\t\t<span class=\"comment\">//集合迭代器 </span></span><br><span class=\"line\">    dictlterator *di = dictGetIterator(<span class=\"built_in\">set</span>); </span><br><span class=\"line\">    dictEntry *de; </span><br><span class=\"line\">    <span class=\"comment\">//写入集合长度 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((n = rdbSaveLen(rdbfdictSize(<span class=\"built_in\">set</span>))) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    nwritten += n; </span><br><span class=\"line\">    <span class=\"comment\">//遍历集合元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((de = dictNext(di)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      sds ele = dictGetKey(de);</span><br><span class=\"line\">\t\t<span class=\"comment\">//以字符串的形式写入，因为是SET所以只写入Key即可</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((n = rdbSaveRawString(rdb,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)ele,sdslen(ele))) ==<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      nwritten += n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdictReleaselterator(di);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> nwritten;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试1：</strong></p>\n<p>首先修改配置文件保存快照的策略</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################ SNAPSHOTTING  ################################</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Save the DB on disk:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   save &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># save 900 1</span></span><br><span class=\"line\"><span class=\"comment\"># save 300 10</span></span><br><span class=\"line\"><span class=\"comment\"># save 60 10000</span></span><br><span class=\"line\">save 60 5  <span class=\"comment\"># 只要 60s 内修改了 5 次 key 就会触发 rdb 操作。</span></span><br></pre></td></tr></table></figure>\n\n<p>保存配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; save</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>删除原始的 dump.rdb 文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">dump.rdb         jemalloc.sh  kconfig           luajit        mcrypt    redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">jemalloc-config  jeprof       libmcrypt-config  luajit-2.0.4  mdecrypt  redis-check-aof  redis-cli        redis-server</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># rm -rf dump.rdb </span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">jemalloc-config  jeprof   libmcrypt-config  luajit-2.0.4  mdecrypt         redis-check-aof  redis-cli       redis-server</span><br><span class=\"line\">jemalloc.sh      kconfig  luajit            mcrypt        redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>dump.rdb 文件再次出现。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">dump.rdb         jemalloc.sh  kconfig           luajit        mcrypt    redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">jemalloc-config  jeprof       libmcrypt-config  luajit-2.0.4  mdecrypt  redis-check-aof  redis-cli        redis-server</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>恢复数据：</p>\n<p>关闭 Redis 服务和客户端，再次进入时数据被自动恢复：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; shutdown\t\t<span class=\"comment\"># 关闭 Redis 服务</span></span><br><span class=\"line\">not connected&gt; <span class=\"built_in\">exit</span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ps -ef|grep redis\t\t# redis 已经关闭了</span></span><br><span class=\"line\">root     25989 23576  0 14:27 pts/1    00:00:00 grep --color=auto redis</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-server kconfig/redis.conf \t\t# 再次开启服务</span></span><br><span class=\"line\">25994:C 02 May 2020 14:28:01.003 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">25994:C 02 May 2020 14:28:01.003 <span class=\"comment\"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=25994, just started</span></span><br><span class=\"line\">25994:C 02 May 2020 14:28:01.003 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379\t\t# 客户端连接</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k2\t\t\t\t\t\t<span class=\"comment\"># 可以直接获取数据，说明k2 被持久化了。</span></span><br><span class=\"line\"><span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p><strong>测试2：</strong></p>\n<p>删除 dump.rdb 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@itzhouc bin]<span class=\"comment\"># rm -rf dump.rdb </span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">jemalloc-config  jeprof   libmcrypt-config  luajit-2.0.4  mdecrypt         redis-check-aof  redis-cli       redis-server</span><br><span class=\"line\">jemalloc.sh      kconfig  luajit </span><br></pre></td></tr></table></figure>\n\n<p>在客户端清除所有数据：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; flushall</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>再次检验 dump.rdb 文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">dump.rdb         jemalloc.sh  kconfig           luajit        mcrypt    redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class=\"line\">jemalloc-config  jeprof       libmcrypt-config  luajit-2.0.4  mdecrypt  redis-check-aof  redis-cli        redis-server</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>dump.rdb 文件再次出现。</p>\n<blockquote>\n<p>触发机制</p>\n</blockquote>\n<p>1、save 的规则满足的情况下，会自动触发 rdb 规则</p>\n<p>2、执行 flushall 命令，也会触发 rdb 规则</p>\n<p>3、退出 redis 也会产生 rdb 文件</p>\n<p>备份就自动生成一个 dump.rdb 文件。</p>\n<blockquote>\n<p>如何恢复 rdb 文件</p>\n</blockquote>\n<p>1、只需要将 rdb 文件放在 Redis 启动目录就可以，Redis 启动的时候会自动检查 dump.rdb ，恢复其中的数据；</p>\n<p>2、查看存放 rdb 文件的位置，在客户端中使用如下命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; config get dir</span><br><span class=\"line\">1) <span class=\"string\">&quot;dir&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;/usr/local/bin&quot;</span>  <span class=\"comment\"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>RDB 的优缺点</p>\n</blockquote>\n<p><strong>优点：</strong></p>\n<p>1、适合大规模的数据恢复</p>\n<p>2、对数据的完整性要求不高</p>\n<p><strong>缺点：</strong></p>\n<p>1、需要一定的时间间隔进行操作，如果 Redis 意外宕机，最后一次修改的数据就没有了</p>\n<p>2、fork 进程的时候，会占用一定的空间。</p>\n<h2 id=\"AOF-（Append-Only-File）\"><a href=\"#AOF-（Append-Only-File）\" class=\"headerlink\" title=\"AOF （Append Only File）\"></a>AOF （Append Only File）</h2><p>AOF( append only file )持久化以独立日志的方式记录每次写命令，并在 Redis 重启时在重新执行 AOF 文件中的命令以达到恢复数据的目的。AOF 的主要作用是解决数据持久化的实时性。</p>\n<h3 id=\"AOF-持久化的实现\"><a href=\"#AOF-持久化的实现\" class=\"headerlink\" title=\"AOF 持久化的实现\"></a>AOF 持久化的实现</h3><p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/16c4345eae4aa6cd~tplv-t2oaga2asx-watermark-1495269.image\" alt=\"示意图\"></p>\n<p>如上图所示，AOF 持久化功能的实现可以分为命令追加( append )、文件写入( write )、文件同步( sync )、文件重写(rewrite)和重启加载(load)。其流程如下：</p>\n<ul>\n<li>所有的写命令会追加到 AOF 缓冲中。</li>\n<li>AOF 缓冲区根据对应的策略向硬盘进行同步操作。</li>\n<li>随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。</li>\n<li>当 Redis 重启时，可以加载 AOF 文件进行数据恢复。</li>\n</ul>\n<p><strong>命令追加</strong></p>\n<p>当 AOF 持久化功能处于打开状态时，Redis 在执行完一个写命令之后，会以协议格式(也就是RESP，即 Redis 客户端和服务器交互的通信协议 )将被执行的写命令追加到 Redis 服务端维护的 AOF 缓冲区末尾。</p>\n<p>比如说 SET mykey myvalue 这条命令就以如下格式记录到 AOF 缓冲中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;*3\\r\\n<span class=\"variable\">$3</span>\\r\\nSET\\r\\n<span class=\"variable\">$5</span>\\r\\nmykey\\r\\n<span class=\"variable\">$7</span>\\r\\nmyvalue\\r\\n&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Redis 协议格式本文不再赘述，AOF之所以直接采用文本协议格式，是因为所有写入命令都要进行追加操作，直接采用协议格式，避免了二次处理开销。</p>\n<p><strong>文件写入和同步</strong></p>\n<p>Redis 每次结束一个事件循环之前，它都会调用 <code>flushAppendOnlyFile</code>函数，判断是否需要将 AOF 缓存区中的内容写入和同步到 AOF 文件中。</p>\n<p><code>flushAppendOnlyFile</code>函数的行为由 redis.conf 配置中的 <code>appendfsync</code>选项的值来决定。该选项有三个可选值，分别是 <code>always</code>、<code>everysec</code>和 <code>no</code>：</p>\n<ul>\n<li><code>always</code>：Redis 在每个事件循环都要将 AOF 缓冲区中的所有内容写入到 AOF 文件，并且同步 AOF 文件，所以 <code>always</code>的效率是 <code>appendfsync</code>选项三个值当中最差的一个，但从安全性来说，也是最安全的。当发生故障停机时，AOF 持久化也只会丢失一个事件循环中所产生的命令数据。</li>\n<li><code>everysec</code>：Redis 在每个事件循环都要将 AOF 缓冲区中的所有内容写入到 AOF 文件中，并且每隔一秒就要在子线程中对 AOF 文件进行一次同步。从效率上看，该模式足够快。当发生故障停机时，只会丢失一秒钟的命令数据。</li>\n<li><code>no</code>：Redis 在每一个事件循环都要将 AOF 缓冲区中的所有内容写入到 AOF 文件。而 AOF 文件的同步由操作系统控制。这种模式下速度最快，但是同步的时间间隔较长，出现故障时可能会丢失较多数据。</li>\n</ul>\n<p>Linux 系统下 <code>write</code>操作会触发延迟写( delayed write )机制。Linux 在内核提供页缓存区用来提供硬盘 IO 性能。<code>write</code>操作在写入系统缓冲区之后直接返回。同步硬盘操作依赖于系统调度机制，例如：缓冲区页空间写满或者达到特定时间周期。同步文件之前，如果此时系统故障宕机，缓冲区内数据将丢失。</p>\n<p>而 <code>fsync</code>针对单个文件操作，对其进行强制硬盘同步，<code>fsync</code>将阻塞直到写入磁盘完成后返回，保证了数据持久化。</p>\n<p><code>appendfsync</code>的三个值代表着三种不同的调用 <code>fsync</code>的策略。调用<code>fsync</code>周期越频繁，读写效率就越差，但是相应的安全性越高，发生宕机时丢失的数据越少。</p>\n<p>有关 Linux 的I/O和各个系统调用的作用如下图所示。具体内容可以查看<a href=\"https://link.juejin.cn/?target=https://mp.weixin.qq.com/s/3mKxTH2pfXFpDvvJnDtgEQ\">《聊聊 Linux I/O》</a>一文。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/16c4345eafb9d063~tplv-t2oaga2asx-watermark-1495397.image\" alt=\"示意图\"></p>\n<h3 id=\"AOF-数据恢复\"><a href=\"#AOF-数据恢复\" class=\"headerlink\" title=\"AOF 数据恢复\"></a>AOF 数据恢复</h3><p>AOF 文件里边包含了重建 Redis 数据所需的所有写命令，所以 Redis 只要读入并重新执行一遍 AOF 文件里边保存的写命令，就可以还原 Redis 关闭之前的状态。</p>\n<img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/16c4345eb1887cef~tplv-t2oaga2asx-watermark.image\" alt=\"示意图\" style=\"zoom:50%;\">\n\n<p>Redis 读取 AOF 文件并且还原数据库状态的详细步骤如下：</p>\n<ul>\n<li>创建一个不带网络连接的的伪客户端( fake client)，因为 Redis 的命令只能在客户端上下文中执行，而载入 AOF 文件时所使用的的命令直接来源于 AOF 文件而不是网络连接，所以服务器使用了一个没有网络连接的伪客户端来执行 AOF 文件保存的写命令，伪客户端执行命令的效果和带网络连接的客户端执行命令的效果完全一样的。</li>\n<li>从 AOF 文件中分析并取出一条写命令。</li>\n<li>使用伪客户端执行被读出的写命令。</li>\n<li>一直执行步骤 2 和步骤3，直到 AOF 文件中的所有写命令都被处理完毕为止。</li>\n</ul>\n<p>当完成以上步骤之后，AOF 文件所保存的数据库状态就会被完整还原出来。</p>\n<h3 id=\"AOF-重写\"><a href=\"#AOF-重写\" class=\"headerlink\" title=\"AOF 重写\"></a>AOF 重写</h3><p>因为 AOF 持久化是通过保存被执行的写命令来记录 Redis 状态的，所以随着 Redis 长时间运行，AOF 文件中的内容会越来越多，文件的体积也会越来越大，如果不加以控制的话，体积过大的 AOF 文件很可能对 Redis 甚至宿主计算机造成影响。</p>\n<p>为了解决 AOF 文件体积膨胀的问题，Redis 提供了 AOF 文件重写( rewrite) 功能。通过该功能，Redis 可以创建一个新的 AOF 文件来替代现有的 AOF 文件。新旧两个 AOF 文件所保存的 Redis 状态相同，但是新的 AOF 文件不会包含任何浪费空间的荣誉命令，所以新 AOF 文件的体积通常比旧 AOF 文件的体积要小得很多。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/16c4345eb3719dac~tplv-t2oaga2asx-watermark-1495456.image\" alt=\"示意图\"></p>\n<p>如上图所示，重写前要记录名为<code>list</code>的键的状态，AOF 文件要保存五条命令，而重写后，则只需要保存一条命令。</p>\n<p>AOF 文件重写并不需要对现有的 AOF 文件进行任何读取、分析或者写入操作，而是通过读取服务器当前的数据库状态来实现的。首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是 AOF 重写功能的实现原理。</p>\n<p>在实际过程中，为了避免在执行命令时造成客户端输入缓冲区溢出，AOF 重写在处理列表、哈希表、集合和有序集合这四种可能会带有多个元素的键时，会先检查键所包含的元素数量，如果数量超过 REDIS_AOF_REWRITE_ITEMS_PER_CMD ( 一般为64 )常量，则使用多条命令记录该键的值，而不是一条命令。</p>\n<p>rewrite的触发机制主要有一下三个：</p>\n<ul>\n<li>手动调用 bgrewriteaof 命令，如果当前有正在运行的 rewrite 子进程，则本次rewrite 会推迟执行，否则，直接触发一次 rewrite。</li>\n<li>通过配置指令手动开启 AOF 功能，如果没有 RDB 子进程的情况下，会触发一次 rewrite，将当前数据库中的数据写入 rewrite 文件。</li>\n<li>在 Redis 定时器中，如果有需要退出执行的 rewrite 并且没有正在运行的 RDB 或者 rewrite 子进程时，触发一次或者 AOF 文件大小已经到达配置的 rewrite 条件也会自动触发一次。</li>\n</ul>\n<h3 id=\"AOF-后台重写\"><a href=\"#AOF-后台重写\" class=\"headerlink\" title=\"AOF 后台重写\"></a>AOF 后台重写</h3><p>AOF 重写函数会进行大量的写入操作，调用该函数的线程将被长时间阻塞，所以 Redis 在子进程中执行 AOF 重写操作。</p>\n<ul>\n<li>子进程进行 AOF 重写期间，Redis 进程可以继续处理客户端命令请求。</li>\n<li>子进程带有父进程的内存数据拷贝副本，在不适用锁的情况下，也可以保证数据的安全性。</li>\n</ul>\n<p>但是，在子进程进行 AOF 重启期间，Redis接收客户端命令，会对现有数据库状态进行修改，从而导致数据当前状态和 重写后的 AOF 文件所保存的数据库状态不一致。</p>\n<p>为此，Redis 设置了一个 AOF 重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当 Redis 执行完一个写命令之后，它会同时将这个写命令发送给 AOF 缓冲区和 AOF 重写缓冲区。</p>\n<img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/16c4345eb3b94dfb~tplv-t2oaga2asx-watermark.image\" alt=\"示意图\" style=\"zoom: 50%;\">\n\n<p>当子进程完成 AOF 重写工作之后，它会向父进程发送一个信号，父进程在接收到该信号之后，会调用一个信号处理函数，并执行以下工作：</p>\n<ul>\n<li>将 AOF 重写缓冲区中的所有内容写入到新的 AOF 文件中，保证新 AOF 文件保存的数据库状态和服务器当前状态一致。</li>\n<li>对新的 AOF 文件进行改名，原子地覆盖现有 AOF 文件，完成新旧文件的替换</li>\n<li>继续处理客户端请求命令。</li>\n</ul>\n<p>在整个 AOF 后台重写过程中，只有信号处理函数执行时会对 Redis 主进程造成阻塞，在其他时候，AOF 后台重写都不会阻塞主进程。</p>\n<p><img src=\"/2021/11/23/db-resource/redis/Redis-5-config-persistence/16c4345ecdaab9ca~tplv-t2oaga2asx-watermark-1495523.image\" alt=\"示意图\"></p>\n<p>以日志形式来记录每个操作，将 Redis 执行的过程的所有指令记录下来（读操作不记录），只追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一遍以完成数据的恢复工作。</p>\n<p>AOF 保存的是 appendonly.aof 文件。</p>\n<h3 id=\"开启-AOF-模式\"><a href=\"#开启-AOF-模式\" class=\"headerlink\" title=\"开启 AOF 模式\"></a>开启 AOF 模式</h3><p>将配置文件中默认为 no 的 appendonly 修改为 yes ，重启服务。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"comment\"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启后可以看到 AOF 文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">appendonly.aof  ipsort           jeprof            logs          mcrypt    redis-benchmark  redis-cli       tntrecht</span><br><span class=\"line\">backup.db       jemalloc-config  kconfig           luajit        mdecrypt  redis-check-aof  redis-sentinel</span><br><span class=\"line\">dump.rdb        jemalloc.sh      libmcrypt-config  luajit-2.0.4  pnscan    redis-check-rdb  redis-server</span><br></pre></td></tr></table></figure>\n\n<p>但是文件是空的。使用客户端添加一些数据再次查看：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># cat appendonly.aof </span></span><br><span class=\"line\">*2</span><br><span class=\"line\"><span class=\"variable\">$6</span></span><br><span class=\"line\">SELECT</span><br><span class=\"line\"><span class=\"variable\">$1</span></span><br><span class=\"line\">0</span><br><span class=\"line\">*3</span><br><span class=\"line\"><span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k1</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v1</span><br><span class=\"line\">*3</span><br><span class=\"line\"><span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k2</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v2</span><br><span class=\"line\">*3</span><br><span class=\"line\"><span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k3</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>自动修复 AOF文件</p>\n</blockquote>\n<p>如果手动修改AOF 文件，可能导致 Redis 服务不能启动。比如这里我手动在 AOF 文件的最后一行随便添加一些命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">k3</span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\">v3</span><br><span class=\"line\">gjjjjjjjjj</span><br></pre></td></tr></table></figure>\n\n<p>删除 dump.rdb 文件，重启服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># rm -rf dump.rdb </span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># ls</span></span><br><span class=\"line\">appendonly.aof   jemalloc.sh  libmcrypt-config  luajit-2.0.4  pnscan           redis-check-rdb  redis-server</span><br><span class=\"line\">ipsort           jeprof       logs              mcrypt        redis-benchmark  redis-cli        tntrecht</span><br><span class=\"line\">jemalloc-config  kconfig      luajit            mdecrypt      redis-check-aof  redis-sentinel</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-server kconfig/redis.conf </span></span><br><span class=\"line\">13746:C 02 May 2020 16:22:43.345 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">13746:C 02 May 2020 16:22:43.346 <span class=\"comment\"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=13746, just started</span></span><br><span class=\"line\">13746:C 02 May 2020 16:22:43.346 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">Could not connect to Redis at 127.0.0.1:6379: Connection refused\t\t<span class=\"comment\"># 连接失败</span></span><br><span class=\"line\">not connected&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果这个 AOF 文件有错位，客户端就不能链接了，需要修复 AOF 文件。Redis 提供了工具 <code>redis-check-aof --fix</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># redis-check-aof --fix appendonly.aof </span></span><br><span class=\"line\">0x              6e: Expected prefix <span class=\"string\">&#x27;*&#x27;</span>, got: <span class=\"string\">&#x27;g&#x27;</span></span><br><span class=\"line\">AOF analyzed: size=122, ok_up_to=110, diff=12</span><br><span class=\"line\">This will shrink the AOF from 122 bytes, with 12 bytes, to 110 bytes</span><br><span class=\"line\">Continue? [y/N]: y</span><br><span class=\"line\">Successfully truncated AOF</span><br><span class=\"line\">[root@itzhouc bin]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>重启服务，再次尝试链接成功。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly yes\t\t<span class=\"comment\"># 默认是 no</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span>  <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always   # 每次修改都会 sync ，消耗性能</span></span><br><span class=\"line\">appendfsync everysec   <span class=\"comment\"># 每秒执行一次 sync ，可能会丢失这 1s 的数据</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no       # 不执行 sync，这个时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、每一次修改都同步，文件的完整性更加好</p>\n<p>2、每秒同步一次，可能会丢失一秒的数据</p>\n<p>3、从不同步，效率最高的</p>\n<p><strong>缺点：</strong></p>\n<p>1、相对于数据文件来说， AOF 远远大于 RDB ，修复的速度也比 RDB 慢</p>\n<p>2、AOF 的运行效率也比 RDB 慢，所以 Redis 默认的配置就是 RDB 持久化。</p>\n<h3 id=\"3、扩展\"><a href=\"#3、扩展\" class=\"headerlink\" title=\"3、扩展\"></a>3、扩展</h3><p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>\n<p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以Redis 协议追加保存每次写的操作到文件尾部，Redis 还能对 AOF 文件记性后台重写，使得AOF 文件的体积不至于过大</p>\n<p>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</p>\n<p>4、同时开启两种持久化方式</p>\n<ul>\n<li>在这种情况下，当 Redis 重启的时候会优先加载AOF 文件来恢复原始的数据，因为在通常情况下，AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li>\n<li>RDB 的数据不实时，同步使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？作者建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 BUG，留着作为一个万一的手段。</li>\n</ul>\n<p>5、性能建议</p>\n<ul>\n<li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够了，只保留save 900 1 这条规则。</li>\n<li>如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒的数据，启动脚本较简单只 load 自己的 AOF 文件就可以了，代价是一是带来了持续的IO，而是 AOF rewrite 的最后将rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值是 64M 太小了，可以设置到 5G 以上，默认值超过原大小 100% 大小重写可以改到适当的数值。</li>\n<li>如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用也可以，能省掉一大笔 IO ，也减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时宕掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li>\n</ul>\n","categories":["redis"],"tags":["redis"]},{"title":"Redis系列(七):缓存穿透、缓存击穿和缓存雪崩","url":"/2021/11/24/db-resource/redis/Redis-7-cache-penetration-breakdown-avalanche/","content":"<h1 id=\"Redis系列-七-缓存穿透、缓存击穿和缓存雪崩\"><a href=\"#Redis系列-七-缓存穿透、缓存击穿和缓存雪崩\" class=\"headerlink\" title=\"Redis系列(七):缓存穿透、缓存击穿和缓存雪崩\"></a>Redis系列(七):缓存穿透、缓存击穿和缓存雪崩</h1><h1 id=\"缓存穿透（查不到数据导致）\"><a href=\"#缓存穿透（查不到数据导致）\" class=\"headerlink\" title=\"缓存穿透（查不到数据导致）\"></a>缓存穿透（查不到数据导致）</h1><p>缓存穿透的概念简单，用户想要查询一个数据，发现 Redis 内存数据库没有，也就是缓存没有命中。于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2021/11/24/db-resource/redis/Redis-7-cache-penetration-breakdown-avalanche/YyJzFg.png\" alt=\"img\"></p>\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><h3 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h3><p>布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p>\n<img src=\"/2021/11/24/db-resource/redis/Redis-7-cache-penetration-breakdown-avalanche/YytSHK.png\" alt=\"img\" style=\"zoom:67%;\">\n\n<h3 id=\"缓存空对象\"><a href=\"#缓存空对象\" class=\"headerlink\" title=\"缓存空对象\"></a>缓存空对象</h3><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同步会同步一个过期时间，之后再访问这个数据将会从存储中获取，保护了后端数据源。</p>\n<img src=\"/2021/11/24/db-resource/redis/Redis-7-cache-penetration-breakdown-avalanche/Yytcb6.png\" alt=\"img\" style=\"zoom:67%;\">\n\n<p>但是这种方法会存在两个问题：</p>\n<p>1、如果控制能够被缓存起来，这就意味着缓存需要更多的空间存储，因为这当中可能会有很多的空值的键；</p>\n<p>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p>\n<h1 id=\"缓存击穿（请求太多，缓存过期）\"><a href=\"#缓存击穿（请求太多，缓存过期）\" class=\"headerlink\" title=\"缓存击穿（请求太多，缓存过期）\"></a>缓存击穿（请求太多，缓存过期）</h1><p>这里需要注意和缓存穿透的区别。缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>\n<p>当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新的数据，并回写缓存，会导致数据库瞬间压力过大。</p>\n<h2 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><h3 id=\"设置热点数据永不过期\"><a href=\"#设置热点数据永不过期\" class=\"headerlink\" title=\"设置热点数据永不过期\"></a>设置热点数据永不过期</h3><p>从缓存层来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p>\n<h3 id=\"加互斥锁\"><a href=\"#加互斥锁\" class=\"headerlink\" title=\"加互斥锁\"></a>加互斥锁</h3><p>分布式锁：使用分布式锁，保证对于每个 key 同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因对分布式锁的考验很大。</p>\n<p><img src=\"/2021/11/24/db-resource/redis/Redis-7-cache-penetration-breakdown-avalanche/YyUHN8.png\" alt=\"img\"></p>\n<h1 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h1><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。</p>\n<p>产生雪崩的原因之一，比如马上就要双十二零点，，很快就会有一波抢购，这波商品时间比较集中的放在了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都会过期了。而对这批商品的访问查询，都落到数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会到达存储层，存储层的调用量会暴增，造成存储层也回掉的情况。</p>\n<p><img src=\"/2021/11/24/db-resource/redis/Redis-7-cache-penetration-breakdown-avalanche/Yy0d56.png\" alt=\"img\"></p>\n<p>其实集中时期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或者断网。因为自然形成 的缓存雪崩，一定是某个时间段中创建缓存，这个时候也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对于数据库服务器的压力是不可预的，很有可能瞬间就把数据库压垮。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"Redis-高可用\"><a href=\"#Redis-高可用\" class=\"headerlink\" title=\"Redis 高可用\"></a>Redis 高可用</h3><p>这个思想的含义是，既然 redis 有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。</p>\n<h3 id=\"限流降级\"><a href=\"#限流降级\" class=\"headerlink\" title=\"限流降级\"></a>限流降级</h3><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p>\n<h3 id=\"数据预热\"><a href=\"#数据预热\" class=\"headerlink\" title=\"数据预热\"></a>数据预热</h3><p>数据预热的含义是在正式部署之前，把可能的数据线预先访问一遍，这样部分可能大量访问的数据就会加载到缓存。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>\n","categories":["redis"],"tags":["redis"]},{"title":"Redis系列(一):redis入门","url":"/2021/07/22/db-resource/redis/redis-1/","content":"<h1><span id=\"redis系列一redis入门\">Redis系列(一)：redis入门</span></h1><h1><span id=\"什么是-nosql\">什么是 NoSQL</span></h1><p><strong>NoSQL = Not Only SQL（不仅仅是 SQL）</strong></p>\n<p>关系型数据库：表格，行，列</p>\n<p>泛指非关系型数据库的，随着 web 2.0 互联网的诞生！传统的关系型数据库很难对付 web 2.0 时代！尤其是超大规模的高并发的社区！暴露出来很多难以克服的问题 NoSQL 在当今大数据环境下发展的十分迅速，Redis 是发展最快，而且是我们当下必须要掌握的一个技术！</p>\n<p>很多的数据类型比如用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！不需要多余的操作就可以横向扩展的。Map&lt;String, Object&gt; 使用键值对来控制。</p>\n<span id=\"more\"></span>\n\n<p>NoSQL 的特点：</p>\n<p>1、<strong>方便扩展</strong>（数据之间没有关系，很好扩展）</p>\n<p>2、<strong>大数据量高性能（Redis一秒写8万次，读取 11 万次</strong>，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高）</p>\n<p>3、<strong>数据类型是多样型的</strong>（不需要事先设计数据库，随取随用）</p>\n<p>传统 RDBMS 和 NoSQL的比较：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">传统的 RDBS</span><br><span class=\"line\">- 结构化组织</span><br><span class=\"line\">- SQL</span><br><span class=\"line\">- 数据和关系都存在单独的表中</span><br><span class=\"line\">- 操作语言，数据库定义语言</span><br><span class=\"line\">- 严格的一致性</span><br><span class=\"line\">- 基础的事务</span><br><span class=\"line\">- ...</span><br><span class=\"line\">NoSQL</span><br><span class=\"line\">- 不仅仅是数据</span><br><span class=\"line\">- 没有固定的查询语言</span><br><span class=\"line\">- 键值对存储，列存储，文档存储，图形数据库</span><br><span class=\"line\">- 最终一致性</span><br><span class=\"line\">- CAP 定理和 BASE （异地多活）</span><br><span class=\"line\">- 高性能，高可用，高可扩</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"nosql-的四大分类\">NoSQL 的四大分类</span></h1><p><strong>KV 键值对：Redis</strong></p>\n<p><strong>文档型数据库（bson 和 json 一样）：</strong></p>\n<ul>\n<li>MongoDB：<ul>\n<li>MongoDB 是一个基于分布式文件储存的数据库，使用 C++编写，主要用来处理大量的文档。</li>\n<li>MongoDB 是一个介于关系型数据库和非关系型数据中间的产品！MongoDB 是非关系型数据中功能最丰富，最像关系型数据库的。</li>\n</ul>\n</li>\n<li>ConthDB</li>\n</ul>\n<p><strong>列存储数据库：</strong></p>\n<ul>\n<li><strong>HBase</strong></li>\n<li><strong>分布式文件系统</strong></li>\n</ul>\n<p><strong>图关系数据库：</strong></p>\n<ul>\n<li><strong>他不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐</strong></li>\n<li>Neo4j、InfoGrid</li>\n</ul>\n<h1><span id=\"redis-入门\">Redis 入门</span></h1><p>Redis （Remote Dictionary Server），即远程字典服务！</p>\n<p>是一个开源的使用 <strong>ANSI C语言编写、</strong>支持网络、可基于内存亦可持久刷的日志型、key-value 数据库，并提供多种语言的 API。免费和开源！是当下最热门的NoSQL 技术之一，也被人们称之为机构化数据库。</p>\n<p>Redis 的作用：</p>\n<p>1、内存存储、持久化（RDB 和 AOF）</p>\n<p>2、效率高，可以用于高速缓存</p>\n<p>3、发布订阅系统</p>\n<p>4、地图信息分析</p>\n<p>5、计数器、计时器（比如浏览量）</p>\n<p>Redis 的特征：</p>\n<p>1、多样化的数据类型</p>\n<p>2、持久化</p>\n<p>3、集群</p>\n<p>4、事务</p>\n<p>Redis 官网： <a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>Redis 中文网： <a href=\"http://www.redis.cn/\">http://www.redis.cn/</a></p>\n<h1><span id=\"redis-安装启动\">Redis 安装启动</span></h1><p>到官网下载压缩包，上传到服务器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make                       <span class=\"comment\"># 安装</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/bin            <span class=\"comment\"># 进入Redis的默认安装目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝配置文件：</span></span><br><span class=\"line\">cp redis.conf config/</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件为后台启动：</p>\n<p>修改配置项：</p>\n<ul>\n<li><code>daemonize</code>为<code>yes</code>。</li>\n<li>注释掉 <code>bind 127.0.0.1</code></li>\n<li>修改<code>protected-mode no</code></li>\n</ul>\n<p>启动 Redis</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server config/redis.conf <span class=\"comment\">#通过特定的配置文件启动Redis</span></span><br></pre></td></tr></table></figure>\n\n<p>使用客户端连接和测试：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379 </span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> name <span class=\"built_in\">test</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\"><span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p>退出Redis：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; shutdown        <span class=\"comment\"># 关闭Redis </span></span><br><span class=\"line\">not connected&gt; <span class=\"built_in\">exit</span>                <span class=\"comment\"># 退出</span></span><br><span class=\"line\">ps -ef|grep redis</span><br><span class=\"line\">root      8330  3437  0 08:49 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"redis-性能测试\">Redis 性能测试</span></h1><p><strong>redis-benchmark 是官网自带的压力测试工具。</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选项</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>-h</td>\n<td>指定服务器主机名</td>\n<td>127.0.0.1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>-p</td>\n<td>指定服务器端口</td>\n<td>6379</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-s</td>\n<td>指定服务器 socket</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>-c</td>\n<td>指定并发连接数</td>\n<td>50</td>\n</tr>\n<tr>\n<td>5</td>\n<td>-n</td>\n<td>指定请求数</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>6</td>\n<td>-d</td>\n<td>以字节的形式指定 SET/GET 值的数据大小</td>\n<td>2</td>\n</tr>\n<tr>\n<td>7</td>\n<td>-k</td>\n<td>1=keep alive 0=reconnect</td>\n<td>1</td>\n</tr>\n<tr>\n<td>8</td>\n<td>-r</td>\n<td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td>\n<td></td>\n</tr>\n<tr>\n<td>9</td>\n<td>-P</td>\n<td>通过管道传输 请求</td>\n<td>1</td>\n</tr>\n<tr>\n<td>10</td>\n<td>-q</td>\n<td>强制退出 redis。仅显示 query/sec 值</td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>–csv</td>\n<td>以 CSV 格式输出</td>\n<td></td>\n</tr>\n<tr>\n<td>12</td>\n<td>-l</td>\n<td>生成循环，永久执行测试</td>\n<td></td>\n</tr>\n<tr>\n<td>13</td>\n<td>-t</td>\n<td>仅运行以逗号分隔的测试命令列表。</td>\n<td></td>\n</tr>\n<tr>\n<td>14</td>\n<td>-I</td>\n<td>Idle 模式。仅打开 N 个 idle 连接并等待。</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>使用方式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试 100 个并发连接，100000 个请求</span></span><br><span class=\"line\">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<p>分析举例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">====== SET ======</span><br><span class=\"line\">  100000 requests completed <span class=\"keyword\">in</span> 1.97 seconds          <span class=\"comment\"># 对 10万个请求进行写入测试</span></span><br><span class=\"line\">  100 parallel clients                            <span class=\"comment\"># 100 个并发客户端 </span></span><br><span class=\"line\">  3 bytes payload                                <span class=\"comment\"># 每次写入 3 个字节</span></span><br><span class=\"line\">  keep alive: 1                                    <span class=\"comment\"># 只有一台服务器来处理这些请求，即单机性能</span></span><br><span class=\"line\"></span><br><span class=\"line\">19.56% &lt;= 1 milliseconds</span><br><span class=\"line\">98.70% &lt;= 2 milliseconds</span><br><span class=\"line\">99.82% &lt;= 3 milliseconds</span><br><span class=\"line\">99.85% &lt;= 9 milliseconds</span><br><span class=\"line\">99.94% &lt;= 10 milliseconds</span><br><span class=\"line\">99.95% &lt;= 126 milliseconds</span><br><span class=\"line\">99.96% &lt;= 127 milliseconds</span><br><span class=\"line\">100.00% &lt;= 127 milliseconds                    <span class=\"comment\"># 所有请求在127 毫秒处理完成</span></span><br><span class=\"line\">50761.42 requests per second                <span class=\"comment\"># 每秒处理 50761.42 个请求</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"基础知识\">基础知识</span></h1><p><strong>Redis 默认有 16 个数据库，这个可以在配置文件redis.conf 中查看</strong>。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set the number of databases. The default database is DB 0, you can select</span></span><br><span class=\"line\"><span class=\"comment\"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span><br><span class=\"line\"><span class=\"comment\"># dbid is a number between 0 and &#x27;databases&#x27;-1</span></span><br><span class=\"line\"><span class=\"attr\">databases</span> <span class=\"string\">16</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>默认使用的是第 0 个。</strong></p>\n<p>使用 <code>select</code> 命令切换数据库，使用 <code>dbsize</code>查看数据库大小：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; select 3        <span class=\"comment\"># 切换数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; dbsize        <span class=\"comment\"># 查看数据库大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; <span class=\"built_in\">set</span> name jack</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; dbsize</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; </span><br></pre></td></tr></table></figure>\n\n<p>查看数据库中所有的<code>key</code>：</p>\n<p><strong>注意：生产环境禁止使用该命令，在配置中禁用该命令</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379[3]&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[3]&gt; </span><br></pre></td></tr></table></figure>\n\n<p>清除当前数据库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379[3]&gt; flushdb</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br></pre></td></tr></table></figure>\n\n<p>清除所有数据库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; flushall</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"redis禁用部分危险命令\">Redis禁用部分危险命令</span></h1><p>禁用keys/flushdb等</p>\n<p>在redis.conf文件【SECURITY】区域配置：</p>\n<p>1、禁用命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">rename-command KEYS <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">rename-command FLUSHALL <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">rename-command FLUSHDB <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">rename-command CONFIG <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、重命名命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">rename-command KEYS <span class=\"string\">&quot;xxxxxxxxxxxx&quot;</span></span><br><span class=\"line\">rename-command FLUSHALL <span class=\"string\">&quot;yyyyyyyyyyyyy&quot;</span></span><br><span class=\"line\">rename-command FLUSHDB <span class=\"string\">&quot;qqqqqqqqqqqqq&quot;</span></span><br><span class=\"line\">rename-command CONFIG <span class=\"string\">&quot;aaaaaaaaaaaaaa&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"redis-是单线程的什么这么快\">Redis 是单线程的什么这么快</span></h1><p>针对reids6之前的版本</p>\n<p><strong>Redis 是很快的，官方表示，Redis 是基于内存操作，CPU 不是 Redis 的性能瓶颈，Redis 的性能瓶颈是机器的内存和网络带宽。既然可以单线程来实现，就使用单线程。</strong></p>\n<p>Redis 是 C 语言写的，<strong>官方提供的数据为 100000+ 的 QPS</strong> ，完全不比同样是使用 key-value 的Memecache 差。</p>\n<p><strong>Redis 为什么单线程还这么快呢？</strong></p>\n<p>1、误区1：高性能的服务器一定是多线性的？</p>\n<p>2、误区2：多线程一定比单线程的效率高？</p>\n<p><strong>要了解在执行效率上 CPU &gt; 内存 &gt; 硬盘</strong></p>\n<p><strong>核心：</strong>Redis 是将所有的数据全部放在内存中的，所有说使用单线程去操作执行效率就是最高的，多线程在执行过程中需要进行 CPU 的上下文切换，这个是耗时操作。对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个 CPU 上的，在内存情况下，这个就是最佳方案。</p>\n<p><strong>redis 采用网络IO多路复用技术来保证在多连接的时候， 系统的高吞吐量</strong>。</p>\n<p>参考文章：<a href=\"https://zhuanlan.zhihu.com/p/52600663\">阿里P8架构师谈：Redis为什么是单线程、及高并发快的3大原因详解</a></p>\n","categories":["redis"],"tags":["redis"]},{"title":"阿里云Redis开发规范","url":"/2021/07/23/db-resource/redis/%E9%98%BF%E9%87%8C%E4%BA%91Redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/","content":"<p><strong>简介：</strong> 本文介绍了在使用阿里云Redis的开发规范，从键值设计、命令使用、客户端使用、相关工具等方面进行说明，通过本文的介绍可以减少使用Redis过程带来的问题。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"一、键值设计\"><a href=\"#一、键值设计\" class=\"headerlink\" title=\"一、键值设计\"></a>一、键值设计</h3><h4 id=\"1-key名设计\"><a href=\"#1-key名设计\" class=\"headerlink\" title=\"1. key名设计\"></a>1. key名设计</h4><ul>\n<li>(1)【建议】: 可读性和可管理性</li>\n</ul>\n<p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">ugc:video:1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(2)【建议】：简洁性</li>\n</ul>\n<p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">user:&#123;uid&#125;:friends:messages:&#123;mid&#125;简化为u:&#123;uid&#125;:fr:m:&#123;mid&#125;。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>(3)【强制】：不要包含特殊字符</li>\n</ul>\n<p>反例：包含空格、换行、单双引号以及其他转义字符</p>\n<p><a href=\"https://mp.weixin.qq.com/s?spm=a2c6h.12873639.0.0.753b1feenIwQ54&__biz=Mzg2NTEyNzE0OA==&mid=2247483663&idx=1&sn=7c4ad441eaec6f0ff38d1c6a097b1fa4&chksm=ce5f9e8cf928179a2c74227da95bec575bdebc682e8630b5b1bb2071c0a1b4be6f98d67c37ca&scene=21#wechat_redirect\">详细解析</a></p>\n<h4 id=\"2-value设计\"><a href=\"#2-value设计\" class=\"headerlink\" title=\"2. value设计\"></a>2. value设计</h4><ul>\n<li>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)</li>\n</ul>\n<p>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</p>\n<p>反例：一个包含200万个元素的list。</p>\n<p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，<a href=\"https://developer.aliyun.com/article/531067#cc1\">查找方法</a>和<a href=\"https://developer.aliyun.com/article/531067#cc2\">删除方法</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NTEyNzE0OA==&mid=2247483677&idx=1&sn=5c320b46f0e06ce9369a29909d62b401&chksm=ce5f9e9ef928178834021b6f9b939550ac400abae5c31e1933bafca2f16b23d028cc51813aec&scene=21#wechat_redirect\">详细解析</a></p>\n<ul>\n<li>(2)【推荐】：选择适合的数据类型。</li>\n</ul>\n<p>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)</p>\n<p>反例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> user:1:name tom</span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1:age 19</span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1:favor football</span><br></pre></td></tr></table></figure>\n\n<p>正例:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">hmset user:1 name tom age 19 favor football</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-【推荐】：控制key的生命周期，redis不是垃圾桶。\"><a href=\"#3-【推荐】：控制key的生命周期，redis不是垃圾桶。\" class=\"headerlink\" title=\"3.【推荐】：控制key的生命周期，redis不是垃圾桶。\"></a>3.【推荐】：控制key的生命周期，redis不是垃圾桶。</h4><p>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</p>\n<h3 id=\"二、命令使用\"><a href=\"#二、命令使用\" class=\"headerlink\" title=\"二、命令使用\"></a>二、命令使用</h3><h4 id=\"1-【推荐】-O-N-命令关注N的数量\"><a href=\"#1-【推荐】-O-N-命令关注N的数量\" class=\"headerlink\" title=\"1.【推荐】 O(N)命令关注N的数量\"></a>1.【推荐】 O(N)命令关注N的数量</h4><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p>\n<h4 id=\"2-【推荐】：禁用命令\"><a href=\"#2-【推荐】：禁用命令\" class=\"headerlink\" title=\"2.【推荐】：禁用命令\"></a>2.【推荐】：禁用命令</h4><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p>\n<h4 id=\"3-【推荐】合理使用select\"><a href=\"#3-【推荐】合理使用select\" class=\"headerlink\" title=\"3.【推荐】合理使用select\"></a>3.【推荐】合理使用select</h4><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p>\n<h4 id=\"4-【推荐】使用批量操作提高效率\"><a href=\"#4-【推荐】使用批量操作提高效率\" class=\"headerlink\" title=\"4.【推荐】使用批量操作提高效率\"></a>4.【推荐】使用批量操作提高效率</h4><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">原生命令：例如mget、mset。</span><br><span class=\"line\">非原生命令：可以使用pipeline提高效率。</span><br></pre></td></tr></table></figure>\n\n<p>但要注意控制一次批量操作的<strong>元素个数</strong>(例如500以内，实际也和元素字节数有关)。</p>\n<p>注意两者不同：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 原生是原子操作，pipeline是非原子操作。</span><br><span class=\"line\">2. pipeline可以打包不同的命令，原生做不到</span><br><span class=\"line\">3. pipeline需要客户端和服务端同时支持。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-【建议】Redis事务功能较弱，不建议过多使用\"><a href=\"#5-【建议】Redis事务功能较弱，不建议过多使用\" class=\"headerlink\" title=\"5.【建议】Redis事务功能较弱，不建议过多使用\"></a>5.【建议】Redis事务功能较弱，不建议过多使用</h4><p>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)</p>\n<h4 id=\"6-【建议】Redis集群版本在使用Lua上有特殊要求：\"><a href=\"#6-【建议】Redis集群版本在使用Lua上有特殊要求：\" class=\"headerlink\" title=\"6.【建议】Redis集群版本在使用Lua上有特殊要求：\"></a>6.【建议】Redis集群版本在使用Lua上有特殊要求：</h4><ul>\n<li>1.所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，”-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array”</li>\n<li>2.所有key，必须在1个slot上，否则直接返回error, “-ERR eval/evalsha command keys must in same slot”</li>\n</ul>\n<h4 id=\"7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\"><a href=\"#7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\" class=\"headerlink\" title=\"7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\"></a>7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。</h4><h3 id=\"三、客户端使用\"><a href=\"#三、客户端使用\" class=\"headerlink\" title=\"三、客户端使用\"></a>三、客户端使用</h3><h4 id=\"1-【推荐】\"><a href=\"#1-【推荐】\" class=\"headerlink\" title=\"1.【推荐】\"></a>1.【推荐】</h4><p>避免多个应用使用一个Redis实例</p>\n<p>正例：不相干的业务拆分，公共数据做服务化。</p>\n<h4 id=\"2-【推荐】\"><a href=\"#2-【推荐】\" class=\"headerlink\" title=\"2.【推荐】\"></a>2.【推荐】</h4><p>使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">执行命令如下：</span><br><span class=\"line\">Jedis jedis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    jedis = jedisPool.getResource();</span><br><span class=\"line\">    <span class=\"comment\">//具体的命令</span></span><br><span class=\"line\">    jedis.executeCommand()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    logger.error(<span class=\"string\">&quot;op key &#123;&#125; error: &quot;</span> + e.getMessage(), key, e);</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jedis != <span class=\"keyword\">null</span>) </span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是JedisPool优化方法的文章:</p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/articles/236384?spm=a2c6h.12873639.0.0.753b1feenIwQ54\">Jedis常见异常汇总</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/236383?spm=a2c6h.12873639.0.0.753b1feenIwQ54\">JedisPool资源池优化</a></li>\n</ul>\n<h4 id=\"3-【建议】\"><a href=\"#3-【建议】\" class=\"headerlink\" title=\"3.【建议】\"></a>3.【建议】</h4><p>高并发下建议客户端添加熔断功能(例如netflix hystrix)</p>\n<h4 id=\"4-【推荐】\"><a href=\"#4-【推荐】\" class=\"headerlink\" title=\"4.【推荐】\"></a>4.【推荐】</h4><p>设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p>\n<h4 id=\"5-【建议】\"><a href=\"#5-【建议】\" class=\"headerlink\" title=\"5.【建议】\"></a>5.【建议】</h4><p>根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</p>\n<p>默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。</p>\n<h5 id=\"其他策略如下：\"><a href=\"#其他策略如下：\" class=\"headerlink\" title=\"其他策略如下：\"></a>其他策略如下：</h5><ul>\n<li>allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。</li>\n<li>allkeys-random：随机删除所有键，直到腾出足够空间为止。</li>\n<li>volatile-random:随机删除过期键，直到腾出足够空间为止。</li>\n<li>volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。</li>\n<li>noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息”(error) OOM command not allowed when used memory”，此时Redis只响应读操作。</li>\n</ul>\n<h3 id=\"四、相关工具\"><a href=\"#四、相关工具\" class=\"headerlink\" title=\"四、相关工具\"></a>四、相关工具</h3><h4 id=\"1-【推荐】：数据同步\"><a href=\"#1-【推荐】：数据同步\" class=\"headerlink\" title=\"1.【推荐】：数据同步\"></a>1.【推荐】：数据同步</h4><p>redis间数据同步可以使用：redis-port</p>\n<h4 id=\"2-【推荐】：big-key搜索\"><a href=\"#2-【推荐】：big-key搜索\" class=\"headerlink\" title=\"2.【推荐】：big key搜索\"></a>2.【推荐】：big key搜索</h4><p><a href=\"https://yq.aliyun.com/articles/117042\">redis大key搜索工具</a></p>\n<h4 id=\"3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用\"><a href=\"#3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用\" class=\"headerlink\" title=\"3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)\"></a>3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)</h4><p><a href=\"https://github.com/facebookarchive/redis-faina\">facebook的redis-faina</a></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">阿里云Redis已经在内核层面解决热点key问题，欢迎使用。</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"五-附录：删除bigkey\"><a href=\"#五-附录：删除bigkey\" class=\"headerlink\" title=\"五 附录：删除bigkey\"></a>五 附录：删除bigkey</h2><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 下面操作可以使用pipeline加速。</span><br><span class=\"line\">2. redis 4.0已经支持key的异步删除，欢迎使用。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-Hash删除-hscan-hdel\"><a href=\"#1-Hash删除-hscan-hdel\" class=\"headerlink\" title=\"1. Hash删除: hscan + hdel\"></a>1. Hash删除: hscan + hdel</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigHash</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigHashKey)</span> </span>&#123;</span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">&quot;&quot;</span>.equals(password)) &#123;</span><br><span class=\"line\">        jedis.auth(password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>);</span><br><span class=\"line\">    String cursor = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ScanResult&lt;Entry&lt;String, String&gt;&gt; scanResult = jedis.hscan(bigHashKey, cursor, scanParams);</span><br><span class=\"line\">        List&lt;Entry&lt;String, String&gt;&gt; entryList = scanResult.getResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entryList != <span class=\"keyword\">null</span> &amp;&amp; !entryList.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Entry&lt;String, String&gt; entry : entryList) &#123;</span><br><span class=\"line\">                jedis.hdel(bigHashKey, entry.getKey());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cursor = scanResult.getStringCursor();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">&quot;0&quot;</span>.equals(cursor));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey</span></span><br><span class=\"line\">    jedis.del(bigHashKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-List删除-ltrim\"><a href=\"#2-List删除-ltrim\" class=\"headerlink\" title=\"2. List删除: ltrim\"></a>2. List删除: ltrim</h5><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigList</span><span class=\"params\">(<span class=\"keyword\">String</span> host, <span class=\"keyword\">int</span> port, <span class=\"keyword\">String</span> password, <span class=\"keyword\">String</span> bigListKey)</span> </span>&#123;</span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> <span class=\"built_in\">Jedis</span>(host, port);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != null &amp;&amp; !<span class=\"string\">&quot;&quot;</span>.<span class=\"built_in\">equals</span>(password)) &#123;</span><br><span class=\"line\">        jedis.<span class=\"built_in\">auth</span>(password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> llen = jedis.<span class=\"built_in\">llen</span>(bigListKey);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (counter &lt; llen) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//每次从左侧截掉100个</span></span><br><span class=\"line\">        jedis.<span class=\"built_in\">ltrim</span>(bigListKey, left, llen);</span><br><span class=\"line\">        counter += left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//最终删除key</span></span><br><span class=\"line\">    jedis.<span class=\"built_in\">del</span>(bigListKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-Set删除-sscan-srem\"><a href=\"#3-Set删除-sscan-srem\" class=\"headerlink\" title=\"3. Set删除: sscan + srem\"></a>3. Set删除: sscan + srem</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigSet</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigSetKey)</span> </span>&#123;</span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">&quot;&quot;</span>.equals(password)) &#123;</span><br><span class=\"line\">        jedis.auth(password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>);</span><br><span class=\"line\">    String cursor = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ScanResult&lt;String&gt; scanResult = jedis.sscan(bigSetKey, cursor, scanParams);</span><br><span class=\"line\">        List&lt;String&gt; memberList = scanResult.getResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (memberList != <span class=\"keyword\">null</span> &amp;&amp; !memberList.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String member : memberList) &#123;</span><br><span class=\"line\">                jedis.srem(bigSetKey, member);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cursor = scanResult.getStringCursor();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">&quot;0&quot;</span>.equals(cursor));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey</span></span><br><span class=\"line\">    jedis.del(bigSetKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-SortedSet删除-zscan-zrem\"><a href=\"#4-SortedSet删除-zscan-zrem\" class=\"headerlink\" title=\"4. SortedSet删除: zscan + zrem\"></a>4. SortedSet删除: zscan + zrem</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delBigZset</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, String password, String bigZsetKey)</span> </span>&#123;</span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(host, port);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">&quot;&quot;</span>.equals(password)) &#123;</span><br><span class=\"line\">        jedis.auth(password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ScanParams scanParams = <span class=\"keyword\">new</span> ScanParams().count(<span class=\"number\">100</span>);</span><br><span class=\"line\">    String cursor = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ScanResult&lt;Tuple&gt; scanResult = jedis.zscan(bigZsetKey, cursor, scanParams);</span><br><span class=\"line\">        List&lt;Tuple&gt; tupleList = scanResult.getResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tupleList != <span class=\"keyword\">null</span> &amp;&amp; !tupleList.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Tuple tuple : tupleList) &#123;</span><br><span class=\"line\">                jedis.zrem(bigZsetKey, tuple.getElement());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cursor = scanResult.getStringCursor();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"string\">&quot;0&quot;</span>.equals(cursor));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//删除bigkey</span></span><br><span class=\"line\">    jedis.del(bigZsetKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["redis"],"tags":["redis"]},{"title":"Java应用迁移到容器后会出现OOM","url":"/2021/07/17/java/container/Java%E5%BA%94%E7%94%A8%E8%BF%81%E7%A7%BB%E5%88%B0%E5%AE%B9%E5%99%A8%E5%90%8E%E4%BC%9A%E5%87%BA%E7%8E%B0OOM/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>JVM启动后默认将最大使用堆大小设置为物理内存的四分之一，譬如一台普通的x86服务器配置128G内存，那么启动在容器的内启动JVM会将自己最大允许使用的堆内存调整为32G内存，如果容器启动时设置JVM只允许使用4G大小的内存，那么当JVM使用内存超过4G后，将会导致内核杀死JVM。</p>\n<p>JAVA 10版本后，已经原生支持容器环境,最大堆调整到内存限制的四分之一，而非物理内存的四分之一。还可以支持CPU自适应。</p>\n<span id=\"more\"></span>\n\n<p>#测试及配置</p>\n<p>测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> JAVA.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> JAVA.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemEat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List l = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span> b[] = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1048576</span>];</span><br><span class=\"line\">            l.add(b);</span><br><span class=\"line\">            Runtime rt = Runtime.getRuntime();</span><br><span class=\"line\">            System.out.println( <span class=\"string\">&quot;free memory: &quot;</span> + rt.freeMemory() );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码非常简单，只是通过一个死循环不停地申请内存，如果是在JAVA 8u111版本之前，直接通过<strong>docker run -m 100m</strong>限制使用100M内存的情况下，运行一段时间后直接被内核杀死。输出如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> JAVA MemEat</span><br><span class=\"line\">. . .</span><br><span class=\"line\">free memory: 1307309488</span><br><span class=\"line\">free memory: 1306260896</span><br><span class=\"line\">free memory: 1305212304</span><br><span class=\"line\">free memory: 1304163712</span><br><span class=\"line\">free memory: 1303115120</span><br><span class=\"line\">Killed</span><br></pre></td></tr></table></figure>\n\n<p>为了避免这种情况，可以通过“ -Xmx ”设置最大堆内存后再次运行</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> JAVA -Xmx100m MemEat</span><br><span class=\"line\">. . .</span><br><span class=\"line\">free memory: 8382264</span><br><span class=\"line\">free memory: 7333672</span><br><span class=\"line\">free memory: 6285080</span><br><span class=\"line\">free memory: 5236488</span><br><span class=\"line\">Exception in thread &quot;main&quot; JAVA.lang.OutOfMemoryError: JAVA heap space MemEat.main(MemEat.JAVA:8)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到JVM由于堆内存不足，自己退出了。这种在JVM添加参数的方式有个弊端：如果修改了容器的内存限制，还需要调整启动参数。为此在JAVA 8u144版本之后添加了动态调整的功能，能够根据用户设定的内存限制动态调整，启动参数如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> JAVA -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap MemEat</span><br></pre></td></tr></table></figure>\n\n<p>当修改了内存参数后JVM便可以随之调整。JAVA对于容器的支持不断增强到最新的JAVA 10版本后，已经原生支持容器环境，无需添加任何参数。不仅如此，新版JAVA 10还支持CPU在容器内动态调整。如下所示JVM调整内存最大堆：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker  run -it -m 1024M --entrypoint bash openjdk:11-jdk   </span></span><br><span class=\"line\"><span class=\"comment\"># java -XX:+PrintFlagsFinal -version | grep MaxHeapSize</span></span><br><span class=\"line\">  size_t MaxHeapSize = 268435456 </span><br></pre></td></tr></table></figure>\n\n<p>可以看到上面的最大堆调整到内存限制的四分之一，而非物理内存的四分之一。还可以支持CPU自适应，如下所示：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker  run -it --CPUs 2 ---entrypoint bash openjdk:11-jdk</span></span><br><span class=\"line\">jshell&gt; Runtime.getRuntime().availableProcessors()</span><br><span class=\"line\"><span class=\"variable\">$1</span> ==&gt; 2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到通过JAVA的API成功地获取到当前设置的CPU个数。</p>\n<p>如果是其他编程语言希望获取到容器的CPU和内存限制，可以通过容器内的cgroup文件系统，如获取容器内存的限制：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat /sys/fs/cgroup/memory/memory.limit_in_bytes</span></span><br><span class=\"line\">104857600</span><br></pre></td></tr></table></figure>","categories":["kubernetes"],"tags":["k8s","container","java"]},{"title":"Jvm OOM问题排查","url":"/2021/07/19/java/jvm/jvm-oom-view/","content":"<h1><span id=\"java-内存溢出-jstackjvm内存溢出问题\">java 内存溢出 jstack,JVM内存溢出问题</span></h1><h2><span id=\"通过linux的top命令查看cpu占比\">通过Linux的top命令查看cpu占比</span></h2><p>首先通过top命令查看，发现某个java程序占用了较高内存</p>\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/729f6d2c5bdc5e08504ce87111c98987.png\" alt=\"729f6d2c5bdc5e08504ce87111c98987.png\"></p>\n<h2><span id=\"jps命令确定是哪个java程序\">jps命令确定是哪个java程序</span></h2><p>然后通过jps -l 与上面的PID列(2848)比较，确定是 picasso-java-v1.jar 这个java程序占用cpu过高：</p>\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/5c478987da213b738527755478ee18d7.png\" alt=\"5c478987da213b738527755478ee18d7.png\"></p>\n<h2><span id=\"通过ps-查看具体哪个jvm线程\">通过ps 查看具体哪个JVM线程</span></h2><p>当时想的是可能应用内某个线程导致死循环，使用如下命令查看2848进程的各个线程小号cpu时间//ps -mp [线程号] -o THREAD,tid,time</p>\n<p>ps -mp 2848 -o THREAD,tid,time</p>\n<p>下图 %CPU列 为 cpu的百分比，TID列 为线程id</p>\n<p><strong>也可以使用top -Hp pid</strong></p>\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/b451f61304455332b8b023b222912fa7.png\" alt=\"b451f61304455332b8b023b222912fa7.png\"></p>\n<p>找到消耗cpu最大的线程(当时线上出现时某个线程消耗cpu90%多)，这里为了演示，所以取2858这个线程。</p>\n<h2><span id=\"通过jstack查看java中的具体线程栈信息\">通过jstack查看java中的具体线程栈信息</span></h2><p>然后把上面线程id转化为16进制，在shell中使用printf “%x\\n” tid即可，结果为b2a:</p>\n<p>然后使用jstack输出这个线程的调用栈：//jstack [进程id] | grep [线程的16进制id] -A行数</p>\n<p>jstack 2848 | grep b2a -A30</p>\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/9477ef59f33d14a6272566e9426320e4.png\" alt=\"9477ef59f33d14a6272566e9426320e4.png\"></p>\n<p>发现为GC线程，原来是jvm内存回收导致的cpu过高！</p>\n<p>通过jstat查看内存回收情况</p>\n<p>使用jstat -gcutil 线程数 间隔秒数 次数命令查看：</p>\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/070a664359b943e10e375b76168559ea.png\" alt=\"070a664359b943e10e375b76168559ea.png\"></p>\n<p>如图上面的FGC列Full GC次数为几百，而FGCT的Full GC秒数达到了几千，通过设置更多的监控次数观察，每次Full GC过后，O列的老年代还是99%，可见是内存不足导致的一直不停Full GC !</p>\n<p>重启程序，使用-Xmx -Xms设置更大堆内存</p>\n<p>通过重启程序，-Xmx2048m -Xms2048m设置了更大的内存参数.</p>\n<h2><span id=\"使用jmap生成堆转储文件\">使用jmap生成堆转储文件</span></h2><p>通过jmap 生成了镜像jmap -dump:format=b,file=dumpfile.dat [pid]</p>\n<h2><span id=\"使用eclipse-memory-analyzer分析原因\">使用Eclipse Memory Analyzer分析原因</span></h2><p>在Eclipse Memory Analyzer中生成Leak Suspects报告：</p>\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/7ef8dd3f8a66903d42061c656fd8fd8a.png\" alt=\"7ef8dd3f8a66903d42061c656fd8fd8a.png\"></p>\n<p>发现是 PoolingHttpClientConnectionManager 这个类导致的。再点击上图中的Details,查看详细信息：</p>\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/7f17e83ddae942e04ab89677a7dfb9ce.png\" alt=\"7f17e83ddae942e04ab89677a7dfb9ce.png\"></p>\n<p>这下清晰了，是阿里的oss类库导致的，结合程序中的如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">OSSClient ossClient = <span class=\"keyword\">new</span> OSSClient(<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">PutObjectResult putObjectResult = ossClient.putObject(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个方法在程序中没有使用单例模式而且没有关闭，每调用一次就生成了一个PoolingHttpClientConnectionManager，而且是不可回收的。通过源码查看到IdleConnectionReaper.size()这个类会生成PoolingHttpClientConnectionManager的总数量。</p>\n<p>验证猜测</p>\n<p>使用 -Xms20m -Xmx20m 运行以下程序，发现size一直变大，最后导致OOM (java.lang.OutOfMemoryError)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60000</span>; i++) &#123;undefined</span><br><span class=\"line\"></span><br><span class=\"line\">OSSClient ossClient = <span class=\"keyword\">new</span> OSSClient(endpoint, accessKeyId, accessKeySecret);</span><br><span class=\"line\"></span><br><span class=\"line\">ossClient.putObject(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;test1234&quot;</span> + UUID.randomUUID(), <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;d:/file.txt&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;size=&quot;</span>+IdleConnectionReaper.size());</span><br><span class=\"line\"></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/07/19/java/jvm/jvm-oom-view/4901bfddda621275523f855a6b449ba2.png\" alt=\"4901bfddda621275523f855a6b449ba2.png\"></p>\n<p>查看api，得知使用shutdown方法即可关闭OSSClient：</p>\n<p>1ossClient.shutdown();</p>\n<p>再运行以下程序，size一直为0，一切正常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60000</span>; i++) &#123;undefined</span><br><span class=\"line\"></span><br><span class=\"line\">OSSClient ossClient = <span class=\"keyword\">new</span> OSSClient(endpoint, accessKeyId, accessKeySecret);</span><br><span class=\"line\"></span><br><span class=\"line\">ossClient.putObject(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;test1234&quot;</span> + UUID.randomUUID(), <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;d:/file.txt&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">ossClient.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;size=&quot;</span>+IdleConnectionReaper.size());</span><br><span class=\"line\"></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，终于找到了导致cpu过高和OutOfMemoryError的真凶！</p>\n","categories":["jvm"],"tags":["java","jvm"]},{"title":"COLA应用架构的实践","url":"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/","content":"<h1 id=\"COLA架构\"><a href=\"#COLA架构\" class=\"headerlink\" title=\"COLA架构\"></a>COLA架构</h1><h2 id=\"COLA-概述\"><a href=\"#COLA-概述\" class=\"headerlink\" title=\"COLA 概述\"></a>COLA 概述</h2><p><strong>COLA 是 Clean Object-Oriented and Layered Architecture的缩写，代表“整洁面向对象分层架构”。</strong></p>\n<p>COLA分为两个部分，COLA架构和COLA组件。</p>\n<p>源码地址：<a href=\"https://github.com/alibaba/COLA\">https://github.com/alibaba/COLA</a></p>\n<p><a href=\"https://gitee.com/mirrors/cola-framework?utm_source=alading&amp;utm_campaign=repo\">https://gitee.com/mirrors/cola-framework?utm_source=alading&amp;utm_campaign=repo</a></p>\n<span id=\"more\"></span>\n\n<p><strong>架构</strong>的<strong>意义</strong> 就是 要素结构：</p>\n<ul>\n<li>要素 是 组成架构的重要元素；</li>\n<li>结构 是 要素之间的关系。</li>\n</ul>\n<p>而 <strong>应用架构</strong>的<strong>意义</strong> 就在于</p>\n<ul>\n<li>定义一套良好的结构；</li>\n<li>治理应用复杂度，降低系统熵值；</li>\n<li>从随心所欲的混乱状态，走向井井有条的有序状态。</li>\n</ul>\n<h2 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h2><p>分层是属于大粒度的职责划分，太粗，我们有必要往下再down一层，细化到包结构的粒度，才能更好的指导我们的工作。</p>\n<p>还是拿一堆玩具举例子，分层类似于拿来了一个架子，分包类似于在每一层架子上又放置了多个收纳盒。所谓的内聚，就是把功能类似的玩具放在一个盒子里，这样可以让应用结构清晰，极大的降低系统的认知成本和维护成本。</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/20201209182220206-6516172.png\" alt=\"archWhy\"></p>\n<p>COLA架构就是为此而生，其核心职责就是定义良好的应用结构，提供最佳应用架构的最佳实践。通过不断探索，我们发现良好的分层结构，良好的包结构定义，可以帮助我们治理混乱不堪的业务应用系统。</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/2020120918285068-6516197.png\" alt=\"cure\"></p>\n<p>那么，对于一个后端应用来说，应该需要哪些收纳盒呢？这一块的设计真可谓是费了老鼻子劲了，基本上每一次COLA的迭代都会涉及到包结构的调整，迭代到现在，才算基本稳定下来。</p>\n<p>下图是可靠的应用架构：COLA 4.0</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/20201209182934838-6516218.png\" alt=\"cola\"></p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/2450ba6358e9e68cb5b91f50ef3a7b0b-20220203235401271.png\" alt=\"image.png\"></p>\n<p>各个包结构的简要功能描述，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>包名</th>\n<th>功能</th>\n<th>必选</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Adapter层</td>\n<td>web</td>\n<td>处理页面请求的Controller</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Adapter层</td>\n<td>wireless</td>\n<td>处理无线端的适配</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Adapter层</td>\n<td>wap</td>\n<td>处理wap端的适配</td>\n<td>否</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>App层</td>\n<td>executor</td>\n<td>处理request，包括command和query</td>\n<td>是</td>\n</tr>\n<tr>\n<td>App层</td>\n<td>consumer</td>\n<td>处理外部message</td>\n<td>否</td>\n</tr>\n<tr>\n<td>App层</td>\n<td>scheduler</td>\n<td>处理定时任务</td>\n<td>否</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Domain层</td>\n<td>model</td>\n<td>领域模型</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Domain层</td>\n<td>ability</td>\n<td>领域能力，包括DomainService</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Domain层</td>\n<td>gateway</td>\n<td>领域网关，解耦利器</td>\n<td>是</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Infra层</td>\n<td>gatewayimpl</td>\n<td>网关实现</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Infra层</td>\n<td>mapper</td>\n<td>ibatis数据库映射</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Infra层</td>\n<td>config</td>\n<td>配置信息</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Client SDK</td>\n<td>api</td>\n<td>服务对外透出的API</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Client SDK</td>\n<td>dto</td>\n<td>服务对外的DTO</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>你可能会有疑问，为什么Domain的model是可选的？因为COLA是应用架构，不是DDD架构。在工作中，很多同学问我领域模型要怎么设计，我的回答通常是：无有必要勿增实体。领域模型对设计能力要求很高，没把握用好，一个错误的抽象还不如不抽象，宁可不要用，也不要滥用，不要为了DDD而DDD。</p>\n<p>问题的关键是要看，新增的模型没有给你带来收益。比如有没有帮助系统解耦，有没有提升业务语义表达能力的提升，有没有提升系统的可维护性和可测性等等。</p>\n<p>模型虽然可选，但DDD的思想是一定要去学习和贯彻的，特别是统一语言、边界上下文、防腐层的思想，值得深入学习，仔细体会。实际上，COLA里面的很多设计思想都来自于DDD。其中就包括领域包的设计。</p>\n<p>前面的包定义，都是功能维度的定义。为了兼顾领域维度的内聚性，我们有必要对包结构进行一下微调，即顶层包结构应该是按照领域划分，让领域内聚。</p>\n<p>也就是说，我们要综合考虑功能和领域两个维度包结构定义。按照领域和功能两个维度分包策略，最后呈现出来的，是如下图所示的顶层包节点是领域名称，领域之下，再按功能划分包结构。</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/9f42fc75bfb4f670c6f047b9907ff174-3904088.png\" alt=\"image.png\"></p>\n<p>例如，在我们刚刚上线的一个云店铺（cloudstore）项目中，按照COLA的分包策略，我们在每一个module下面首先按照领域做一个顶层划分，然后在领域内，再按照功能进行分包。</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/b7ffe4f6a931b46be6d095a503300aac-3904153.png\" alt=\"image.png\"></p>\n<h2 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h2><p>“高内聚，低耦合”这句话，你工作的越久，就越会觉得其有道理。</p>\n<p>所谓耦合就是联系的紧密程度，只要有依赖就会有耦合，不管是进程内的依赖，还是跨进程的RPC依赖，都会产生耦合。依赖不可消除，同样，耦合也不可避免。我们所能做的不是消除耦合，而是把耦合降低到可以接受的程度。在软件设计中，有大量的设计模式，设计原则都是为了解耦这一目的。</p>\n<p>在DDD中有一个很棒的解耦设计思想——防腐层（Anti-Corruption），简单说，就是应用不要直接依赖外域的信息，要把外域的信息转换成自己领域上下文（Context）的实体再去使用，从而实现本域和外部依赖的解耦。</p>\n<p>在COLA中，我们把AC这个概念进行了泛化，将数据库、搜索引擎等数据存储都列为外部依赖的范畴。利用依赖倒置，统一使用gateway来实现业务领域和外部依赖的解耦。</p>\n<p>其实现方式如下图所示，主要是在Domain层定义Gateway接口，然后在Infrastructure提供Gateway接口的实现。</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/a5fa3b7c0c77fb902878abb03990e50b-3904272.png\" alt=\"image.png\"></p>\n<p>举个例子，假如有一个电商系统，对于下单这个操作，它需要联动订单服务、商品服务、库存服务、营销服务等多个系统才能完成。</p>\n<p>那么在订单域，该如何获取商品和库存信息呢？最直接的方式，无外乎就是RPC调用商品和库存服务，拿到DTO直接使用就完了。</p>\n<p>然而，商品域吐出的是一个大而全的DTO（可能包含几十个字段），而在下单这个阶段，订单所需要的可能只是其中几个字段而已。更合适的做法，应该是在订单域中，使用gateway对商品域和库存域的依赖进行解耦。</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/774ccbf6adfe2aaefca46202779b5864-3904300.png\" alt=\"image.png\"></p>\n<p>这样做有两个好处，一个是降低了对外域信息依赖的耦合；另一个是通过上下文映射（Context mapping），确保本领域边界上下文（Bounded context）下领域知识的完整性，实现了统一语言（Ubiquitous language）。</p>\n<h2 id=\"COLA-Archetype\"><a href=\"#COLA-Archetype\" class=\"headerlink\" title=\"COLA Archetype\"></a>COLA Archetype</h2><p>见源码：<a href=\"https://github.com/alibaba/COLA\">https://github.com/alibaba/COLA</a></p>\n<p>好的应用架构，都遵循一些共同模式，不管是六边形架构、洋葱圈架构、整洁架构、还是COLA架构，<strong>都提倡以业务为核心，解耦外部依赖，分离业务复杂度和技术复杂度等</strong>。</p>\n<p>COLA架构区别于这些架构的地方，在于除了思想之外，我们还提供了可落地的工具和实践指导。</p>\n<p>为了能够快速创建满足COLA架构的应用，我们提供了两个<code>archetype</code>，位于<a href=\"https://gitee.com/mirrors/cola-framework/blob/master/cola-archetypes\"><code>cola-archetypes</code>目录</a>下：</p>\n<ol>\n<li><code>cola-archetype-service</code>：用来创建纯后端服务的<code>archetype</code>。</li>\n<li><code>cola-archetype-web</code>：用来创建<code>adapter</code>和后端服务一体的<code>web</code>应用<code>archetype</code>。</li>\n</ol>\n<h1 id=\"COLA-Components\"><a href=\"#COLA-Components\" class=\"headerlink\" title=\"COLA Components\"></a>COLA Components</h1><p>此外，我们还提供了一些非常有用的通用组件，这些组件可以帮助我们提升研发效率。</p>\n<p>这些功能组件被收拢在<a href=\"https://gitee.com/mirrors/cola-framework/blob/master/cola-components\"><code>cola-components</code>目录</a>下面。到目前为止，我们已经沉淀了以下组件：</p>\n<table>\n<thead>\n<tr>\n<th>组件名称</th>\n<th>功能</th>\n<th>版本</th>\n<th>依赖</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>cola-component-dto</code></td>\n<td>定义了<code>DTO</code>格式，包括分页</td>\n<td>1.0.0</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>cola-component-exception</code></td>\n<td>定义了异常格式， 主要有<code>BizException</code>和<code>SysException</code></td>\n<td>1.0.0</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>cola-component-statemachine</code></td>\n<td>状态机组件</td>\n<td>1.0.0</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>cola-component-domain-starter</code></td>\n<td><code>Spring</code>托管的领域实体组件</td>\n<td>1.0.0</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>cola-component-catchlog-starter</code></td>\n<td>异常处理和日志组件</td>\n<td>1.0.0</td>\n<td><code>exception</code> 、<code>dto</code>组件</td>\n</tr>\n<tr>\n<td><code>cola-component-extension-starter</code></td>\n<td>扩展点组件</td>\n<td>1.0.0</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>cola-component-test-container</code></td>\n<td>测试容器组件</td>\n<td>1.0.0</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h1 id=\"如何使用COLA\"><a href=\"#如何使用COLA\" class=\"headerlink\" title=\"如何使用COLA\"></a>如何使用COLA</h1><p>你可以按照以下步骤去使用COLA：</p>\n<p>** 第一步：安装 cola archetype **<br>下载cola-archetypes下的源码到本地，然后本地运行mvn install安装。</p>\n<p>** 第二步：安装 cola components **<br>下载cola-components下的源码到本地，然后本地运行mvn install安装。</p>\n<p>** 第三步：创建应用 **<br>执行以下命令：</p>\n<h2 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h2><p>执行以下命令创建web服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate  \\</span><br><span class=\"line\">    -DgroupId=com.alibaba.cola.demo.web \\</span><br><span class=\"line\">    -DartifactId=demo-web \\</span><br><span class=\"line\">    -Dversion=1.0.0-SNAPSHOT \\</span><br><span class=\"line\">    -Dpackage=com.alibaba.demo \\</span><br><span class=\"line\">    -DarchetypeArtifactId=cola-framework-archetype-web \\</span><br><span class=\"line\">    -DarchetypeGroupId=com.alibaba.cola \\</span><br><span class=\"line\">    -DarchetypeVersion=4.0.1</span><br></pre></td></tr></table></figure>\n\n<p>指定自己的DgroupId、DartifactId、Dpackage等</p>\n<p>命令执行成功的话，会看到如下的应用代码结构：</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/20201209192258840-6516413.png\" alt=\"demo\"></p>\n<p>注：也可以使用阿里云的应用生成器：<a href=\"https://start.aliyun.com/bootstrap.html\">https://start.aliyun.com/bootstrap.html</a> 生成cola应用。</p>\n<p><img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/1a4e5210301a669f74bff8801e3d9e1d-6516620.png\" alt=\"image.png\"></p>\n<p>1）适配层（Adapter Layer）：负责对前端展示（web，wireless，wap）的路由和适配，对于传统B/S系统而言，adapter就相当于MVC中的controller；</p>\n<p>2）应用层（Application Layer）：主要负责获取输入，组装上下文，参数校验，调用领域层做业务处理，如果需要的话，发送消息通知等。层次是开放的，应用层也可以绕过领域层，直接访问基础实施层；</p>\n<p>3）领域层（Domain Layer）：主要是封装了核心业务逻辑，并通过领域服务（Domain Service）和领域对象（Domain Entity）的方法对App层提供业务实体和业务逻辑计算。领域是应用的核心，不依赖任何其他层次；</p>\n<p>4）基础实施层（Infrastructure Layer）：主要负责技术细节问题的处理，比如数据库的CRUD、搜索引擎、文件系统、分布式服务的RPC等。此外，领域防腐的重任也落在这里，外部依赖需要通过gateway的转义处理，才能被上面的App层和Domain层使用。</p>\n<h2 id=\"运行应用\"><a href=\"#运行应用\" class=\"headerlink\" title=\"运行应用\"></a>运行应用</h2><ul>\n<li>在<code>项目</code>目录下运行<code>mvn install</code>（如果不想运行测试，可以加上<code>-DskipTests</code>参数）。</li>\n<li>进入<code>start</code>目录，执行<code>mvn spring-boot:run</code>。<br>运行成功的话，可以看到<code>SpringBoot</code>启动成功的界面。</li>\n<li>生成的应用中，已经实现了一个简单的<code>Rest</code>请求，可以在浏览器中输入 <a href=\"http://localhost:8080/helloworld\">http://localhost:8080/helloworld</a> 进行测试。</li>\n</ul>\n<p>如果要生成不是<code>web</code>工程而是<code>service</code>工程也类似，执行的是下面的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate  \\</span><br><span class=\"line\">    -DgroupId=com.alibaba.cola.demo.service \\</span><br><span class=\"line\">    -DartifactId=demo-service \\</span><br><span class=\"line\">    -Dversion=1.0.0-SNAPSHOT \\</span><br><span class=\"line\">    -Dpackage=com.alibaba.demo \\</span><br><span class=\"line\">    -DarchetypeArtifactId=cola-framework-archetype-service \\</span><br><span class=\"line\">    -DarchetypeGroupId=com.alibaba.cola \\</span><br><span class=\"line\">    -DarchetypeVersion=4.0.1</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"COLA-架构中建议的命名规范参考\"><a href=\"#COLA-架构中建议的命名规范参考\" class=\"headerlink\" title=\"COLA 架构中建议的命名规范参考\"></a>COLA 架构中建议的命名规范参考</h1><p>​    <img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/e12229272ac44b5aae514424528cca42-6762421.png\" alt=\"COLA 架构中建议的命名规范\"></p>\n<p>DB DAO &lt;–&gt; XXTunnel.java</p>\n<p>在COLA架构中，我们也能找到以前熟悉的VO，DTO等对象，只不过在COLA中后缀名变了：</p>\n<p>VO-&gt;CO，COLA中CO对象用于展示给前端。</p>\n<p>DTO-&gt;Cmd或Qry，COLA中Cmd或Qry对象用于前端和后端的数据交互，Cmd表示命令对象，Qry表示查询对象。</p>\n<p>Entity-&gt;DO，数据持久化对象。</p>\n<img src=\"/2021/07/17/Architecture/CodeLayer/COLA/COLA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%9E%E8%B7%B5/COLA应用架构的实践/ab0e4c8d4d8b441ea1bf798e1f22cc1b-6762454.png\" alt=\"COLA 架构中建议的命名规范\" style=\"zoom:50%;\">\n\n<p>此外，对于领域对象domain，比如UserDomain，我们在COLA中称之为UserE。</p>\n<p>领域事件的命名，如创建一个新客户，命令为CustomerCreatedEvent。</p>\n","categories":["架构设计"],"tags":["java","代码架构"]},{"title":"基于Kubernetes安装Istio","url":"/2021/12/19/cloud-native/ServerMash/istio/istio-install/","content":"<h1 id=\"基于Kubernetes安装Istio\"><a href=\"#基于Kubernetes安装Istio\" class=\"headerlink\" title=\"基于Kubernetes安装Istio\"></a>基于Kubernetes安装Istio</h1><h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>操作系统: centos7</p>\n<p>k8s: v1.22.x</p>\n<p>istio: v1.12.2</p>\n<span id=\"more\"></span>\n\n<h1 id=\"下载安装istio\"><a href=\"#下载安装istio\" class=\"headerlink\" title=\"下载安装istio\"></a>下载安装istio</h1><p><a href=\"https://github.com/istio/istio/releases\">https://github.com/istio/istio/releases</a></p>\n<h2 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h2><p>首先，打开“/etc/profile”文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>然后，在文件的最后添加以下内容后，保存并退出：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/opt/istio-1.12.2/bin</span><br></pre></td></tr></table></figure>\n\n<p>之后，执行以下命令，使环境变量生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令来查看Istio的版本，同时验证命令可用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">istioctl version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Istio\"><a href=\"#安装Istio\" class=\"headerlink\" title=\"安装Istio\"></a>安装Istio</h2><p>执行以下命令来安装Istio：</p>\n<p>istio有多种安装方式，可以通过–set进行设置，主要区别在于安装不同的服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">istioctl install --<span class=\"built_in\">set</span> profile=demo -y</span><br></pre></td></tr></table></figure>\n\n<p>安装Istio需要花费一些时间，安装完成后的输出信息如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">✔ Istio core installed</span><br><span class=\"line\">✔ Istiod installed</span><br><span class=\"line\">✔ Egress gateways installed</span><br><span class=\"line\">✔ Ingress gateways installed</span><br><span class=\"line\">✔ Installation complete</span><br><span class=\"line\">Making this installation the default <span class=\"keyword\">for</span> injection and validation.</span><br><span class=\"line\"></span><br><span class=\"line\">Thank you <span class=\"keyword\">for</span> installing Istio 1.12.  Please take a few minutes to tell us about your install/upgrade experience!  https://forms.gle/FegQbc9UvePd4Z9z7</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令，我们可以看到“istio-system”命名空间下的POD的运行情况：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pods -n istio-system</span><br></pre></td></tr></table></figure>\n\n<p>运行Istio的诊断工具，来检查配置是否存在问题：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">istioctl analyze</span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Info [IST0102] (Namespace default) The namespace is not enabled <span class=\"keyword\">for</span> Istio injection. Run <span class=\"string\">&#x27;kubectl label namespace default istio-injection=enabled&#x27;</span> to <span class=\"built_in\">enable</span> it, or <span class=\"string\">&#x27;kubectl label namespace default istio-injection=disabled&#x27;</span> to explicitly mark it as not needing injection.</span><br></pre></td></tr></table></figure>\n\n<p>说明此时需要我们为“default”命名空间开启Istio的注入能力，我们按照提示执行命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl label namespace default istio-injection=enabled</span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">namespace/default labeled</span><br></pre></td></tr></table></figure>\n\n<p>然后我们重新运行诊断工具：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">istioctl analyze</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">✔ No validation issues found when analyzing namespace: default.</span><br></pre></td></tr></table></figure>\n\n<p>说明Istio的状态正常。</p>\n<h1 id=\"部署示例应用\"><a href=\"#部署示例应用\" class=\"headerlink\" title=\"部署示例应用\"></a>部署示例应用</h1><p>Istio的安装包中提供了一系列的示例应用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ll samples/</span><br></pre></td></tr></table></figure>\n\n<p>部署“bookinfo”应用来看下Istio的效果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">service/details created</span><br><span class=\"line\">serviceaccount/bookinfo-details created</span><br><span class=\"line\">deployment.apps/details-v1 created</span><br><span class=\"line\">service/ratings created</span><br><span class=\"line\">serviceaccount/bookinfo-ratings created</span><br><span class=\"line\">deployment.apps/ratings-v1 created</span><br><span class=\"line\">service/reviews created</span><br><span class=\"line\">serviceaccount/bookinfo-reviews created</span><br><span class=\"line\">deployment.apps/reviews-v1 created</span><br><span class=\"line\">deployment.apps/reviews-v2 created</span><br><span class=\"line\">deployment.apps/reviews-v3 created</span><br><span class=\"line\">service/productpage created</span><br><span class=\"line\">serviceaccount/bookinfo-productpage created</span><br><span class=\"line\">deployment.apps/productpage-v1 created</span><br></pre></td></tr></table></figure>\n\n<p>部署完成后，我们可以通过以下命令来查看服务的信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get services</span><br></pre></td></tr></table></figure>\n\n<p>其输出结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">details       ClusterIP   10.10.156.45    &lt;none&gt;        9080/TCP   14s</span><br><span class=\"line\">kubernetes    ClusterIP   10.10.0.1       &lt;none&gt;        443/TCP    3d21h</span><br><span class=\"line\">productpage   ClusterIP   10.10.84.191    &lt;none&gt;        9080/TCP   14s</span><br><span class=\"line\">ratings       ClusterIP   10.10.82.143    &lt;none&gt;        9080/TCP   14s</span><br><span class=\"line\">reviews       ClusterIP   10.10.121.212   &lt;none&gt;        9080/TCP   14s</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们查看POD状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAME                              READY   STATUS            RESTARTS   AGE</span><br><span class=\"line\">details-v1-5498c86cf5-clnv9       0/2     PodInitializing   0          46s</span><br><span class=\"line\">productpage-v1-65b75f6885-52kvx   0/2     PodInitializing   0          46s</span><br><span class=\"line\">ratings-v1-b477cf6cf-dhq75        0/2     PodInitializing   0          46s</span><br><span class=\"line\">reviews-v1-79d546878f-2c8wx       0/2     PodInitializing   0          46s</span><br><span class=\"line\">reviews-v2-548c57f459-kjwbx       0/2     PodInitializing   0          46s</span><br><span class=\"line\">reviews-v3-6dd79655b9-5xqsl       0/2     PodInitializing   0          46s</span><br></pre></td></tr></table></figure>\n\n<p>这里我们需要等待所有POD的状态都变为“Running”后再执行后续操作。</p>\n<p>我这边约等待了6分钟，所有POD都成功变为了“Running”状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">details-v1-5498c86cf5-clnv9       2/2     Running   0          5m59s</span><br><span class=\"line\">productpage-v1-65b75f6885-52kvx   2/2     Running   0          5m59s</span><br><span class=\"line\">ratings-v1-b477cf6cf-dhq75        2/2     Running   0          5m59s</span><br><span class=\"line\">reviews-v1-79d546878f-2c8wx       2/2     Running   0          5m59s</span><br><span class=\"line\">reviews-v2-548c57f459-kjwbx       2/2     Running   0          5m59s</span><br><span class=\"line\">reviews-v3-6dd79655b9-5xqsl       2/2     Running   0          5m59s</span><br></pre></td></tr></table></figure>\n\n<p>下面，我们来测试下“productpage”是否可以正常提供服务。<br>因为样例使用的是ClusterIp，因此在宿主机访问会比较麻烦，我们选择通过命令在“ratings”服务中通过“curl”命令来对“productpage”服务页面进行访问：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> <span class=\"string\">&quot;<span class=\"subst\">$(kubectl get pod -l app=ratings | grep Running | awk &#x27;&#123;print $1&#125;&#x27;)</span>&quot;</span> -- curl -s productpage:9080/productpage | grep -o <span class=\"string\">&quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;Simple Bookstore App&lt;/title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>说明页面服务正常，且可以在集群内部访问。</p>\n<p>然后我们继续部署“bookinfo-gateway”样例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">gateway.networking.istio.io/bookinfo-gateway created</span><br><span class=\"line\">virtualservice.networking.istio.io/bookinfo created</span><br></pre></td></tr></table></figure>\n\n<p>为“bookinfo-gateway”配置端口：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class=\"string\">&#x27;&#123;.spec.ports[?(@.name==&quot;http2&quot;)].nodePort&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">export</span> SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class=\"string\">&#x27;&#123;.spec.ports[?(@.name==&quot;https&quot;)].nodePort&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">export</span> INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath=<span class=\"string\">&#x27;&#123;.items[0].status.hostIP&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>设置“bookinfo-gateway”的URL：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GATEWAY_URL=<span class=\"variable\">$INGRESS_HOST</span>:<span class=\"variable\">$INGRESS_PORT</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，我们查看URL：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$GATEWAY_URL</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.3.22:31618</span><br></pre></td></tr></table></figure>\n\n<p>我们通过这个地址在浏览器中访问“productpage”页面：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://192.168.3.22:31618/productpage</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"部署Kiali-Dashboard\"><a href=\"#部署Kiali-Dashboard\" class=\"headerlink\" title=\"部署Kiali Dashboard\"></a>部署Kiali Dashboard</h1><p>接下来，我们部署Kiali Dashboard样例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f samples/addons</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">serviceaccount/grafana created</span><br><span class=\"line\">configmap/grafana created</span><br><span class=\"line\">service/grafana created</span><br><span class=\"line\">deployment.apps/grafana created</span><br><span class=\"line\">configmap/istio-grafana-dashboards created</span><br><span class=\"line\">configmap/istio-services-grafana-dashboards created</span><br><span class=\"line\">deployment.apps/jaeger created</span><br><span class=\"line\">service/tracing created</span><br><span class=\"line\">service/zipkin created</span><br><span class=\"line\">service/jaeger-collector created</span><br><span class=\"line\">serviceaccount/kiali created</span><br><span class=\"line\">configmap/kiali created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/kiali-viewer created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/kiali created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/kiali created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/kiali-controlplane created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/kiali-controlplane created</span><br><span class=\"line\">service/kiali created</span><br><span class=\"line\">deployment.apps/kiali created</span><br><span class=\"line\">serviceaccount/prometheus created</span><br><span class=\"line\">configmap/prometheus created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/prometheus created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/prometheus created</span><br><span class=\"line\">service/prometheus created</span><br><span class=\"line\">deployment.apps/prometheus created</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令，查看“Kiali”的部署情况：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get deployment kiali -n istio-system</span><br></pre></td></tr></table></figure>\n\n<p>部署完成后的输出为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">kiali   1/1     1            1           3m1s</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们需要对Kiali的配置进行修改，使其通过NodePort支持外网访问，以便我们在宿主机访问。</p>\n<p>首先，我们修改“<br>samples/addons/prometheus.yaml”配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi samples/addons/prometheus.yaml</span><br></pre></td></tr></table></figure>\n\n<p>通过关键字查找“kind: Service”，找到服务定义的部分，增加NodePort配置：</p>\n<p><img src=\"/2021/12/19/cloud-native/ServerMash/istio/istio-install/e4a5af064502474e81715428572c2395.png\" alt=\"基于Kubernetes安装Istio\"></p>\n<p>需要注意的是，该配置片段的最后，原本有“type: “ClusterIP””的配置，需要将其删除。</p>\n<p>执行以下命令应用修改后的配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f samples/addons/prometheus.yaml</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">serviceaccount/prometheus unchanged</span><br><span class=\"line\">configmap/prometheus unchanged</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/prometheus unchanged</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/prometheus unchanged</span><br><span class=\"line\">service/prometheus configured</span><br><span class=\"line\">deployment.apps/prometheus configured</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们来修改“<br>samples/addons/grafana.yaml”配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi samples/addons/grafana.yaml</span><br></pre></td></tr></table></figure>\n\n<p>类似地，我们通过关键字搜索“kind: Service”找到服务定义的部分，增加NodePort配置：</p>\n<img src=\"/2021/12/19/cloud-native/ServerMash/istio/istio-install/3854635088594cdc8c5bbc550b87bc07.jpeg\" alt=\"基于Kubernetes安装Istio\" style=\"zoom:67%;\">\n\n<p>执行以下命令应用修改后的配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f samples/addons/grafana.yaml</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">serviceaccount/grafana unchanged</span><br><span class=\"line\">configmap/grafana unchanged</span><br><span class=\"line\">service/grafana configured</span><br><span class=\"line\">deployment.apps/grafana configured</span><br><span class=\"line\">configmap/istio-grafana-dashboards configured</span><br><span class=\"line\">configmap/istio-services-grafana-dashboards configured</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们来修改“<br>samples/addons/jaeger.yaml”配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi samples/addons/jaeger.yaml</span><br></pre></td></tr></table></figure>\n\n<p>同样地，我们通过关键字搜索“kind: Service”找到服务定义的部分，增加NodePort配置。需要注意的是，该配置中定义了三个服务：</p>\n<p><img src=\"/2021/12/19/cloud-native/ServerMash/istio/istio-install/6f150194de7843428509d93f94002065.png\" alt=\"基于Kubernetes安装Istio\"></p>\n<p>修改jaeger.yaml中的tracing服务配置</p>\n<p><img src=\"/2021/12/19/cloud-native/ServerMash/istio/istio-install/a1fae85066cb48c4bd31b3fa7cafe4d2.png\" alt=\"基于Kubernetes安装Istio\"></p>\n<p>修改jaeger.yaml中的zipkin服务配置</p>\n<p><img src=\"/2021/12/19/cloud-native/ServerMash/istio/istio-install/dfcd657eb83047019b5fb62a9dadab4f.png\" alt=\"基于Kubernetes安装Istio\"></p>\n<p>修改jaeger.yaml中的jaeger-collector服务配置</p>\n<p>执行以下命令应用修改后的配置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f samples<span class=\"regexp\">/addons/</span>jaeger.yaml</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\">deployment.apps/jaeger unchanged</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span>/<span class=\"title\">tracing</span> configured</span></span><br><span class=\"line\"><span class=\"class\">service/zipkin configured</span></span><br><span class=\"line\"><span class=\"class\">service/jaeger-collector configured</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，我们修改“samples/addons/kiali.yaml”配置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi samples<span class=\"regexp\">/addons/</span>kiali.yaml</span><br></pre></td></tr></table></figure>\n\n<p>同样的，我们通过关键字搜索“kind: Service”找到服务定义的部分，增加NodePort配置：</p>\n<p><img src=\"/2021/12/19/cloud-native/ServerMash/istio/istio-install/3c1cb0aeb4ed4bf6b6d2173695dd1412.png\" alt=\"基于Kubernetes安装Istio\"></p>\n<p>执行以下命令应用修改后的配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f samples/addons/kiali.yaml</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">serviceaccount/kiali unchanged</span><br><span class=\"line\">configmap/kiali unchanged</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/kiali-viewer unchanged</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/kiali unchanged</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/kiali unchanged</span><br><span class=\"line\">role.rbac.authorization.k8s.io/kiali-controlplane unchanged</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/kiali-controlplane unchanged</span><br><span class=\"line\">service/kiali configured</span><br><span class=\"line\">deployment.apps/kiali unchanged</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们通过访问虚拟机的“31009”端口，即可访问到Kiali Dashboard的页面，之后对“productpage”页面进行几次刷新，即可在Kiali Dashboard看到mesh收集到的服务间的关系：</p>\n<p><img src=\"/2021/12/19/cloud-native/ServerMash/istio/istio-install/32727fe6eb3a4e6d914c6cc5b6df2249.png\" alt=\"基于Kubernetes安装Istio\"></p>\n","categories":["istio"],"tags":["k8s","istio"]},{"title":"mysql主从配置","url":"/2021/09/05/db-resource/mysql/mysql-base/master-slave/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>介绍一主一丛和双主双从。</p>\n<p>环境：</p>\n<p>服务器：Centos7</p>\n<p>Mysql: Mysql8.0.20</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><p>主从复制解释</p>\n<p>将主数据库的增删改查等操作记录到二进制日志文件中，从库接收主库日志文件，根据最后一次更新的起始位置，同步复制到从数据库中，使得主从数据库保持一致。</p>\n</li>\n<li><p>主从复制的作用</p>\n<ul>\n<li>高可用性：主数据库异常可切换到从数据库</li>\n<li>负载均衡：实现读写分离</li>\n<li>备份：进行日常备份</li>\n</ul>\n</li>\n<li><p>Mysql主从复制过程</p>\n<img src=\"/2021/09/05/db-resource/mysql/mysql-base/master-slave/image-20211205012635132.png\" alt=\"image-20211205012635132\" style=\"zoom:50%;\">\n\n<p><strong>Binary log：主数据库的二进制日志；Relay log：从服务器的中继日志。</strong></p>\n<p>复制过程：<br>  （1）主数据库在每次事务完成前，将该操作记录到binlog日志文件中；<br>  （2）从数据库中有一个I/O线程，负责连接主数据库服务，并读取binlog日志变化，如果发现有新的变动，则将变动写入到relay-log，否则进入休眠状态；<br>  （3）从数据库中的SQL Thread读取中继日志，并串行执行SQL事件，使得从数据库与主数据库始终保持一致。</p>\n<p>注意事项：<br>  （1）涉及时间函数时，会出现数据不一致。原因是，复制过程的两次IO操作和网络、磁盘效率等问题势必导致时间戳不一致；<br>  （2）涉及系统函数时，会出现不一致。如：@@hostname，获取主机名称，主从数据库服务器名称不一致导致数据不一致；</p>\n</li>\n</ol>\n<h1 id=\"一主一从配置\"><a href=\"#一主一从配置\" class=\"headerlink\" title=\"一主一从配置\"></a>一主一从配置</h1><p><img src=\"/2021/09/05/db-resource/mysql/mysql-base/master-slave/8d4b5dcb8dd444e688bbad512947b9b5-8635190.png\" alt=\"Linux安装Mysql8.0.20并配置主从复制（一主一从，双主双从）\"></p>\n<ul>\n<li>服务器划分</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>服务器IP</strong></th>\n<th><strong>角色</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.133.129</td>\n<td>Master1</td>\n</tr>\n<tr>\n<td>192.168.133.130</td>\n<td>Slave1</td>\n</tr>\n</tbody></table>\n<p>主从数据库安装</p>\n<p>这里不做介绍</p>\n<h2 id=\"主服务器配置\"><a href=\"#主服务器配置\" class=\"headerlink\" title=\"主服务器配置\"></a>主服务器配置</h2><p>在/etc/my.cnf文件配置如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\">datadir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20/data </span><br><span class=\"line\">character-set-server=utf8 </span><br><span class=\"line\">lower-case-table-names=1 </span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"><span class=\"comment\"># 主从复制-主机配置 </span></span><br><span class=\"line\"><span class=\"comment\"># 主服务器唯一ID </span></span><br><span class=\"line\">server-id=1 </span><br><span class=\"line\"><span class=\"comment\"># 启用二进制日志 </span></span><br><span class=\"line\">log-bin=mysql-bin </span><br><span class=\"line\"><span class=\"comment\"># 设置不要复制的数据库(可设置多个) </span></span><br><span class=\"line\">binlog-ignore-db=sys </span><br><span class=\"line\">binlog-ignore-db=mysql </span><br><span class=\"line\">binlog-ignore-db=information_schema </span><br><span class=\"line\">binlog-ignore-db=performance_schema </span><br><span class=\"line\"><span class=\"comment\"># 设置需要复制的数据库(可设置多个) </span></span><br><span class=\"line\">binlog-do-db=<span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 设置logbin格式 </span></span><br><span class=\"line\">binlog_format=STATEMENT</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从服务器配置\"><a href=\"#从服务器配置\" class=\"headerlink\" title=\"从服务器配置\"></a>从服务器配置</h2><p>在/etc/my.cnf文件中添加如下配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\">datadir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20/data </span><br><span class=\"line\">character-set-server=utf8 </span><br><span class=\"line\">lower-case-table-names=1 </span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"><span class=\"comment\"># 主从复制-从机配置 </span></span><br><span class=\"line\"><span class=\"comment\"># 从服务器唯一ID </span></span><br><span class=\"line\">server-id=2 </span><br><span class=\"line\"><span class=\"comment\"># 启用中继日志 </span></span><br><span class=\"line\">relay-log=mysql-relay </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同步配置及测试\"><a href=\"#同步配置及测试\" class=\"headerlink\" title=\"同步配置及测试\"></a>同步配置及测试</h2><ol>\n<li><p>关闭主从数据库服务器防火墙或开放3306端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试远程访问</span></span><br><span class=\"line\"><span class=\"comment\"># 主数据库服务器测试从数据库 </span></span><br><span class=\"line\">mysql -uroot -p -h192.168.133.130 -P3306 </span><br><span class=\"line\"><span class=\"comment\"># 从数据库服务器测试主数据库 </span></span><br><span class=\"line\">mysql -uroot -p -h192.168.133.129 -P3306</span><br></pre></td></tr></table></figure></li>\n<li><p>主数据库创建用户slave并授权</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 创建用户 </span></span><br><span class=\"line\">create user <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified with mysql_native_password by <span class=\"string\">&#x27;password&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 授权 </span></span><br><span class=\"line\">grant replication slave on *.* to <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 刷新权限 </span></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure></li>\n<li><p>从数据库验证slave用户是否可用</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uslave -p -h192.168.133.129 -P3306</span><br></pre></td></tr></table></figure></li>\n<li><p>主数据库查询服务ID及Master状态</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 查询server_id是否可配置文件中一致 </span></span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;server_id&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 若不一致，可设置临时ID（重启失效） </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> global server_id = 1; </span><br><span class=\"line\"><span class=\"comment\"># 查询Master状态，并记录 File 和 Position 的值 </span></span><br><span class=\"line\">show master status; </span><br><span class=\"line\"><span class=\"comment\"># 注意：执行完此步骤后退出主数据库，防止再次操作导致 File 和 Position 的值发生变化</span></span><br></pre></td></tr></table></figure></li>\n<li><p>从数据库中设置主数据库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 查询server_id是否可配置文件中一致 </span></span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;server_id&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 若不一致，可设置临时ID（重启失效） </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> global server_id = 2; </span><br><span class=\"line\"><span class=\"comment\"># 设置主数据库参数 </span></span><br><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;192.168.133.129&#x27;</span>,master_port=3306,master_user=<span class=\"string\">&#x27;slave&#x27;</span>,master_password=<span class=\"string\">&#x27;password&#x27;</span>,master_log_file=<span class=\"string\">&#x27;mysql-bin.000002&#x27;</span>,master_log_pos=156; </span><br><span class=\"line\"><span class=\"comment\"># 开始同步 </span></span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 若出现错误，则停止同步，重置后再次启动 </span></span><br><span class=\"line\">stop slave; </span><br><span class=\"line\">reset slave; </span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 查询Slave状态 </span></span><br><span class=\"line\">show slave status\\G </span><br><span class=\"line\"><span class=\"comment\"># 查看是否配置成功 </span></span><br><span class=\"line\"><span class=\"comment\"># 查看参数 Slave_IO_Running 和 Slave_SQL_Running 是否都为yes，则证明配置成功。若为no，则需要查看对应的 Last_IO_Error 或 Last_SQL_Error 的异常值。</span></span><br></pre></td></tr></table></figure></li>\n<li><p>测试</p>\n<p>​    通过工具连接主从数据库或者在服务器连接。  注意：主数据库的配置文件中配置了需要同步的数据库，因此只会同步配置的数据库，不配置则同步全部。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在主数据库创建数据库test </span></span><br><span class=\"line\">create database <span class=\"built_in\">test</span>; </span><br><span class=\"line\"><span class=\"comment\"># 从数据库查看 </span></span><br><span class=\"line\">show databases; </span><br><span class=\"line\"><span class=\"comment\"># 在主数据库创建表 </span></span><br><span class=\"line\">use <span class=\"built_in\">test</span>; create table t_user(id int, name varchar(20)); </span><br><span class=\"line\"><span class=\"comment\"># 插入数据 </span></span><br><span class=\"line\">insert into t_user values(1, <span class=\"string\">&#x27;C3Stones&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\"># 在从数据库查看 </span></span><br><span class=\"line\">use <span class=\"built_in\">test</span>; select * from t_user; </span><br><span class=\"line\"><span class=\"comment\"># 其他删改查操作请自行测试</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"双主双从配置\"><a href=\"#双主双从配置\" class=\"headerlink\" title=\"双主双从配置\"></a>双主双从配置</h1><p>双主双从即两台主机分别存在两台从机，每台从机只复制对应的主机，两台主机互为主备</p>\n<img src=\"/2021/09/05/db-resource/mysql/mysql-base/master-slave/image-20211205012757325.png\" alt=\"image-20211205012757325\" style=\"zoom:50%;\">\n\n<ul>\n<li>服务器划分</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>服务器IP</strong></th>\n<th><strong>角色</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.133.129</td>\n<td>Master1</td>\n</tr>\n<tr>\n<td>192.168.133.130</td>\n<td>Slave1</td>\n</tr>\n<tr>\n<td>192.168.133.131</td>\n<td>Master2</td>\n</tr>\n<tr>\n<td>192.168.133.132</td>\n<td>Slave2</td>\n</tr>\n</tbody></table>\n<p>安装数据库不再介绍。</p>\n<h2 id=\"四个配置文件替换如下\"><a href=\"#四个配置文件替换如下\" class=\"headerlink\" title=\"四个配置文件替换如下\"></a>四个配置文件替换如下</h2><h3 id=\"Mater1\"><a href=\"#Mater1\" class=\"headerlink\" title=\"Mater1\"></a>Mater1</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\">datadir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20/data </span><br><span class=\"line\">character-set-server=utf8 </span><br><span class=\"line\">lower-case-table-names=1 </span><br><span class=\"line\">default_authentication_plugin=mysql_native_password </span><br><span class=\"line\"><span class=\"comment\"># 主从复制-主机1配置 </span></span><br><span class=\"line\"><span class=\"comment\"># 主服务器唯一ID </span></span><br><span class=\"line\">server-id=1 </span><br><span class=\"line\"><span class=\"comment\"># 启用二进制日志 </span></span><br><span class=\"line\">log-bin=mysql-bin </span><br><span class=\"line\"><span class=\"comment\"># 设置不要复制的数据库(可设置多个) </span></span><br><span class=\"line\">binlog-ignore-db=sys </span><br><span class=\"line\">binlog-ignore-db=mysql </span><br><span class=\"line\">binlog-ignore-db=information_schema </span><br><span class=\"line\">binlog-ignore-db=performance_schema </span><br><span class=\"line\"><span class=\"comment\"># 设置需要复制的数据库(可设置多个) </span></span><br><span class=\"line\">binlog-do-db=<span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 设置logbin格式 </span></span><br><span class=\"line\">binlog_format=STATEMENT </span><br><span class=\"line\"><span class=\"comment\"># 写入操作更新二进制日志文件 </span></span><br><span class=\"line\">log-slave-updates </span><br><span class=\"line\"><span class=\"comment\"># 自增长字段起始值，默认值为1，取值范围：1 ~ 65535 </span></span><br><span class=\"line\">auto-increment-increment=2 </span><br><span class=\"line\"><span class=\"comment\"># 自增长字段递增量，取值范围：1 ~ 65535 </span></span><br><span class=\"line\">auto-increment-offset=1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mater2\"><a href=\"#Mater2\" class=\"headerlink\" title=\"Mater2\"></a>Mater2</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\">datadir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20/data </span><br><span class=\"line\">character-set-server=utf8 </span><br><span class=\"line\">lower-case-table-names=1 </span><br><span class=\"line\">default_authentication_plugin=mysql_native_password </span><br><span class=\"line\"><span class=\"comment\"># 主从复制-主机2配置 </span></span><br><span class=\"line\"><span class=\"comment\"># 主服务器唯一ID </span></span><br><span class=\"line\">server-id=3 </span><br><span class=\"line\"><span class=\"comment\"># 启用二进制日志 </span></span><br><span class=\"line\">log-bin=mysql-bin </span><br><span class=\"line\"><span class=\"comment\"># 设置不要复制的数据库(可设置多个) </span></span><br><span class=\"line\">binlog-ignore-db=sys </span><br><span class=\"line\">binlog-ignore-db=mysql </span><br><span class=\"line\">binlog-ignore-db=information_schema </span><br><span class=\"line\">binlog-ignore-db=performance_schema </span><br><span class=\"line\"><span class=\"comment\"># 设置需要复制的数据库(可设置多个) </span></span><br><span class=\"line\">binlog-do-db=<span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 设置logbin格式 </span></span><br><span class=\"line\">binlog_format=STATEMENT </span><br><span class=\"line\"><span class=\"comment\"># 写入操作更新二进制日志文件 </span></span><br><span class=\"line\">log-slave-updates </span><br><span class=\"line\"><span class=\"comment\"># 自增长字段起始值，默认值为1，取值范围：1 ~ 65535 </span></span><br><span class=\"line\">auto-increment-increment=2 </span><br><span class=\"line\"><span class=\"comment\"># 自增长字段递增量，取值范围：1 ~ 65535 </span></span><br><span class=\"line\">auto-increment-offset=2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Slave1\"><a href=\"#Slave1\" class=\"headerlink\" title=\"Slave1\"></a>Slave1</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\">datadir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20/data </span><br><span class=\"line\">character-set-server=utf8 </span><br><span class=\"line\">lower-case-table-names=1 </span><br><span class=\"line\">default_authentication_plugin=mysql_native_password </span><br><span class=\"line\"><span class=\"comment\"># 主从复制-从机1配置 </span></span><br><span class=\"line\"><span class=\"comment\"># 从服务器唯一ID </span></span><br><span class=\"line\">server-id=2 </span><br><span class=\"line\"><span class=\"comment\"># 启用中继日志 </span></span><br><span class=\"line\">relay-log=mysql-relay</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Slave2\"><a href=\"#Slave2\" class=\"headerlink\" title=\"Slave2\"></a>Slave2</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\">datadir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20/data </span><br><span class=\"line\">character-set-server=utf8 </span><br><span class=\"line\">lower-case-table-names=1 </span><br><span class=\"line\">default_authentication_plugin=mysql_native_password </span><br><span class=\"line\"><span class=\"comment\"># 主从复制-从机2配置 </span></span><br><span class=\"line\"><span class=\"comment\"># 从服务器唯一ID </span></span><br><span class=\"line\">server-id=4 </span><br><span class=\"line\"><span class=\"comment\"># 启用中继日志 </span></span><br><span class=\"line\">relay-log=mysql-relay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动及测试\"><a href=\"#启动及测试\" class=\"headerlink\" title=\"启动及测试\"></a>启动及测试</h2><ol>\n<li><p>双主双从数据库均重启</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">service restart mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>四台服务器均关闭防火墙或启用3306端口访问权限</p>\n</li>\n<li><p>两台主数据库分别创建用户slave并授权</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 创建用户 </span></span><br><span class=\"line\">create user <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified with mysql_native_password by <span class=\"string\">&#x27;password&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 授权 </span></span><br><span class=\"line\">grant replication slave on *.* to <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 刷新权限 </span></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure></li>\n<li><p>主从数据库验证slave用户是否可用</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主数据库1服务器测试 </span></span><br><span class=\"line\">mysql -uslave -p -h192.168.133.130 -P3306 </span><br><span class=\"line\">mysql -uslave -p -h192.168.133.131 -P3306 </span><br><span class=\"line\"><span class=\"comment\"># 从数据库1服务器测试主数据库1 </span></span><br><span class=\"line\">mysql -uroot -p -h192.168.133.129 -P3306 </span><br><span class=\"line\"><span class=\"comment\"># 主数据库2服务器测试 </span></span><br><span class=\"line\">mysql -uslave -p -h192.168.133.129 -P3306 </span><br><span class=\"line\">mysql -uslave -p -h192.168.133.132 -P3306 </span><br><span class=\"line\"><span class=\"comment\"># 从数据库1服务器测试主数据库1 </span></span><br><span class=\"line\">mysql -uroot -p -h192.168.133.131 -P3306</span><br></pre></td></tr></table></figure></li>\n<li><p>两台主数据库查询服务ID及Master状态</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 查询server_id是否可配置文件中一致 </span></span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;server_id&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 若不一致，可设置临时ID（重启失效） </span></span><br><span class=\"line\"><span class=\"comment\"># 主数据库1 </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> global server_id = 1; </span><br><span class=\"line\"><span class=\"comment\"># 主数据库2 </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> global server_id = 3; </span><br><span class=\"line\"><span class=\"comment\"># 查询Master状态，并记录 File 和 Position 的值 </span></span><br><span class=\"line\">show master status; </span><br><span class=\"line\"><span class=\"comment\"># 注意：执行完此步骤后退出主数据库，防止再次操作导致 File 和 Position 的值发生变化</span></span><br></pre></td></tr></table></figure></li>\n<li><p>从数据库1中设置主数据库1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 查询server_id是否可配置文件中一致 </span></span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;server_id&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 若不一致，可设置临时ID（重启失效） </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> global server_id = 2; </span><br><span class=\"line\"><span class=\"comment\"># 设置主数据库参数 </span></span><br><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;192.168.133.129&#x27;</span>,master_port=3306,master_user=<span class=\"string\">&#x27;slave&#x27;</span>,master_password=<span class=\"string\">&#x27;password&#x27;</span>,master_log_file=<span class=\"string\">&#x27;mysql-bin.000003&#x27;</span>,master_log_pos=156; </span><br><span class=\"line\"><span class=\"comment\"># 开始同步 </span></span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 若出现错误，则停止同步，重置后再次启动 </span></span><br><span class=\"line\">stop slave; </span><br><span class=\"line\">reset slave; </span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 查询Slave状态 </span></span><br><span class=\"line\">show slave status\\G </span><br><span class=\"line\"><span class=\"comment\"># 查看是否配置成功 # 查看参数 Slave_IO_Running 和 Slave_SQL_Running 是否都为yes，则证明配置成功。若为no，则需要查看对应的 Last_IO_Error 或 Last_SQL_Error 的异常值</span></span><br></pre></td></tr></table></figure></li>\n<li><p>从数据库2中设置主数据库2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 查询server_id是否可配置文件中一致 </span></span><br><span class=\"line\">show variables like <span class=\"string\">&#x27;server_id&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 若不一致，可设置临时ID（重启失效） </span></span><br><span class=\"line\"><span class=\"built_in\">set</span> global server_id = 4; </span><br><span class=\"line\"><span class=\"comment\"># 设置主数据参数 </span></span><br><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;192.168.133.131&#x27;</span>,master_port=3306,master_user=<span class=\"string\">&#x27;slave&#x27;</span>,master_password=<span class=\"string\">&#x27;password&#x27;</span>,master_log_file=<span class=\"string\">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos=156; </span><br><span class=\"line\"><span class=\"comment\"># 开始同步 </span></span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 若出现错误，则停止同步，重置后再次启动 </span></span><br><span class=\"line\">stop slave; </span><br><span class=\"line\">reset slave; </span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 查询Slave状态 </span></span><br><span class=\"line\">show slave status\\G </span><br><span class=\"line\"><span class=\"comment\"># 查看是否配置成功 </span></span><br><span class=\"line\"><span class=\"comment\"># 查看参数 Slave_IO_Running 和 Slave_SQL_Running 是否都为yes，则证明配置成功。若为no，则需要查看对应的 Last_IO_Error 或 Last_SQL_Error 的异常值。</span></span><br></pre></td></tr></table></figure></li>\n<li><p>主数据库1中设置主数据库2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 设置主数据库参数 </span></span><br><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;192.168.133.131&#x27;</span>,master_port=3306,master_user=<span class=\"string\">&#x27;slave&#x27;</span>,master_password=<span class=\"string\">&#x27;password&#x27;</span>,master_log_file=<span class=\"string\">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos=156; </span><br><span class=\"line\"><span class=\"comment\"># 开始同步 </span></span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 若出现错误，则停止同步，重置后再次启动 </span></span><br><span class=\"line\">stop slave; </span><br><span class=\"line\">reset slave; </span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 查询Slave状态 show slave status\\G # 查看是否配置成功 </span></span><br><span class=\"line\"><span class=\"comment\"># 查看参数 Slave_IO_Running 和 Slave_SQL_Running 是否都为yes，则证明配置成功。若为no，则需要查看对应的 Last_IO_Error 或 Last_SQL_Error 的异常值。</span></span><br></pre></td></tr></table></figure></li>\n<li><p>主数据库2中设置主数据库1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录 </span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 设置主数据库参数 </span></span><br><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;192.168.133.129&#x27;</span>,master_port=3306,master_user=<span class=\"string\">&#x27;slave&#x27;</span>,master_password=<span class=\"string\">&#x27;password&#x27;</span>,master_log_file=<span class=\"string\">&#x27;mysql-bin.000003&#x27;</span>,master_log_pos=156; </span><br><span class=\"line\"><span class=\"comment\"># 开始同步 </span></span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 若出现错误，则停止同步，重置后再次启动 </span></span><br><span class=\"line\">stop slave; </span><br><span class=\"line\">reset slave; </span><br><span class=\"line\">start slave; </span><br><span class=\"line\"><span class=\"comment\"># 查询Slave状态 </span></span><br><span class=\"line\">show slave status\\G </span><br><span class=\"line\"><span class=\"comment\"># 查看是否配置成功 </span></span><br><span class=\"line\"><span class=\"comment\"># 查看参数 Slave_IO_Running 和 Slave_SQL_Running 是否都为yes，则证明配置成功。若为no，则需要查看对应的 Last_IO_Error 或 Last_SQL_Error 的异常值。</span></span><br></pre></td></tr></table></figure></li>\n<li><p>测试</p>\n<p>​    通过工具连接双主双从数据库或者在服务器连接。  注意：主数据库的配置文件中配置了需要同步的数据库，因此只会同步配置的数据库，不配置则同步全部。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在主数据库1创建数据库test </span></span><br><span class=\"line\">create database <span class=\"built_in\">test</span>; </span><br><span class=\"line\"><span class=\"comment\"># 其他三个数据库查看 </span></span><br><span class=\"line\">show databases; </span><br><span class=\"line\"><span class=\"comment\"># 在主数据库1创建表 </span></span><br><span class=\"line\">use <span class=\"built_in\">test</span>; </span><br><span class=\"line\">create table t_user(id int, name varchar(20)); </span><br><span class=\"line\"><span class=\"comment\"># 插入数据 </span></span><br><span class=\"line\">insert into t_user values(1, <span class=\"string\">&#x27;C3Stones&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\"># 其他三个数据库查看 </span></span><br><span class=\"line\">use <span class=\"built_in\">test</span>; </span><br><span class=\"line\">select * from t_user; </span><br><span class=\"line\"><span class=\"comment\"># 其他删改查操作请自行测试</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["mysql"],"tags":["mysql"]},{"title":"mysql安装配置","url":"/2021/09/02/db-resource/mysql/mysql-base/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#mysql8x%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE\">Mysql8.x二进制安装配置</a><ul>\n<li><a href=\"#%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%8E%8B\">下载解压</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%89%E8%A3%85\">初始化安装</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE\">配置</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8-%E6%8E%88%E6%9D%83\">启动、授权</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"mysql8x二进制安装配置\">Mysql8.x二进制安装配置</span></h1><span id=\"more\"></span>\n\n<h2><span id=\"下载解压\">下载解压</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户及用户组 </span></span><br><span class=\"line\">$&gt; groupadd mysql</span><br><span class=\"line\">$&gt; useradd -r -g mysql -s /bin/<span class=\"literal\">false</span> mysql</span><br><span class=\"line\"><span class=\"comment\"># 进入目录 </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt </span><br><span class=\"line\"><span class=\"comment\"># 下载安装包 </span></span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz </span><br><span class=\"line\"><span class=\"comment\"># 解压 </span></span><br><span class=\"line\">tar -xvf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz </span><br><span class=\"line\"><span class=\"comment\"># 拷贝到/usr/local </span></span><br><span class=\"line\">mv /opt/mysql-8.0.20-linux-glibc2.12-x86_64 /usr/<span class=\"built_in\">local</span> </span><br><span class=\"line\"><span class=\"comment\"># 进入/usr/local </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span> </span><br><span class=\"line\"><span class=\"comment\"># 修改名称为mysql-8.0.20 （不推荐，一般创建连接）</span></span><br><span class=\"line\">mv mysql-8.0.20-linux-glibc2.12-x86_64 mysql-8.0.20 </span><br><span class=\"line\"><span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">ln -s mysql-8.0.20-linux-glibc2.12-x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建存放数据文件夹 </span></span><br><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/mysql/data </span><br><span class=\"line\"><span class=\"comment\"># 授权 </span></span><br><span class=\"line\">chown -R mysql.mysql /usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (官网参考)</span></span><br><span class=\"line\">$&gt; mkdir mysql-files</span><br><span class=\"line\">$&gt; chown mysql:mysql mysql-files</span><br><span class=\"line\">$&gt; chmod 750 mysql-files</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"初始化安装\">初始化安装</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置环境变量</span></span><br><span class=\"line\"><span class=\"comment\"># 临时配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/mysql/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化数据库(记录临时密码) </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql/ </span><br><span class=\"line\">mysqld --user=mysql --lower-case-table-names=1 --basedir=/usr/<span class=\"built_in\">local</span>/mysql/ --datadir=/usr/<span class=\"built_in\">local</span>/mysql/data/ --initialize ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将mysql添加到系统服务(官网)</span></span><br><span class=\"line\">cp support-files/mysql.server /etc/init.d/mysql.server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立Mysql服务,授权以及添加服务</span></span><br><span class=\"line\">cp -a support-files/mysql.server /etc/init.d/mysql </span><br><span class=\"line\">chmod +x /etc/init.d/mysql </span><br><span class=\"line\">chkconfig --add mysql </span><br><span class=\"line\"><span class=\"comment\"># 检查服务是否生效 </span></span><br><span class=\"line\">chkconfig --list mysql</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"配置\">配置</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置my.cnf </span></span><br><span class=\"line\">vi /etc/my.cnf </span><br><span class=\"line\"><span class=\"comment\"># 清空，使用下面内容 </span></span><br><span class=\"line\"><span class=\"comment\">################### 文件内容开始 ###################</span></span><br><span class=\"line\">[mysqld] </span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20 </span><br><span class=\"line\">datadir=/usr/<span class=\"built_in\">local</span>/mysql-8.0.20/data </span><br><span class=\"line\">character-set-server=utf8 </span><br><span class=\"line\">lower-case-table-names=1 </span><br><span class=\"line\">default_authentication_plugin=mysql_native_password </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">################### 文件内容结束 ###################</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"启动-授权\">启动、授权</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动、停止、重启 </span></span><br><span class=\"line\">service mysql start </span><br><span class=\"line\">service mysql stop </span><br><span class=\"line\">service mysql restart </span><br><span class=\"line\"><span class=\"comment\"># 登录（使用临时密码）</span></span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 修改密码 </span></span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">&#x27;new password&#x27;</span>; </span><br><span class=\"line\"><span class=\"comment\"># 退出，使用新密码登录 </span></span><br><span class=\"line\">quit </span><br><span class=\"line\">mysql -uroot -p </span><br><span class=\"line\"><span class=\"comment\"># 修改root权限，增加远程连接 </span></span><br><span class=\"line\">use mysql </span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host =<span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> user=<span class=\"string\">&#x27;root&#x27;</span>; </span><br><span class=\"line\">alter user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified with mysql_native_password by <span class=\"string\">&#x27;new password&#x27;</span>; </span><br><span class=\"line\">flush privileges; </span><br><span class=\"line\"><span class=\"comment\"># 退出 quit</span></span><br></pre></td></tr></table></figure>\n","categories":["mysql"],"tags":["mysql"]},{"title":"Shardingsphere-proxy使用","url":"/2021/11/02/db-resource/mysql/mysql-base/shardingsphere-proxy/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#shardingsphere-proxy%E5%AE%9E%E7%8E%B0%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8F%8A%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB\">Shardingsphere-proxy实现分库分表及读写分离</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE\">配置</a><ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E\">配置文件说明</a></li>\n<li><a href=\"#shardingsphere-proxy%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE\">shardingsphere-proxy用户配置</a></li>\n<li><a href=\"#%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE\">高可用配置</a></li>\n<li><a href=\"#%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E9%85%8D%E7%BD%AE%E6%9A%82%E6%9C%AA%E9%AA%8C%E8%AF%81\">分库分表配置（暂未验证）</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8\">启动</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"shardingsphere-proxy实现分库分表及读写分离\">Shardingsphere-proxy实现分库分表及读写分离</span></h1><h1><span id=\"安装\">安装</span></h1><p>shardingsphere-proxy目前只支持mysql和postgresql</p>\n<p>官网下载安装包解压即可。</p>\n<p>这里介绍5.0版本的安装配置及使用。</p>\n<p>如果是使用mysql,需要在其官网下载对应的驱动，放到lib目录下。</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"配置\">配置</span></h1><h2><span id=\"配置文件说明\">配置文件说明</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HA配置</span></span><br><span class=\"line\">config-database-discovery.yaml</span><br><span class=\"line\">config-encrypt.yaml</span><br><span class=\"line\"><span class=\"comment\"># 读写分离配置</span></span><br><span class=\"line\">config-readwrite-splitting.yaml</span><br><span class=\"line\">config-shadow.yaml</span><br><span class=\"line\"><span class=\"comment\"># 分库分表及规则配置</span></span><br><span class=\"line\">config-sharding.yaml</span><br><span class=\"line\"><span class=\"comment\"># 日志配置</span></span><br><span class=\"line\">logback.xml</span><br><span class=\"line\"><span class=\"comment\"># shardingsphere服务配置，配置用户名密码及zk注册中心</span></span><br><span class=\"line\">server.yaml</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"shardingsphere-proxy用户配置\">shardingsphere-proxy用户配置</span></h2><p>配置server.yaml文件</p>\n<p>这里先配置用户名密码用于测试，zk暂不配：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"type\">!AUTHORITY</span></span><br><span class=\"line\">    <span class=\"attr\">users:</span> <span class=\"comment\"># 用户</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">root@%:root</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sharding@:sharding</span></span><br><span class=\"line\">    <span class=\"attr\">provider:</span> <span class=\"comment\">#权限</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">ALL_PRIVILEGES_PERMITTED</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"type\">!TRANSACTION</span> <span class=\"comment\"># 事务</span></span><br><span class=\"line\">    <span class=\"attr\">defaultType:</span> <span class=\"string\">XA</span></span><br><span class=\"line\">    <span class=\"attr\">providerType:</span> <span class=\"string\">Atomikos</span></span><br></pre></td></tr></table></figure>\n\n<p>其它配置项根据示例及官网文档进行配置；</p>\n<h2><span id=\"高可用配置\">高可用配置</span></h2><p>配置config-database-discovery.yaml</p>\n<p>这里暂时配置一个数据源用于测试：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 映射到shardingsphere中的数据库名称，例如真实mysql数据库为test，这里配置后连接shardingsphere后显示配置的名称</span></span><br><span class=\"line\"><span class=\"attr\">schemaName:</span> <span class=\"string\">database_discovery_db</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">dataSources:</span></span><br><span class=\"line\">  <span class=\"attr\">ds_0:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">connectionTimeoutMilliseconds:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"attr\">idleTimeoutMilliseconds:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"attr\">maxLifetimeMilliseconds:</span> <span class=\"number\">1800000</span></span><br><span class=\"line\">    <span class=\"attr\">maxPoolSize:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">minPoolSize:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>暂时配置这两个文件，然后启动shardingsphere.</p>\n<h2><span id=\"分库分表配置暂未验证\">分库分表配置（暂未验证）</span></h2><p>编辑 conf下文件，config-sharding.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对外数据库名称</span></span><br><span class=\"line\"><span class=\"attr\">schemaName:</span> <span class=\"string\">sharding_db</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库链接公共参数</span></span><br><span class=\"line\"><span class=\"attr\">dataSourceCommon:</span></span><br><span class=\"line\"> <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\"> <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"> <span class=\"attr\">connectionTimeoutMilliseconds:</span> <span class=\"number\">30000</span></span><br><span class=\"line\"> <span class=\"attr\">idleTimeoutMilliseconds:</span> <span class=\"number\">60000</span></span><br><span class=\"line\"> <span class=\"attr\">maxLifetimeMilliseconds:</span> <span class=\"number\">1800000</span></span><br><span class=\"line\"> <span class=\"attr\">maxPoolSize:</span> <span class=\"number\">50</span></span><br><span class=\"line\"> <span class=\"attr\">minPoolSize:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">maintenanceIntervalMilliseconds:</span> <span class=\"number\">30000</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库地址，这里配置了两个库</span></span><br><span class=\"line\"><span class=\"attr\">dataSources:</span></span><br><span class=\"line\"> <span class=\"attr\">ds_0:</span></span><br><span class=\"line\">   <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class=\"line\"> <span class=\"attr\">ds_1:</span></span><br><span class=\"line\">   <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"comment\"># 分片规则</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"type\">!SHARDING</span></span><br><span class=\"line\"> <span class=\"attr\">tables:</span></span><br><span class=\"line\">   <span class=\"comment\"># 虚拟表名称，最后登陆 proxy之后，sharding_db库下只有一张表 test（我这里只分了一个表，用于测试）</span></span><br><span class=\"line\">   <span class=\"attr\">test:</span></span><br><span class=\"line\">     <span class=\"comment\"># ds_$&#123;0..1&#125; 分库规则，库索引从0到1，一共两个，前缀为：ds_， test，分成3张表，索引从0到2，前缀为：test_</span></span><br><span class=\"line\">     <span class=\"attr\">actualDataNodes:</span> <span class=\"string\">ds_$&#123;0..1&#125;.test_$&#123;0..2&#125;</span></span><br><span class=\"line\">     <span class=\"attr\">tableStrategy:</span></span><br><span class=\"line\">       <span class=\"attr\">standard:</span></span><br><span class=\"line\">         <span class=\"comment\"># 分片键</span></span><br><span class=\"line\">         <span class=\"attr\">shardingColumn:</span> <span class=\"string\">id</span></span><br><span class=\"line\">         <span class=\"attr\">shardingAlgorithmName:</span> <span class=\"string\">test_inline</span></span><br><span class=\"line\">     <span class=\"attr\">keyGenerateStrategy:</span></span><br><span class=\"line\">       <span class=\"attr\">column:</span> <span class=\"string\">id</span></span><br><span class=\"line\">       <span class=\"attr\">keyGeneratorName:</span> <span class=\"string\">snowflake</span>  <span class=\"comment\">#主键生成策略 -- 雪花算法</span></span><br><span class=\"line\"><span class=\"comment\"># 默认数据库分片规则</span></span><br><span class=\"line\"> <span class=\"attr\">defaultDatabaseStrategy:</span></span><br><span class=\"line\">   <span class=\"attr\">standard:</span></span><br><span class=\"line\">     <span class=\"comment\"># 依据 id 进行分片</span></span><br><span class=\"line\">     <span class=\"attr\">shardingColumn:</span> <span class=\"string\">id</span></span><br><span class=\"line\">     <span class=\"attr\">shardingAlgorithmName:</span> <span class=\"string\">database_inline</span></span><br><span class=\"line\"> <span class=\"attr\">defaultTableStrategy:</span></span><br><span class=\"line\">   <span class=\"attr\">none:</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">shardingAlgorithms:</span></span><br><span class=\"line\">   <span class=\"attr\">database_inline:</span></span><br><span class=\"line\">     <span class=\"attr\">type:</span> <span class=\"string\">INLINE</span></span><br><span class=\"line\">     <span class=\"attr\">props:</span></span><br><span class=\"line\">       <span class=\"comment\"># 数据库分片规则， id取模2，结果有 0 和 1，路由到 0 和 1这两个数据库</span></span><br><span class=\"line\">       <span class=\"attr\">algorithm-expression:</span> <span class=\"string\">ds_$&#123;id</span> <span class=\"string\">%</span> <span class=\"number\">2</span><span class=\"string\">&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">test_inline:</span></span><br><span class=\"line\">     <span class=\"attr\">type:</span> <span class=\"string\">INLINE</span></span><br><span class=\"line\">     <span class=\"attr\">props:</span></span><br><span class=\"line\">       <span class=\"comment\"># 数据库表分表规则：id 模 3，结果有：0、1、2, 得到 test_0、test_1、test_2这三张表</span></span><br><span class=\"line\">       <span class=\"attr\">algorithm-expression:</span> <span class=\"string\">test_$&#123;id</span> <span class=\"string\">%</span> <span class=\"number\">3</span><span class=\"string\">&#125;</span></span><br><span class=\"line\"> <span class=\"attr\">keyGenerators:</span></span><br><span class=\"line\">   <span class=\"attr\">snowflake:</span></span><br><span class=\"line\">     <span class=\"attr\">type:</span> <span class=\"string\">SNOWFLAKE</span></span><br><span class=\"line\">     <span class=\"attr\">props:</span></span><br><span class=\"line\">       <span class=\"attr\">worker-id:</span> <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"启动\">启动</span></h1><p>执行如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">sh bin/start.sh</span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">sh bin/stop.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tail -f stdout.log</span><br><span class=\"line\"><span class=\"comment\"># 如果出现下面的日志则启动成功</span></span><br><span class=\"line\">o.a.s.p.frontend.ShardingSphereProxy - ShardingSphere-Proxy start success.， </span><br></pre></td></tr></table></figure>","categories":["mysql"],"tags":["mysql"]},{"title":"them-config","url":"/2021/07/15/tools/%E5%8D%9A%E5%AE%A2%E5%8F%8A%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/hexo/hexo-them-config/","content":"<h1><span id=\"hexo-theme-indigo-plus\">hexo-theme-indigo-plus</span></h1><blockquote>\n<p>基于 <a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-indigo</a> 主题进行优化，效果展示参见 <a href=\"https://abelsu7.top/\">我的博客</a></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<ul>\n<li><a href=\"#new-feature\">New Feature</a></li>\n<li><a href=\"#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">快速开始</a><ul>\n<li><a href=\"#1-%E5%AE%89%E8%A3%85-hexo\">1. 安装 Hexo</a></li>\n<li><a href=\"#2-%E8%AE%BE%E7%BD%AE%E8%AF%AD%E8%A8%80%E5%B9%B6%E7%A6%81%E7%94%A8-highlightjs\">2. 设置语言并禁用 highlight.js</a></li>\n<li><a href=\"#3-%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85\">3. 主题安装</a></li>\n<li><a href=\"#4-%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85\">4. 依赖安装</a><ul>\n<li><a href=\"#less\">Less</a></li>\n<li><a href=\"#feed\">Feed</a></li>\n<li><a href=\"#json-content\">JSON-Content</a></li>\n<li><a href=\"#qr-code\">QR-Code</a></li>\n<li><a href=\"#deploy\">Deploy</a></li>\n<li><a href=\"#kramed\">Kramed</a></li>\n<li><a href=\"#asset%E5%8F%AF%E9%80%89\">Asset（可选）</a></li>\n<li><a href=\"#recommend%E5%8F%AF%E9%80%89\">Recommend（可选）</a></li>\n<li><a href=\"#douban%E5%8F%AF%E9%80%89\">Douban（可选）</a></li>\n<li><a href=\"#baidu-url-submit%E5%8F%AF%E9%80%89\">Baidu URL Submit（可选）</a></li>\n<li><a href=\"#sitemap%E5%8F%AF%E9%80%89\">Sitemap（可选）</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E4%BF%AE%E6%94%B9-scaffolds\">5. 修改 scaffolds</a></li>\n<li><a href=\"#6-%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6\">6. 文章置顶</a></li>\n<li><a href=\"#7-%E6%8C%89%E9%9C%80%E5%BC%80%E5%90%AF-mathjax\">7. 按需开启 MathJax</a></li>\n<li><a href=\"#8-%E5%BC%80%E5%90%AF%E6%A0%87%E7%AD%BE%E9%A1%B5\">8. 开启标签页</a></li>\n<li><a href=\"#9-%E5%BC%80%E5%90%AF%E5%88%86%E7%B1%BB%E9%A1%B5\">9. 开启分类页</a></li>\n<li><a href=\"#10-%E5%BC%80%E5%90%AF%E5%85%B3%E4%BA%8E%E9%A1%B5\">10. 开启关于页</a></li>\n<li><a href=\"#11-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\">11. 使用示例</a></li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"new-feature\">New Feature</span></h2><ul>\n<li>添加<strong>直达评论悬浮按钮</strong></li>\n<li><strong>归档、分类、标签页面</strong>添加<strong>文章计数</strong></li>\n<li><strong>各个分类、标签</strong>添加单独的<strong>文章计数</strong></li>\n<li>修改打赏的<strong>切换按钮样式</strong></li>\n<li>优化 <strong>Valine</strong> 在 hexo-theme-indigo 中的<strong>显示效果</strong></li>\n<li>优化 <strong>hexo-douban</strong> 在 hexo-theme-indigo 中的<strong>显示效果</strong></li>\n<li>使用 <strong>prism.js</strong> 替换 highlight.js 实现<strong>代码高亮</strong>，并在<code>_config.yml</code>中添加代码主题配置项</li>\n<li>可控制<strong>仅在单个 post 中引入</strong><code>MathJax.js</code></li>\n<li>Change ul list-style and toc bottom padding</li>\n<li>更新 busuanzi CDN 地址</li>\n<li><code>tags</code>及<code>categories</code>页面按照<strong>字母顺序</strong>排序</li>\n<li>自定义<strong>文章置顶</strong></li>\n<li>集成<strong>百度自动推送</strong></li>\n<li>敬请期待</li>\n</ul>\n<h2><span id=\"快速开始\">快速开始</span></h2><h3><span id=\"1-安装-hexo\">1. 安装 Hexo</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"2-设置语言并禁用-highlightjs\">2. 设置语言并禁用 highlight.js</span></h3><p>修改<strong>博客根目录</strong>下的<code>_config.yml</code>，设置<code>language</code>为<code>zh-CN</code>，并将<code>highlight</code>设置为<code>false</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Keep</span> <span class=\"string\">Coding</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">苏易北</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">Abel</span> <span class=\"string\">Su的编程笔记</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">KVM,Go,Docker,Kubernetes,Linux,虚拟化,云计算</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Abel</span> <span class=\"string\">Su</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># line_number: true</span></span><br><span class=\"line\">  <span class=\"comment\"># auto_detect: false</span></span><br><span class=\"line\">  <span class=\"comment\"># tab_replace: </span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"3-主题安装\">3. 主题安装</span></h3><p>安装需确认你的 <strong>Hexo</strong> 版本在<code>3.0</code>以上，以及 <strong>Node</strong> 版本为<code>6.x</code>以上，在<strong>博客根目录</strong>，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/abelsu7/hexo-theme-indigo-plus.git themes/indigo-plus</span><br></pre></td></tr></table></figure>\n\n<p>之后在<strong>博客根目录</strong>下的<code>_config.yml</code>中指定使用主题<code>indigo-plus</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">indigo-plus</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"4-依赖安装\">4. 依赖安装</span></h3><p>还是在<strong>博客根目录</strong>下，如果以下插件已安装过，则无需再次安装。</p>\n<h4><span id=\"less\">Less</span></h4><p>主题默认使用<code>less</code>作为<code>css</code><strong>预处理工具</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-less --save</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"feed\">Feed</span></h4><p>用于生成<code>rss</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"json-content\">JSON-Content</span></h4><p>用于生成静态站点数据，用作<strong>站内搜索</strong>的数据源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-json-content --save</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"qr-code\">QR-Code</span></h4><blockquote>\n<p><strong>可选</strong>，不安装时会请求<code>jiathis API</code>生成二维码</p>\n</blockquote>\n<p>用于生成<strong>微信分享二维码</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-helper-qrcode --save</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"deploy\">Deploy</span></h4><p>可以使用<code>hexo deploy</code>命令<strong>部署博客</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>hexo g</code>生成<code>public</code>目录后，使用<code>hexo deploy</code>即可根据博客根目录下<code>_config.yml</code>中的配置部署博客。当有多个<code>deploy</code>及<code>repo</code>时，示例配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span></span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">git@github.com:abelsu7/blog.git,master</span></span><br><span class=\"line\">    <span class=\"attr\">coding:</span> <span class=\"string\">git@git.coding.net:abelsu7/blog.git,coding-pages</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">baidu_url_submitter</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：若同时安装了<code>hexo-douban</code>插件，则无法使用<code>hexo d</code>这种缩写形式，而必须指明<code>hexo deploy</code>或<code>hexo douban</code></p>\n</blockquote>\n<h4><span id=\"kramed\">Kramed</span></h4><p>使用<code>hexo-renderer-kramed</code>替换默认的<code>hexo-renderer-marked</code>渲染引擎，否则使用<code>prism.js</code>高亮代码时会出现问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"asset可选\">Asset（可选）</span></h4><p>使用 <a href=\"https://github.com/dangxuandev/hexo-asset-image\">hexo-asset-image</a> 自动生成文章对应的同名<strong>图片 asset 目录</strong>。</p>\n<p>首先在<strong>博客根目录</strong>下的<code>_config.yml</code>中，将<code>post_asset_folder</code>设置为<code>true</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\"># Writing</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:title.md</span> <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\"><span class=\"attr\">default_layout:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 修改这里为 true</span></span><br><span class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># line_number: true</span></span><br><span class=\"line\">  <span class=\"comment\"># auto_detect: false</span></span><br><span class=\"line\">  <span class=\"comment\"># tab_replace:</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>之后在<strong>博客根目录</strong>下安装<code>hexo-asset-image</code>：</p>\n<blockquote>\n<p>注意：若安装最新版的<code>hexo-asset-image</code>，使用相对路径引用图片时貌似会出现图片路径错误的问题，参见 <a href=\"https://850552586.github.io/2018/11/15/hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/\">hexo 引用本地图片无法显示 | Ericam_blog</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image@<span class=\"number\">0.0</span><span class=\"number\">.3</span> --save</span><br></pre></td></tr></table></figure>\n\n<p>例如使用以下命令新建<code>post</code>文章：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post MacGesture2-Publish</span><br></pre></td></tr></table></figure>\n\n<p>就会在<code>source/_posts/</code>目录下生成同名的图片 asset 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">MacGesture2-Publish</span><br><span class=\"line\">├── apppicker.jpg</span><br><span class=\"line\">├── logo.jpg</span><br><span class=\"line\">└── rules.jpg</span><br><span class=\"line\">MacGesture2-Publish.md</span><br></pre></td></tr></table></figure>\n\n<p>只需要文章中使用<code>![logo](logo.jpg)</code>，即可引用图片。</p>\n<h4><span id=\"recommend可选\">Recommend（可选）</span></h4><p>使用 <a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo-recommended-posts</a> 生成<strong>相关文章推荐列表</strong>。</p>\n<p>首先在<strong>博客根目录</strong>下安装插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-recommended-posts --save</span><br></pre></td></tr></table></figure>\n\n<p>之后在<strong>博客根目录</strong>下的<code>_config.yml</code>中添加以下内容以<strong>覆盖默认配置</strong>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo recommended posts</span></span><br><span class=\"line\"><span class=\"attr\">recommended_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span> <span class=\"string\">https://api.truelaurel.com</span> <span class=\"comment\">#后端推荐服务器地址</span></span><br><span class=\"line\">  <span class=\"attr\">timeoutInMillis:</span> <span class=\"number\">15000</span> <span class=\"comment\">#服务时长，超过此时长，则使用离线推荐模式</span></span><br><span class=\"line\">  <span class=\"attr\">internalLinks:</span> <span class=\"number\">3</span> <span class=\"comment\">#内部文章数量</span></span><br><span class=\"line\">  <span class=\"attr\">externalLinks:</span> <span class=\"number\">2</span> <span class=\"comment\">#外部文章数量</span></span><br><span class=\"line\">  <span class=\"attr\">fixedNumber:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">autoDisplay:</span> <span class=\"literal\">true</span> <span class=\"comment\">#自动在文章底部显示推荐文章</span></span><br><span class=\"line\">  <span class=\"attr\">excludePattern:</span> []</span><br><span class=\"line\">  <span class=\"attr\">titleHtml:</span> <span class=\"string\">&lt;strong&gt;🚩推荐阅读&lt;/strong&gt;（由&lt;a</span> <span class=\"string\">href=&quot;https://github.com/huiwang/hexo-recommended-posts&quot;&gt;hexo文章推荐插件&lt;/a&gt;驱动）</span> <span class=\"comment\">#自定义标题</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>具体参数设置参见 <a href=\"https://github.com/huiwang/hexo-recommended-posts\">hexo-recommended-posts</a> 文档</p>\n</blockquote>\n<p>只需在<code>hexo g</code>命令前，在<strong>博客根目录</strong>使用以下命令<strong>获取推荐文章列表</strong>，存放于<code>source\\_data\\recommended_posts.json</code>中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo recommend</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"douban可选\">Douban（可选）</span></h4><p>使用 <a href=\"https://github.com/mythsman/hexo-douban\">hexo-douban</a> 生成<strong>豆瓣电影、读书、游戏</strong>展示页面。</p>\n<p>首先在<strong>博客根目录</strong>下安装插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-douban --save</span><br></pre></td></tr></table></figure>\n\n<p>之后在<strong>博客根目录</strong>下的<code>_config.yml</code>中添加如下配置（以下为示例，请根据需要自行修改）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo-douban config</span></span><br><span class=\"line\"><span class=\"attr\">douban:</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span> <span class=\"string\">abelsu7</span> <span class=\"comment\"># your Douban ID</span></span><br><span class=\"line\">  <span class=\"attr\">builtin:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">book:</span> </span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;读书&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">quote:</span> <span class=\"string\">&lt;p&gt;注：&lt;b&gt;&lt;font</span> <span class=\"string\">color=&quot;#3f51b5&quot;&gt;IE、Edge及Safari&lt;/font&gt;&lt;/b&gt;中无法正常加载图片&lt;br/&gt;请移步我的&lt;a</span> <span class=\"string\">href=&quot;https://book.douban.com/people/abelsu7/&quot;</span> <span class=\"string\">target=&quot;_blank&quot;&gt;&lt;font</span> <span class=\"string\">color=&quot;#ff4081&quot;&gt;豆瓣读书&lt;/font&gt;&lt;/a&gt;主页&lt;/p&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;Books are the ladder of human progress.&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">movie:</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;影视&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">quote:</span> <span class=\"string\">&lt;p&gt;注：&lt;b&gt;&lt;font</span> <span class=\"string\">color=&quot;#3f51b5&quot;&gt;IE、Edge及Safari&lt;/font&gt;&lt;/b&gt;中无法正常加载图片&lt;br/&gt;请移步我的&lt;a</span> <span class=\"string\">href=&quot;https://movie.douban.com/people/abelsu7/&quot;</span> <span class=\"string\">target=&quot;_blank&quot;&gt;&lt;font</span> <span class=\"string\">color=&quot;#ff4081&quot;&gt;豆瓣电影&lt;/font&gt;&lt;/a&gt;主页&lt;/p&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;如果有多一张船票，你会不会跟我一起走？&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">game:</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">&#x27;游戏&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">quote:</span> <span class=\"string\">&lt;p&gt;注：&lt;b&gt;&lt;font</span> <span class=\"string\">color=&quot;#3f51b5&quot;&gt;IE、Edge及Safari&lt;/font&gt;&lt;/b&gt;中无法正常加载图片&lt;br/&gt;请移步我的&lt;a</span> <span class=\"string\">href=&quot;https://www.douban.com/people/abelsu7/games?action=collect&quot;</span> <span class=\"string\">target=&quot;_blank&quot;&gt;&lt;font</span> <span class=\"string\">color=&quot;#ff4081&quot;&gt;豆瓣游戏&lt;/font&gt;&lt;/a&gt;主页&lt;/p&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;胜败乃兵家常事，大侠请重新来过&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">timeout:</span> <span class=\"number\">40000</span></span><br></pre></td></tr></table></figure>\n\n<p>此时运行<code>hexo-douban</code>已经可以生成相应的页面。但为使其风格与本主题更加协调，还需手动修改<code>hexo-douban</code>插件的部分代码。</p>\n<p>首先进入<code>node_modules/hexo-douban/lib/templates</code>目录，分别将<code>book.ejs</code>、<code>movie.ejs</code>、<code>game.ejs</code>替换为以下内容。</p>\n<p><code>book.ejs</code>内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;blockquote&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &lt;%- quote; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/blockquote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include index.css %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container body-wrap card&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-article fade&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;blogPage&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tabs&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab1&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;bookReading&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= reading.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab2&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;bookWish&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= wish.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab3&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;bookRead&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= read.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% reading.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include bookReading.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item2&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% wish.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include bookWish.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item3&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% read.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include bookRead.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include index.js %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include pagination.js %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>movie.ejs</code>内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;blockquote&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &lt;%- quote; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/blockquote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include index.css %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container body-wrap card&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-article fade&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;blogPage&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tabs&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab1&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;movieWatching&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= watching.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab2&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;movieWish&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= wish.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab3&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;movieWatched&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= watched.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% watching.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include movieWatching.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item2&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% wish.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include movieWish.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item3&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% watched.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include movieWatched.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include index.js %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include pagination.js %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>game.ejs</code>内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;blockquote&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &lt;%- quote %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/blockquote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include index.css %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container body-wrap card&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-article fade&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;blogPage&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tabs&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab1&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;gamePlaying&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= playing.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab2&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;gameWish&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= wish.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hexo-douban-tab&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-tab3&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;external&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= __(&#x27;gamePlayed&#x27;) %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                (</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;%= played.length %&gt;)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% playing.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include gamePlaying.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item2&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% wish.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include gameWish.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hexo-douban-item3&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% played.forEach(function(item)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include gamePlayed.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% &#125;); %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">                &lt;% include pagination.ejs %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include index.js %&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    &lt;% include pagination.js %&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>之后打开该目录下的<code>index.css</code>，添加或修改以下样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.hexo-douban-tabs</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center; <span class=\"comment\">/* 新增 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hexo-douban-tab</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#303f9f</span>; <span class=\"comment\">/* 新增 */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 新增 .hexo-douban-tab:hover */</span></span><br><span class=\"line\"><span class=\"selector-class\">.hexo-douban-tab</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff4081</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 修改 .hexo-douban-active */</span></span><br><span class=\"line\"><span class=\"selector-class\">.hexo-douban-active</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* background: #657b83; */</span></span><br><span class=\"line\">    <span class=\"comment\">/* color: #fff; */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff4081</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">/* 修改 .hexo-douban-button:hover */</span></span><br><span class=\"line\"><span class=\"selector-class\">.hexo-douban-button</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* background: #657b83; */</span></span><br><span class=\"line\">    <span class=\"comment\">/* color: #fff; */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff4081</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>最后在<code>books-generator.js</code>、<code>movies-generator.js</code>、<code>games-generator.js</code>最后的<code>return</code>语句中，添加对应的<code>layout</code>：</p>\n<p><code>books-generator.js</code>的最后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;books/index.html&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">title</span>: config.douban.book.title,</span><br><span class=\"line\">            <span class=\"attr\">content</span>: contents,</span><br><span class=\"line\">            <span class=\"attr\">slug</span>: <span class=\"string\">&#x27;books&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">layout</span>: [<span class=\"string\">&#x27;book&#x27;</span>, <span class=\"string\">&#x27;page&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>] <span class=\"comment\">// 添加 &#x27;book&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>movies-generator.js</code>的最后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;movies/index.html&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">title</span>: config.douban.movie.title,</span><br><span class=\"line\">            <span class=\"attr\">content</span>: contents,</span><br><span class=\"line\">            <span class=\"attr\">slug</span>: <span class=\"string\">&#x27;movies&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">layout</span>: [<span class=\"string\">&#x27;movie&#x27;</span>, <span class=\"string\">&#x27;page&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>] <span class=\"comment\">// 添加 &#x27;movie&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>games-generator.js</code>的最后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;games/index.html&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">title</span>: config.douban.game.title,</span><br><span class=\"line\">            <span class=\"attr\">content</span>: contents,</span><br><span class=\"line\">            <span class=\"attr\">slug</span>: <span class=\"string\">&#x27;games&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">layout</span>: [<span class=\"string\">&#x27;game&#x27;</span>, <span class=\"string\">&#x27;page&#x27;</span>, <span class=\"string\">&#x27;post&#x27;</span>] <span class=\"comment\">// 添加 &#x27;game&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"baidu-url-submit可选\">Baidu URL Submit（可选）</span></h4><p>使用 <a href=\"https://github.com/huiwang/hexo-baidu-url-submit\">hexo-baidu-url-submit</a> 将<strong>博客新链接</strong>主动推送至<strong>百度搜索引擎</strong>。</p>\n<p>首先在<strong>博客根目录</strong>下安装插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>\n\n<p>之后在博客根目录下的<code>_config.yml</code>中进行配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\"># Baidu URL Submit</span></span><br><span class=\"line\"><span class=\"attr\">baidu_url_submit:</span></span><br><span class=\"line\">  <span class=\"attr\">count:</span> <span class=\"number\">1000</span> <span class=\"comment\">## 提交最新的一个链接</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">alili.tech</span> <span class=\"comment\">## 在百度站长平台中注册的域名</span></span><br><span class=\"line\">  <span class=\"attr\">token:</span> <span class=\"string\">xxxxx</span> <span class=\"comment\">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidu_urls.txt</span> <span class=\"comment\">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span></span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">git@github.com:abelsu7/blog.git,master</span></span><br><span class=\"line\">    <span class=\"attr\">coding:</span> <span class=\"string\">git@git.coding.net:abelsu7/blog.git,coding-pages</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">baidu_url_submitter</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"sitemap可选\">Sitemap（可选）</span></h4><p>自动生成<code>sitemap.xml</code>以及<code>baidusitemap.xml</code>。</p>\n<p>首先在<strong>博客根目录</strong>安装插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>之后在<strong>博客根目录</strong>下的<code>_config.yml</code>中<strong>添加配置</strong>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动生成sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"5-修改-scaffolds\">5. 修改 scaffolds</span></h3><p>初始化 Hexo 博客后，默认会在<code>scaffolds</code>目录下创建<code>draft.md</code>、<code>page.md</code>、<code>post.md</code>三个模板文件，使用<code>hexo new</code>命令新建页面时就会基于上述模板文件生成对应的 Markdown 文件。为了方便使用，建议将<code>scaffolds</code>下的模板文件修改如下：</p>\n<p><code>draft.md</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> &#123;&#123; <span class=\"string\">title</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">category:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> </span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> </span><br><span class=\"line\"><span class=\"attr\">date:</span> &#123;&#123; <span class=\"string\">date</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p><code>page.md</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">page</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> &#123;&#123; <span class=\"string\">title</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">date:</span> &#123;&#123; <span class=\"string\">date</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p><code>post.md</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> &#123;&#123; <span class=\"string\">title</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">category:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> </span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> </span><br><span class=\"line\"><span class=\"attr\">date:</span> &#123;&#123; <span class=\"string\">date</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>这里添加了<code>top: 1</code>属性，是为了实现文章置顶功能，参见 <a href=\"https://abelsu7.top/2019/02/28/hexo-pin-top/\">Hexo 实现自定义文章置顶 | 苏易北</a>。</p>\n<h3><span id=\"6-文章置顶\">6. 文章置顶</span></h3><p>修改博客根目录下<code>_config.yml</code>文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\"># Home page setting</span></span><br><span class=\"line\"><span class=\"comment\"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class=\"line\"><span class=\"comment\"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> </span><br><span class=\"line\">    <span class=\"attr\">top:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"attr\">date:</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>即可在首页先根据<code>top</code>值、再根据<code>date</code>，对所有文章进行排序。所有文章默认<code>top: 1</code>，如需置顶文章，只需将其<code>top</code>值修改为大于 1 的整数，同一<code>top</code>值可有多篇文章，<code>top</code>值相同时按照<code>date</code>排序。</p>\n<blockquote>\n<p>注意：需要确保所有的<code>post</code>都有<code>top</code>和<code>date</code>属性，否则会导致排序失败。可在每次新建文章时使用<code>hexo new post &lt;post_title&gt;</code>创建，即可根据<code>post.md</code>模板生成对应的文章文件</p>\n</blockquote>\n<h3><span id=\"7-按需开启-mathjax\">7. 按需开启 MathJax</span></h3><p>可以按需开启<code>MathJax</code>支持。首先确保<code>themes/indigo-plus/_config.yml</code>中，<code>mathjax</code>设置为<code>true</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"comment\"># 文章截断</span></span><br><span class=\"line\"><span class=\"attr\">excerpt_render:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">excerpt_length:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"attr\">excerpt_link:</span> <span class=\"string\">阅读全文...</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">archive_yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>如要在某篇文章中开启<code>MathJax</code>支持，只需在其<code>YAML</code>头部中加入<code>mathjax: true</code>，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">在</span> <span class=\"string\">Hexo</span> <span class=\"string\">中使用</span> <span class=\"string\">MathJax</span> <span class=\"string\">渲染数学公式</span></span><br><span class=\"line\"><span class=\"attr\">category:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">前端</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">MathJax</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">LaTex</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">数学</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-10-29 19:58:35</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：可能会遇到行内公式的渲染问题，参见 <a href=\"https://abelsu7.top/2018/10/29/hexo-mathjax/\">在 Hexo 中使用 MathJax 渲染数学公式 | 苏易北</a></p>\n</blockquote>\n<h3><span id=\"8-开启标签页\">8. 开启标签页</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>并修改<code>blog/source/tags/index.md</code>的元数据：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"9-开启分类页\">9. 开启分类页</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>并修改<code>blog/source/categories/index.md</code>的元数据：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"10-开启关于页\">10. 开启关于页</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n\n<p>关于<code>page</code>页面的语法规则，具体参见 <a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-indigo</a> 文档。</p>\n<h3><span id=\"11-使用示例\">11. 使用示例</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean     <span class=\"comment\"># 清除 public 目录下的静态文件</span></span><br><span class=\"line\">hexo recommend <span class=\"comment\"># 获取推荐文章列表</span></span><br><span class=\"line\">hexo douban    <span class=\"comment\"># 生成豆瓣展示页面</span></span><br><span class=\"line\">hexo g         <span class=\"comment\"># 生成 public 目录下的静态文件</span></span><br><span class=\"line\">hexo s         <span class=\"comment\"># 本地启动 server</span></span><br><span class=\"line\">hexo deploy    <span class=\"comment\"># 部署博客至远程仓库</span></span><br></pre></td></tr></table></figure>\n\n\n<p>以下是 <a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-indigo</a> 的说明——</p>\n<hr>\n<h1><span id=\"hexo-theme-material-indigo\">hexo-theme-material-indigo</span></h1><p><a href=\"https://gitter.im/hexo-theme-indigo/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\"><img src=\"https://badges.gitter.im/hexo-theme-indigo/Lobby.svg\" alt=\"Join the chat at https://gitter.im/hexo-theme-indigo/Lobby\"></a></p>\n<p>Material Design 风格的Hexo主题，基于 Hexo 3.0+ 制作。 <a href=\"http://imys.net/\">Preview</a></p>\n<blockquote>\n<p>现有两个主题分支，我的博客中使用的是 card 分支卡片风格主题，master 分支是旧版平铺式风格主题。</p>\n</blockquote>\n<h2><span id=\"feature\">Feature</span></h2><ol>\n<li>仅支持 IE10+ 等现代浏览器。</li>\n<li>去 jQuery，更轻。相信现代浏览器的原生兼容性。</li>\n<li>使用 Less 作为 css 预处理器，需要安装 <code>hexo-renderer-less</code>。</li>\n<li>添加了英文字体支持 Roboto。</li>\n<li>添加了一些波纹效果。By <a href=\"https://github.com/fians/Waves\">Waves</a></li>\n<li>无前端依赖的分享实现。</li>\n<li>基于静态数据的站内搜索，无第三方侵入。</li>\n<li>支持文章打赏。</li>\n</ol>\n<h2><span id=\"useage\">Useage</span></h2><p><a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki\">文档 | Document</a></p>\n<h2><span id=\"changelog\">ChangeLog</span></h2><p>升级前请仔细查看更改内容，如非必要可不升级。</p>\n<p><a href=\"https://github.com/yscoder/hexo-theme-indigo/releases\">ChangeLog</a></p>\n<h2><span id=\"otherversion\">OtherVersion</span></h2><ul>\n<li><a href=\"https://github.com/yscoder/vuepress-theme-indigo\">vuepress-theme-indigo</a></li>\n</ul>\n","categories":["tools"],"tags":["hexo"]},{"title":"kubernetes1.23环境搭建","url":"/2021/12/17/cloud-native/kubernetes/kubernetes-base/kubernetes1.23/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","content":"<h1 id=\"kubernetes1-23环境搭建\"><a href=\"#kubernetes1-23环境搭建\" class=\"headerlink\" title=\"kubernetes1.23环境搭建\"></a>kubernetes1.23环境搭建</h1><h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><p>在安装之前，需要先做好如下准备。3台CentOS 7.9主机如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/hosts</span><br><span class=\"line\">192.168.96.151    node1</span><br><span class=\"line\">192.168.96.152    node2</span><br><span class=\"line\">192.168.96.153    node3</span><br></pre></td></tr></table></figure>\n\n<p>在各个主机上完成下面的系统配置。</p>\n<span id=\"more\"></span>\n\n<p>如果各个主机启用了防火墙策略，需要开放Kubernetes各个组件所需要的端口，可以查看Installing kubeadm中的”Check required ports”一节开放相关端口或者关闭主机的防火墙。</p>\n<p>禁用SELINUX：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">setenforce 0</span><br><span class=\"line\">vi /etc/selinux/config</span><br><span class=\"line\">SELINUX=disabled</span><br></pre></td></tr></table></figure>\n\n<p>创建<br>/etc/modules-load.d/containerd.conf配置文件:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /etc/modules-load.d/containerd.conf</span></span><br><span class=\"line\"><span class=\"string\">overlay</span></span><br><span class=\"line\"><span class=\"string\">br_netfilter</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令使配置生效:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">modprobe overlay</span><br><span class=\"line\">modprobe br_netfilter</span><br></pre></td></tr></table></figure>\n\n<p>创建<br>/etc/sysctl.d/99-kubernetes-cri.conf配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward = 1</span></span><br><span class=\"line\"><span class=\"string\">user.max_user_namespaces=28633</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令使配置生效:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置服务器支持开启ipvs的前提条件\"><a href=\"#配置服务器支持开启ipvs的前提条件\" class=\"headerlink\" title=\"配置服务器支持开启ipvs的前提条件\"></a>配置服务器支持开启ipvs的前提条件</h2><p>由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip_vs</span><br><span class=\"line\">ip_vs_rr</span><br><span class=\"line\">ip_vs_wrr</span><br><span class=\"line\">ip_vs_sh</span><br><span class=\"line\">nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>\n\n<p>在各个服务器节点上执行以下脚本:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_rr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_wrr</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- ip_vs_sh</span></span><br><span class=\"line\"><span class=\"string\">modprobe -- nf_conntrack_ipv4</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>\n\n<p>上面脚本创建了的<br>/etc/sysconfig/modules/ipvs.modules文件，保证在节点重启后能自动加载所需模块。 使用lsmod | grep -e ip_vs -e nf_conntrack_ipv4命令查看是否已经正确加载所需的内核模块。</p>\n<p>接下来还需要确保各个节点上已经安装了ipset软件包，为了便于查看ipvs的代理规则，最好安装一下管理工具ipvsadm。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y ipset ipvsadm</span><br></pre></td></tr></table></figure>\n\n<p>如果以上前提条件如果不满足，则即使kube-proxy的配置开启了ipvs模式，也会退回到iptables模式。</p>\n<h2 id=\"部署容器运行时Containerd\"><a href=\"#部署容器运行时Containerd\" class=\"headerlink\" title=\"部署容器运行时Containerd\"></a>部署容器运行时Containerd</h2><p>在各个服务器节点上安装容器运行时Containerd。</p>\n<p>下载Containerd的二进制包:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/containerd/containerd/releases/download/v1.5.8/cri-containerd-cni-1.5.8-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n<p>cri-containerd-cni-1.5.8-linux-amd64.tar.gz压缩包中已经按照官方二进制部署推荐的目录结构布局好。 里面包含了systemd配置文件，containerd以及cni的部署文件。 将解压缩到系统的根目录/中:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf cri-containerd-cni-1.5.8-linux-amd64.tar.gz -C /</span><br><span class=\"line\"></span><br><span class=\"line\">etc/</span><br><span class=\"line\">etc/systemd/</span><br><span class=\"line\">etc/systemd/system/</span><br><span class=\"line\">etc/systemd/system/containerd.service</span><br><span class=\"line\">etc/crictl.yaml</span><br><span class=\"line\">etc/cni/</span><br><span class=\"line\">etc/cni/net.d/</span><br><span class=\"line\">etc/cni/net.d/10-containerd-net.conflist</span><br><span class=\"line\">usr/</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/sbin/</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/sbin/runc</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/critest</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/containerd-shim</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/containerd-shim-runc-v1</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/ctd-decoder</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/containerd</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/containerd-shim-runc-v2</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/containerd-stress</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/ctr</span><br><span class=\"line\">usr/<span class=\"built_in\">local</span>/bin/crictl</span><br><span class=\"line\">......</span><br><span class=\"line\">opt/cni/</span><br><span class=\"line\">opt/cni/bin/</span><br><span class=\"line\">opt/cni/bin/bridge</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>注意经测试<br>cri-containerd-cni-1.5.8-linux-amd64.tar.gz包中包含的runc在CentOS 7下的动态链接有问题，这里从runc的github上单独下载runc，并替换上面安装的containerd中的runc:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/opencontainers/runc/releases/download/v1.1.0-rc.1/runc.amd64</span><br></pre></td></tr></table></figure>\n\n<p>接下来生成containerd的配置文件:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/containerd</span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n\n<p>根据文档<a href=\"https://kubernetes.io/docs/setup/production-environment/container-runtimes/\">Container runtimes </a>中的内容，对于使用systemd作为init system的Linux的发行版，使用systemd作为容器的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定，因此这里配置各个节点上containerd的cgroup driver为systemd。</p>\n<p>修改前面生成的配置文件<br>/etc/containerd/config.toml：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  [plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class=\"line\">    SystemdCgroup = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>再修改<br>/etc/containerd/config.toml中的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[plugins.<span class=\"string\">&quot;io.containerd.grpc.v1.cri&quot;</span>]</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\"># sandbox_image = &quot;k8s.gcr.io/pause:3.5&quot;</span></span><br><span class=\"line\">  sandbox_image = <span class=\"string\">&quot;registry.aliyuncs.com/google_containers/pause:3.6&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置containerd开机启动，并启动containerd</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> containerd --now</span><br></pre></td></tr></table></figure>\n\n<p>使用crictl测试一下，确保可以打印出版本信息并且没有错误信息输出:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">crictl version</span><br><span class=\"line\">Version:  0.1.0</span><br><span class=\"line\">RuntimeName:  containerd</span><br><span class=\"line\">RuntimeVersion:  v1.5.8</span><br><span class=\"line\">RuntimeApiVersion:  v1alpha2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用kubeadm部署Kubernetes\"><a href=\"#使用kubeadm部署Kubernetes\" class=\"headerlink\" title=\"使用kubeadm部署Kubernetes\"></a>使用kubeadm部署Kubernetes</h1><h2 id=\"安装kubeadm和kubelet\"><a href=\"#安装kubeadm和kubelet\" class=\"headerlink\" title=\"安装kubeadm和kubelet\"></a>安装kubeadm和kubelet</h2><p>下面在各节点安装kubeadm和kubelet：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\">yum install kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>\n\n<p>运行kubelet –help可以看到原来kubelet的绝大多数命令行flag参数都被DEPRECATED了，官方推荐我们使用–config指定配置文件，并在配置文件中指定原来这些flag所配置的内容。具体内容可以查看这里Set Kubelet parameters via a config file。这也是Kubernetes为了支持动态Kubelet配置（Dynamic Kubelet Configuration）才这么做的，参考Reconfigure a Node’s Kubelet in a Live Cluster。</p>\n<p>kubelet的配置文件必须是json或yaml格式，具体可查看这里。</p>\n<p>Kubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动。 关闭系统的Swap方法如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">swapoff -a</span><br></pre></td></tr></table></figure>\n\n<p>修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载，使用free -m确认swap已经关闭。</p>\n<p>swappiness参数调整，修改<br>/etc/sysctl.d/99-kubernetes-cri.conf添加下面一行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.swappiness=0</span><br></pre></td></tr></table></figure>\n\n<p>执行sysctl -p<br>/etc/sysctl.d/99-kubernetes-cri.conf使修改生效。</p>\n<h2 id=\"使用kubeadm-init初始化集群\"><a href=\"#使用kubeadm-init初始化集群\" class=\"headerlink\" title=\"使用kubeadm init初始化集群\"></a>使用kubeadm init初始化集群</h2><p>在各节点开机启动kubelet服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet.service</span><br></pre></td></tr></table></figure>\n\n<p>使用kubeadm config print init-defaults –component-configs KubeletConfiguration可以打印集群初始化默认的使用的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta3</span></span><br><span class=\"line\"><span class=\"attr\">bootstrapTokens:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">groups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class=\"line\">  <span class=\"attr\">token:</span> <span class=\"string\">abcdef.0123456789abcdef</span></span><br><span class=\"line\">  <span class=\"attr\">ttl:</span> <span class=\"string\">24h0m0s</span></span><br><span class=\"line\">  <span class=\"attr\">usages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">signing</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">authentication</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">InitConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">localAPIEndpoint:</span></span><br><span class=\"line\">  <span class=\"attr\">advertiseAddress:</span> <span class=\"number\">1.2</span><span class=\"number\">.3</span><span class=\"number\">.4</span></span><br><span class=\"line\">  <span class=\"attr\">bindPort:</span> <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">nodeRegistration:</span></span><br><span class=\"line\">  <span class=\"attr\">criSocket:</span> <span class=\"string\">/var/run/dockershim.sock</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node</span></span><br><span class=\"line\">  <span class=\"attr\">taints:</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiServer:</span></span><br><span class=\"line\">  <span class=\"attr\">timeoutForControlPlane:</span> <span class=\"string\">4m0s</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta3</span></span><br><span class=\"line\"><span class=\"attr\">certificatesDir:</span> <span class=\"string\">/etc/kubernetes/pki</span></span><br><span class=\"line\"><span class=\"attr\">clusterName:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">controllerManager:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">dns:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">etcd:</span></span><br><span class=\"line\">  <span class=\"attr\">local:</span></span><br><span class=\"line\">    <span class=\"attr\">dataDir:</span> <span class=\"string\">/var/lib/etcd</span></span><br><span class=\"line\"><span class=\"attr\">imageRepository:</span> <span class=\"string\">k8s.gcr.io</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">kubernetesVersion:</span> <span class=\"number\">1.23</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">networking:</span></span><br><span class=\"line\">  <span class=\"attr\">dnsDomain:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\">  <span class=\"attr\">serviceSubnet:</span> <span class=\"number\">10.96</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/12</span></span><br><span class=\"line\"><span class=\"attr\">scheduler:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">authentication:</span></span><br><span class=\"line\">  <span class=\"attr\">anonymous:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">webhook:</span></span><br><span class=\"line\">    <span class=\"attr\">cacheTTL:</span> <span class=\"string\">0s</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">x509:</span></span><br><span class=\"line\">    <span class=\"attr\">clientCAFile:</span> <span class=\"string\">/etc/kubernetes/pki/ca.crt</span></span><br><span class=\"line\"><span class=\"attr\">authorization:</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">Webhook</span></span><br><span class=\"line\">  <span class=\"attr\">webhook:</span></span><br><span class=\"line\">    <span class=\"attr\">cacheAuthorizedTTL:</span> <span class=\"string\">0s</span></span><br><span class=\"line\">    <span class=\"attr\">cacheUnauthorizedTTL:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">cgroupDriver:</span> <span class=\"string\">systemd</span></span><br><span class=\"line\"><span class=\"attr\">clusterDNS:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"number\">10.96</span><span class=\"number\">.0</span><span class=\"number\">.10</span></span><br><span class=\"line\"><span class=\"attr\">clusterDomain:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\"><span class=\"attr\">cpuManagerReconcilePeriod:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">evictionPressureTransitionPeriod:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">fileCheckFrequency:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">healthzBindAddress:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">healthzPort:</span> <span class=\"number\">10248</span></span><br><span class=\"line\"><span class=\"attr\">httpCheckFrequency:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">imageMinimumGCAge:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">flushFrequency:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span></span><br><span class=\"line\">    <span class=\"attr\">json:</span></span><br><span class=\"line\">      <span class=\"attr\">infoBufferSize:</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">verbosity:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">memorySwap:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">nodeStatusReportFrequency:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">nodeStatusUpdateFrequency:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">rotateCertificates:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">runtimeRequestTimeout:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">shutdownGracePeriod:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">shutdownGracePeriodCriticalPods:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">staticPodPath:</span> <span class=\"string\">/etc/kubernetes/manifests</span></span><br><span class=\"line\"><span class=\"attr\">streamingConnectionIdleTimeout:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">syncFrequency:</span> <span class=\"string\">0s</span></span><br><span class=\"line\"><span class=\"attr\">volumeStatsAggPeriod:</span> <span class=\"string\">0s</span></span><br></pre></td></tr></table></figure>\n\n<p>从默认的配置中可以看到，可以使用imageRepository定制在集群初始化时拉取k8s所需镜像的地址。基于默认配置定制出本次使用kubeadm初始化集群所需的配置文件kubeadm.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">InitConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">localAPIEndpoint:</span></span><br><span class=\"line\">  <span class=\"attr\">advertiseAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.96</span><span class=\"number\">.151</span></span><br><span class=\"line\">  <span class=\"attr\">bindPort:</span> <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">nodeRegistration:</span></span><br><span class=\"line\">  <span class=\"attr\">criSocket:</span> <span class=\"string\">/run/containerd/containerd.sock</span></span><br><span class=\"line\">  <span class=\"attr\">taints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">effect:</span> <span class=\"string\">PreferNoSchedule</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">kubernetesVersion:</span> <span class=\"string\">v1.22.0</span></span><br><span class=\"line\"><span class=\"attr\">imageRepository:</span> <span class=\"string\">registry.aliyuncs.com/google_containers</span></span><br><span class=\"line\"><span class=\"attr\">networking:</span></span><br><span class=\"line\">  <span class=\"attr\">podSubnet:</span> <span class=\"number\">10.244</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">cgroupDriver:</span> <span class=\"string\">systemd</span></span><br><span class=\"line\"><span class=\"attr\">failSwapOn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">ipvs</span></span><br></pre></td></tr></table></figure>\n\n<p>这里定制了imageRepository为阿里云的registry，避免因gcr被墙，无法直接拉取镜像。criSocket设置了容器运行时为containerd。 同时设置kubelet的cgroupDriver为systemd，设置kube-proxy代理模式为ipvs。</p>\n<p>在开始初始化集群之前可以使用kubeadm config images pull –config kubeadm.yaml预先在各个服务器节点上拉取所k8s需要的容器镜像。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm config images pull --config kubeadm.yaml</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.1</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.1</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.1</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.23.1</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/pause:3.6</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/etcd:3.5.1-0</span><br><span class=\"line\">[config/images] Pulled registry.aliyuncs.com/google_containers/coredns:v1.8.6</span><br></pre></td></tr></table></figure>\n\n<p>接下来使用kubeadm初始化集群，选择node1作为Master Node，在node1上执行下面的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm init --config kubeadm.yaml</span><br><span class=\"line\">[init] Using Kubernetes version: v1.23.1</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">[preflight] Pulling images required <span class=\"keyword\">for</span> setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action <span class=\"keyword\">in</span> beforehand using <span class=\"string\">&#x27;kubeadm config images pull&#x27;</span></span><br><span class=\"line\">[certs] Using certificateDir folder <span class=\"string\">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver&quot;</span> certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local node1] and IPs [10.96.0.1 192.168.96.151]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-kubelet-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/server&quot;</span> certificate and key</span><br><span class=\"line\">[certs] etcd/server serving cert is signed <span class=\"keyword\">for</span> DNS names [localhost node1] and IPs [192.168.96.151 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/peer&quot;</span> certificate and key</span><br><span class=\"line\">[certs] etcd/peer serving cert is signed <span class=\"keyword\">for</span> DNS names [localhost node1] and IPs [192.168.96.151 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/healthcheck-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-etcd-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;sa&quot;</span> key and public key</span><br><span class=\"line\">[kubeconfig] Using kubeconfig folder <span class=\"string\">&quot;/etc/kubernetes&quot;</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;admin.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;kubelet.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;controller-manager.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;scheduler.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[control-plane] Using manifest folder <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-apiserver&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-controller-manager&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-scheduler&quot;</span></span><br><span class=\"line\">[etcd] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"built_in\">local</span> etcd <span class=\"keyword\">in</span> <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[wait-control-plane] Waiting <span class=\"keyword\">for</span> the kubelet to boot up the control plane as static Pods from directory <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to 4m0s</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 16.003580 seconds</span><br><span class=\"line\">[upload-config] Storing the configuration used <span class=\"keyword\">in</span> ConfigMap <span class=\"string\">&quot;kubeadm-config&quot;</span> <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-system&quot;</span> Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap <span class=\"string\">&quot;kubelet-config-1.23&quot;</span> <span class=\"keyword\">in</span> namespace kube-system with the configuration <span class=\"keyword\">for</span> the kubelets <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">NOTE: The <span class=\"string\">&quot;kubelet-config-1.23&quot;</span> naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just <span class=\"string\">&quot;kubelet-config&quot;</span>. Kubeadm upgrade will handle this transition transparently.</span><br><span class=\"line\">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class=\"line\">[mark-control-plane] Marking the node node1 as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class=\"line\">[mark-control-plane] Marking the node node1 as control-plane by adding the taints [node-role.kubernetes.io/master:PreferNoSchedule]</span><br><span class=\"line\">[bootstrap-token] Using token: o7d0h6.i9taufdl7u1un4va</span><br><span class=\"line\">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class=\"keyword\">in</span> order <span class=\"keyword\">for</span> nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class=\"keyword\">for</span> all node client certificates <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[bootstrap-token] Creating the <span class=\"string\">&quot;cluster-info&quot;</span> ConfigMap <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-public&quot;</span> namespace</span><br><span class=\"line\">[kubelet-finalize] Updating <span class=\"string\">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, <span class=\"keyword\">if</span> you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join 192.168.96.151:6443 --token o7d0h6.i9taufdl7u1un4va \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:6c55b14e9d71ef098ad0e8f249d85004c41b48063dbcd7692997930f9637f22b</span><br></pre></td></tr></table></figure>\n\n<p>上面记录了完成的初始化输出的内容，根据输出的内容基本上可以看出手动初始化安装一个Kubernetes集群所需要的关键步骤。 其中有以下关键内容：</p>\n<ul>\n<li>[certs]生成相关的各种证书</li>\n<li>[kubeconfig]生成相关的kubeconfig文件</li>\n<li>[kubelet-start] 生成kubelet的配置文件”/var/lib/kubelet/config.yaml”</li>\n<li>[control-plane]使用/etc/kubernetes/manifests目录中的yaml文件创建apiserver、controller-manager、scheduler的静态pod</li>\n<li>[bootstraptoken]生成token记录下来，后边使用kubeadm join往集群中添加节点时会用到</li>\n<li>下面的命令是配置常规用户如何使用kubectl访问集群： mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config</li>\n<li>最后给出了将节点加入集群的命令kubeadm join 192.168.96.151:6443 –token o7d0h6.i9taufdl7u1un4va \\ –discovery-token-ca-cert-hash sha256:6c55b14e9d71ef098ad0e8f249d85004c41b48063dbcd7692997930f9637f22b</li>\n</ul>\n<p>查看一下集群状态，确认个组件都处于healthy状态，结果出现了错误:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get cs</span><br><span class=\"line\">Warning: v1 ComponentStatus is deprecated <span class=\"keyword\">in</span> v1.19+</span><br><span class=\"line\">NAME                 STATUS      MESSAGE                                                                                       ERROR</span><br><span class=\"line\">controller-manager   Unhealthy   Get <span class=\"string\">&quot;http://127.0.0.1:10252/healthz&quot;</span>: dial tcp 127.0.0.1:10252: connect: connection refused</span><br><span class=\"line\">scheduler            Unhealthy   Get <span class=\"string\">&quot;http://127.0.0.1:10251/healthz&quot;</span>: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class=\"line\">etcd-0               Healthy     &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>controller-manager和scheduler为不健康状态，修改<br>/etc/kubernetes/manifests/下的静态pod配置文件<br>kube-controller-manager.yaml和kube-scheduler.yaml，删除这两个文件中命令选项中的- –port=0这行，重启kubelet，再次查看一切正常。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get cs</span><br><span class=\"line\">Warning: v1 ComponentStatus is deprecated <span class=\"keyword\">in</span> v1.19+</span><br><span class=\"line\">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class=\"line\">scheduler            Healthy   ok</span><br><span class=\"line\">controller-manager   Healthy   ok</span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>,<span class=\"string\">&quot;reason&quot;</span>:<span class=\"string\">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>集群初始化如果遇到问题，可以使用kubeadm reset命令进行清理。</p>\n<h2 id=\"安装包管理器helm-3\"><a href=\"#安装包管理器helm-3\" class=\"headerlink\" title=\"安装包管理器helm 3\"></a>安装包管理器helm 3</h2><p>Helm是Kubernetes的包管理器，后续流程也将使用Helm安装Kubernetes的常用组件。 这里先在master节点node1上按照helm。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz</span><br><span class=\"line\">tar -zxvf helm-v3.7.2-linux-amd64.tar.gz</span><br><span class=\"line\">mv linux-amd64/helm  /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n\n<p>执行helm list确认没有错误输出。</p>\n<h2 id=\"部署Pod-Network组件Calico\"><a href=\"#部署Pod-Network组件Calico\" class=\"headerlink\" title=\"部署Pod Network组件Calico\"></a>部署Pod Network组件Calico</h2><p>选择calico作为k8s的Pod网络组件，下面使用helm在k8s集群中按照calico。</p>\n<p>下载tigera-operator的helm chart:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/projectcalico/calico/releases/download/v3.21.2/tigera-operator-v3.21.2-1.tgz</span><br></pre></td></tr></table></figure>\n\n<p>查看这个chart的中可定制的配置:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">show</span> <span class=\"string\">values</span> <span class=\"string\">tigera-operator-v3.21.2-1.tgz</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">imagePullSecrets:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">installation:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">kubernetesProvider:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiServer:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">certs:</span></span><br><span class=\"line\">  <span class=\"attr\">node:</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span></span><br><span class=\"line\">    <span class=\"attr\">cert:</span></span><br><span class=\"line\">    <span class=\"attr\">commonName:</span></span><br><span class=\"line\">  <span class=\"attr\">typha:</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span></span><br><span class=\"line\">    <span class=\"attr\">cert:</span></span><br><span class=\"line\">    <span class=\"attr\">commonName:</span></span><br><span class=\"line\">    <span class=\"attr\">caBundle:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configuration for the tigera operator</span></span><br><span class=\"line\"><span class=\"attr\">tigeraOperator:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">tigera/operator</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1.23.3</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span> <span class=\"string\">quay.io</span></span><br><span class=\"line\"><span class=\"attr\">calicoctl:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">quay.io/docker.io/calico/ctl</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"string\">v3.21.2</span></span><br></pre></td></tr></table></figure>\n\n<p>定制的values.yaml如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可针对上面的配置进行定制,例如calico的镜像改成从私有库拉取。</span></span><br><span class=\"line\"><span class=\"comment\"># 这里只是个人本地环境测试k8s新版本，因此保留value.yaml为空即可</span></span><br></pre></td></tr></table></figure>\n\n<p>使用helm安装calico：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm install calico tigera-operator-v3.21.2-1.tgz -f values.yaml</span><br></pre></td></tr></table></figure>\n\n<p>等待并确认所有pod处于Running状态:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch kubectl get pods -n calico-system</span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">calico-kube-controllers-7f58dbcbbd-kdnlg   1/1     Running   0          2m34s</span><br><span class=\"line\">calico-node-nv794                          1/1     Running   0          2m34s</span><br><span class=\"line\">calico-typha-65f579bc5d-4pbfz              1/1     Running   0          2m34s</span><br></pre></td></tr></table></figure>\n\n<p>查看一下calico向k8s中添加的api资源:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl api-resources | grep calico</span><br><span class=\"line\">bgpconfigurations                              crd.projectcalico.org/v1               <span class=\"literal\">false</span>        BGPConfiguration</span><br><span class=\"line\">bgppeers                                       crd.projectcalico.org/v1               <span class=\"literal\">false</span>        BGPPeer</span><br><span class=\"line\">blockaffinities                                crd.projectcalico.org/v1               <span class=\"literal\">false</span>        BlockAffinity</span><br><span class=\"line\">caliconodestatuses                             crd.projectcalico.org/v1               <span class=\"literal\">false</span>        CalicoNodeStatus</span><br><span class=\"line\">clusterinformations                            crd.projectcalico.org/v1               <span class=\"literal\">false</span>        ClusterInformation</span><br><span class=\"line\">felixconfigurations                            crd.projectcalico.org/v1               <span class=\"literal\">false</span>        FelixConfiguration</span><br><span class=\"line\">globalnetworkpolicies                          crd.projectcalico.org/v1               <span class=\"literal\">false</span>        GlobalNetworkPolicy</span><br><span class=\"line\">globalnetworksets                              crd.projectcalico.org/v1               <span class=\"literal\">false</span>        GlobalNetworkSet</span><br><span class=\"line\">hostendpoints                                  crd.projectcalico.org/v1               <span class=\"literal\">false</span>        HostEndpoint</span><br><span class=\"line\">ipamblocks                                     crd.projectcalico.org/v1               <span class=\"literal\">false</span>        IPAMBlock</span><br><span class=\"line\">ipamconfigs                                    crd.projectcalico.org/v1               <span class=\"literal\">false</span>        IPAMConfig</span><br><span class=\"line\">ipamhandles                                    crd.projectcalico.org/v1               <span class=\"literal\">false</span>        IPAMHandle</span><br><span class=\"line\">ippools                                        crd.projectcalico.org/v1               <span class=\"literal\">false</span>        IPPool</span><br><span class=\"line\">ipreservations                                 crd.projectcalico.org/v1               <span class=\"literal\">false</span>        IPReservation</span><br><span class=\"line\">kubecontrollersconfigurations                  crd.projectcalico.org/v1               <span class=\"literal\">false</span>        KubeControllersConfiguration</span><br><span class=\"line\">networkpolicies                                crd.projectcalico.org/v1               <span class=\"literal\">true</span>         NetworkPolicy</span><br><span class=\"line\">networksets                                    crd.projectcalico.org/v1               <span class=\"literal\">true</span>         NetworkSet</span><br></pre></td></tr></table></figure>\n\n<p>这些api资源是属于calico的，因此不建议使用kubectl来管理，推荐按照calicoctl来管理这些api资源。 将calicoctl安装为kubectl的插件:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\">curl -o kubectl-calico -O -L  <span class=\"string\">&quot;https://github.com/projectcalico/calicoctl/releases/download/v3.21.2/calicoctl&quot;</span> </span><br><span class=\"line\">chmod +x kubectl-calico</span><br></pre></td></tr></table></figure>\n\n<p>验证插件正常工作:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl calico -h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证k8s-DNS是否可用\"><a href=\"#验证k8s-DNS是否可用\" class=\"headerlink\" title=\"验证k8s DNS是否可用\"></a>验证k8s DNS是否可用</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl run curl --image=radial/busyboxplus:curl -it</span><br><span class=\"line\">If you don<span class=\"string\">&#x27;t see a command prompt, try pressing enter.</span></span><br><span class=\"line\"><span class=\"string\">[ root@curl:/ ]$</span></span><br></pre></td></tr></table></figure>\n\n<p>进入后执行nslookup kubernetes.default确认解析正常:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nslookup kubernetes.default</span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      kubernetes.default</span><br><span class=\"line\">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"向Kubernetes集群中添加Node节点\"><a href=\"#向Kubernetes集群中添加Node节点\" class=\"headerlink\" title=\"向Kubernetes集群中添加Node节点\"></a>向Kubernetes集群中添加Node节点</h2><p>下面将node2, node3添加到Kubernetes集群中，分别在node2, node3上执行:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm join 192.168.96.151:6443 --token o7d0h6.i9taufdl7u1un4va \\</span><br><span class=\"line\">  --discovery-token-ca-cert-hash sha256:6c55b14e9d71ef098ad0e8f249d85004c41b48063dbcd7692997930f9637f22b</span><br></pre></td></tr></table></figure>\n\n<p>node2和node3加入集群很是顺利，在master节点上执行命令查看集群中的节点：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get node</span><br><span class=\"line\">NAME    STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">node1   Ready    control-plane,master   29m     v1.23.1</span><br><span class=\"line\">node2   Ready    &lt;none&gt;                 5m28s   v1.23.1</span><br><span class=\"line\">node3   Ready    &lt;none&gt;                 5m4s    v1.23.1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Kubernetes常用组件部署\"><a href=\"#Kubernetes常用组件部署\" class=\"headerlink\" title=\"Kubernetes常用组件部署\"></a>Kubernetes常用组件部署</h1><h2 id=\"使用Helm部署ingress-nginx\"><a href=\"#使用Helm部署ingress-nginx\" class=\"headerlink\" title=\"使用Helm部署ingress-nginx\"></a>使用Helm部署ingress-nginx</h2><p>为了便于将集群中的服务暴露到集群外部，需要使用Ingress。接下来使用Helm将ingress-nginx部署到Kubernetes上。 Nginx Ingress Controller被部署在Kubernetes的边缘节点上。</p>\n<p>这里将node1(192.168.96.151)作为边缘节点，打上Label：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl label node node1 node-role.kubernetes.io/edge=</span><br></pre></td></tr></table></figure>\n\n<p>下载ingress-nginx的helm chart:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kubernetes/ingress-nginx/releases/download/helm-chart-4.0.13/ingress-nginx-4.0.13.tgz</span><br></pre></td></tr></table></figure>\n\n<p>查看ingress-nginx-4.0.13.tgz这个chart的可定制配置:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm show values ingress-nginx-4.0.13.tgz</span><br></pre></td></tr></table></figure>\n\n<p>对values.yaml配置定制如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">controller:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassResource:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">controllerValue:</span> <span class=\"string\">&quot;k8s.io/ingress-nginx&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">admissionWebhooks:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">replicaCount:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span></span><br><span class=\"line\">    <span class=\"comment\"># registry: k8s.gcr.io</span></span><br><span class=\"line\">    <span class=\"comment\"># image: ingress-nginx/controller</span></span><br><span class=\"line\">    <span class=\"comment\"># tag: &quot;v1.1.0&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">registry:</span> <span class=\"string\">docker.io</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">unreachableg/k8s.gcr.io_ingress-nginx_controller</span></span><br><span class=\"line\">    <span class=\"attr\">tag:</span> <span class=\"string\">&quot;v1.1.0&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">digest:</span> <span class=\"string\">sha256:4f5df867e9367f76acfc39a0f85487dc63526e27735fa82fc57d6a652bafbbf6</span></span><br><span class=\"line\">  <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">    <span class=\"attr\">node-role.kubernetes.io/edge:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">affinity:</span></span><br><span class=\"line\">    <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">        <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">            <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">              <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">              <span class=\"attr\">values:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">nginx-ingress</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">component</span></span><br><span class=\"line\">              <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">              <span class=\"attr\">values:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">controller</span></span><br><span class=\"line\">          <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br><span class=\"line\">  <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\">        <span class=\"attr\">operator:</span> <span class=\"string\">Exists</span></span><br><span class=\"line\">        <span class=\"attr\">effect:</span> <span class=\"string\">NoSchedule</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\">        <span class=\"attr\">operator:</span> <span class=\"string\">Exists</span></span><br><span class=\"line\">        <span class=\"attr\">effect:</span> <span class=\"string\">PreferNoSchedule</span></span><br></pre></td></tr></table></figure>\n\n<p>nginx ingress controller的副本数replicaCount为1，将被调度到node1这个边缘节点上。这里并没有指定nginx ingress controller service的externalIPs，而是通过hostNetwork: true设置nginx ingress controller使用宿主机网络。 因为k8s.gcr.io被墙，这里替换成unreachableg/k8s.gcr.io<em>ingress-nginx</em>controller提前拉取一下镜像:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">crictl pull unreachableg/k8s.gcr.io_ingress-nginx_controller:v1.1.0</span><br><span class=\"line\">helm install ingress-nginx ingress-nginx-4.0.13.tgz --create-namespace -n ingress-nginx -f values.yaml</span><br><span class=\"line\">kubectl get pod -n ingress-nginx</span><br><span class=\"line\">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">ingress-nginx-controller-7f574989bc-xwbf4   1/1     Running   0          117s</span><br></pre></td></tr></table></figure>\n\n<p>测试访问<a href=\"http://192.168.96.151返回默认的nginx/\">http://192.168.96.151返回默认的nginx</a> 404页，则部署完成。</p>\n<h2 id=\"使用Helm部署dashboard\"><a href=\"#使用Helm部署dashboard\" class=\"headerlink\" title=\"使用Helm部署dashboard\"></a>使用Helm部署dashboard</h2><p>先部署metrics-server：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.2/components.yaml</span><br></pre></td></tr></table></figure>\n\n<p>修改components.yaml中的image为<br>docker.io/unreachableg/k8s.gcr.io_metrics-server_metrics-server:v0.5.2。 修改components.yaml中容器的启动参数，加入–kubelet-insecure-tls。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f components.yaml</span><br></pre></td></tr></table></figure>\n\n<p>metrics-server的pod正常启动后，等一段时间就可以使用kubectl top查看集群和pod的metrics信息:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl top node --use-protocol-buffers=<span class=\"literal\">true</span></span><br><span class=\"line\">NAME    CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class=\"line\">node1   219m         5%     3013Mi          39%</span><br><span class=\"line\">node2   102m         2%     1576Mi          20%</span><br><span class=\"line\">node3   110m         2%     1696Mi          21%</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl top pod -n kube-system --use-protocol-buffers=<span class=\"literal\">true</span></span><br><span class=\"line\">NAME                                    CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">coredns-59d64cd4d4-9mclj                4m           17Mi</span><br><span class=\"line\">coredns-59d64cd4d4-fj7xr                4m           17Mi</span><br><span class=\"line\">etcd-node1                              25m          154Mi</span><br><span class=\"line\">kube-apiserver-node1                    80m          465Mi</span><br><span class=\"line\">kube-controller-manager-node1           17m          61Mi</span><br><span class=\"line\">kube-proxy-hhlhc                        1m           21Mi</span><br><span class=\"line\">kube-proxy-nrhq7                        1m           19Mi</span><br><span class=\"line\">kube-proxy-phmrw                        1m           17Mi</span><br><span class=\"line\">kube-scheduler-node1                    4m           24Mi</span><br><span class=\"line\">kubernetes-dashboard-5cb95fd47f-6lfnm   3m           36Mi</span><br><span class=\"line\">metrics-server-9ddcc8ddf-jvlzs          5m           21Mi</span><br></pre></td></tr></table></figure>\n\n<p>接下来使用helm部署k8s的dashboard，添加chart repo:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm repo add kubernetes-dashboard https:<span class=\"regexp\">//</span>kubernetes.github.io<span class=\"regexp\">/dashboard/</span></span><br><span class=\"line\">helm repo update</span><br></pre></td></tr></table></figure>\n\n<p>查看chart的可定制配置:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm show values kubernetes-dashboard/kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n\n<p>对value.yaml定制配置如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">image:</span><br><span class=\"line\">  repository: kubernetesui/dashboard</span><br><span class=\"line\">  tag: v2.4.0</span><br><span class=\"line\">ingress:</span><br><span class=\"line\">  enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/ssl-redirect: <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/backend-protocol: <span class=\"string\">&quot;HTTPS&quot;</span></span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - k8s.example.com</span><br><span class=\"line\">  tls:</span><br><span class=\"line\">    - secretName: example-com-tls-secret</span><br><span class=\"line\">      hosts:</span><br><span class=\"line\">      - k8s.example.com</span><br><span class=\"line\">metricsScraper:</span><br><span class=\"line\">  enabled: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>先创建存放k8s.example.comssl证书的secret:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create secret tls example-com-tls-secret \\</span><br><span class=\"line\">  --cert=cert.pem \\</span><br><span class=\"line\">  --key=key.pem \\</span><br><span class=\"line\">  -n kube-system</span><br></pre></td></tr></table></figure>\n\n<p>使用helm部署dashboard:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard \\</span><br><span class=\"line\">-n kube-system \\</span><br><span class=\"line\">-f values.yaml</span><br></pre></td></tr></table></figure>\n\n<p>确认上面的命令部署成功。</p>\n<p>创建管理员sa:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create serviceaccount kube-dashboard-admin-sa -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl create clusterrolebinding kube-dashboard-admin-sa \\</span><br><span class=\"line\">--clusterrole=cluster-admin --serviceaccount=kube-system:kube-dashboard-admin-sa</span><br></pre></td></tr></table></figure>\n\n<p>获取集群管理员登录dashboard所需token:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system get secret | grep kube-dashboard-admin-sa-token</span><br><span class=\"line\">kube-dashboard-admin-sa-token-rcwlb              kubernetes.io/service-account-token   3      68s</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl describe -n kube-system secret/kube-dashboard-admin-sa-token-rcwlb </span><br><span class=\"line\">Name:         kube-dashboard-admin-sa-token-rcwlb</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: kube-dashboard-admin-sa</span><br><span class=\"line\">              kubernetes.io/service-account.uid: fcdf27f6-f6f9-4f76-b64e-edc91fb1479b</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkYxWTd5aDdzYWsyeWJVMFliUUhJMXI4YWtMZFd4dGFDT1N4eEZoam9HLUEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlLWRhc2hib2FyZC1hZG1pbi1zYS10b2tlbi1yY3dsYiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlLWRhc2hib2FyZC1hZG1pbi1zYSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImZjZGYyN2Y2LWY2ZjktNGY3Ni1iNjRlLWVkYzkxZmIxNDc5YiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTprdWJlLWRhc2hib2FyZC1hZG1pbi1zYSJ9.R3l19_Nal4B2EktKFSJ7CgOqAngG_MTgzHRRjWdREN7dLALyfiRXYIgZQ90hxM-a9z2sPXBzfJno4OGP4fPX33D8h_4fgxfpVLjKqjdlZ_HAks_6sV9PBzDNXb_loNW8ECfsleDgn6CZin8Vx1w7sgkoEIKq0H-iZ8V9pRV0fTuOZcB-70pV_JX6H6WBEOgRIAZswhAoyUMvH1qNl47J5xBNwKRgcqP57NCIODo6FiClxfY3MWo2vz44R5wYCuBJJ70p6aBWixjDSxnp5u9mUP0zMF_igICl_OfgKuPyaeuIL83U8dS5ovEwPPGzX5mHUgaPH7JLZmKRNXJqLhTweA</span><br><span class=\"line\">ca.crt:     1066 bytes</span><br></pre></td></tr></table></figure>\n\n<p>使用上面的token登录k8s dashboard。</p>\n","categories":["kubernetes"],"tags":["k8s","container"]},{"title":"Hello World","url":"/2021/07/14/tools/%E5%8D%9A%E5%AE%A2%E5%8F%8A%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/hexo/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Flowable基本操作","url":"/2021/09/19/java/java-tec-stack/WorkerFlow/Flowable/Flowable-guide/","content":"<h1 id=\"Flowable基本操作\"><a href=\"#Flowable基本操作\" class=\"headerlink\" title=\"Flowable基本操作\"></a>Flowable基本操作</h1><h1 id=\"创建ProcessEngine\"><a href=\"#创建ProcessEngine\" class=\"headerlink\" title=\"创建ProcessEngine\"></a>创建ProcessEngine</h1><p>  创建一个基本的maven工程，可以是Eclipse也可以是其他IDEA。然后添加两个依赖</p>\n<ul>\n<li>Flowable流程引擎。使我们可以创建一个ProcessEngine流程引擎对象，并访问Flowable API。</li>\n<li>一个是MySQL的数据库驱动</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>在<em>pom.xml</em>文件中添加下列行：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flowable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flowable-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后创建一个普通的Java类，添加对应的main方法，首先要做的是初始化<strong>「ProcessEngine」</strong>流程引擎实例。这是一个线程安全的对象，因此通常只需要在一个应用中初始化一次。 <em>ProcessEngine</em>由<strong>「ProcessEngineConfiguration」</strong>实例创建。该实例可以配置与调整流程引擎的设置。 通常使用一个配置XML文件创建<em>ProcessEngineConfiguration</em>，但是（像在这里做的一样）也可以编程方式创建它。 <em>ProcessEngineConfiguration</em>所需的最小配置，是数据库JDBC连接：</p>\n<p>注意在mysql8.0中执行可能出现如下的错误</p>\n<p><img src=\"/2021/09/19/java/java-tec-stack/WorkerFlow/Flowable/Flowable-guide/fecbdbd1adb844f48b2aa36111e5daae.png\" alt=\"全网最火的工作流框架Flowable完整教程之基本操作\"></p>\n<p>出现这种情况只需要在mysql的连接字符串中添加上nullCatalogMeansCurrent=true，设置为只查当前连接的schema库即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn1?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后应用运行没有问题，但也没有在控制台提供有用的信息，只有一条消息提示日志没有正确配置。Flowable使用SLF4J作为内部日志框架。在这个例子中，我们使用log4j作为SLF4J的实现。因此在pom.xml文件中添加下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Log4j需要一个配置文件。在<em>src/main/resources</em>文件夹下添加<em>log4j.properties</em>文件，并写入下列内容：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span>=<span class=\"string\">DEBUG, CA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.CA</span>=<span class=\"string\">org.apache.log4j.ConsoleAppender</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.CA.layout</span>=<span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.CA.layout.ConversionPattern</span>= <span class=\"string\">%d&#123;hh:mm:ss,SSS&#125; [%t] %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>\n\n<p>重新运行应用。应该可以看到关于引擎启动与创建数据库表结构的提示日志：</p>\n<p>同时可以看到创建了相关的表结构在数据库中</p>\n<p>这样就得到了一个启动可用的流程引擎。接下来为它提供一个流程！</p>\n<h1 id=\"部署流程定义\"><a href=\"#部署流程定义\" class=\"headerlink\" title=\"部署流程定义\"></a>部署流程定义</h1><p>接下来我们构建一个非常简单的请假流程，Flowable引擎需要流程定义为BPMN 2.0格式，这是一个业界广泛接受的XML标准。 在Flowable术语中，我们将其称为一个<strong>流程定义(process definition)<strong>「。一个</strong></strong><em>流程定义***<strong>可以启动多个」</strong>流程实例(process instance)*<em>。</em>流程定义*可以看做是重复执行流程的蓝图。 在这个例子中，</em>流程定义<em>定义了请假的各个步骤，而一个</em>流程实例*对应某个雇员提出的一个请假申请。</p>\n<p>  BPMN 2.0存储为XML，并包含可视化的部分：使用标准方式定义了每个步骤类型（人工任务，自动服务调用，等等）如何呈现，以及如何互相连接。这样BPMN 2.0标准使技术人员与业务人员能用双方都能理解的方式交流业务流程。</p>\n<p>  我们要使用的流程定义为：</p>\n<p><img src=\"/2021/09/19/java/java-tec-stack/WorkerFlow/Flowable/Flowable-guide/79d311a10e5d4ebf974d321374d662d7.png\" alt=\"全网最火的工作流框架Flowable完整教程之基本操作\"></p>\n<p>流程定义说明：</p>\n<ul>\n<li>我们假定启动流程需要提供一些信息，例如雇员名字、请假时长以及说明。当然，这些可以单独建模为流程中的第一步。 但是如果将它们作为流程的“输入信息”，就能保证只有在实际请求时才会建立一个流程实例。否则（将提交作为流程的第一步），用户可能在提交之前改变主意并取消，但流程实例已经创建了。 在某些场景中，就可能影响重要的指标（例如启动了多少申请，但还未完成），取决于业务目标。</li>\n<li>左侧的圆圈叫做**启动事件(start event)**。这是一个流程实例的起点。</li>\n<li>第一个矩形是一个**用户任务(user task)**。这是流程中用户操作的步骤。在这个例子中，经理需要批准或驳回申请</li>\n<li>取决于经理的决定，<strong>「排他网关(exclusive gateway)」</strong> (带叉的菱形)会将流程实例路由至批准或驳回路径</li>\n<li>如果批准，则需要将申请注册至某个外部系统，并跟着另一个用户任务，将经理的决定通知给申请人。当然也可以改为发送邮件。</li>\n<li>如果驳回，则为雇员发送一封邮件通知他。</li>\n</ul>\n<p>  一般来说，这样的<em>流程定义</em>使用可视化建模工具建立，如Flowable Designer(Eclipse)或Flowable Web Modeler(Web应用)。但在这里我们直接撰写XML，以熟悉BPMN 2.0及其概念。</p>\n<p>  与上面展示的流程图对应的BPMN 2.0 XML在下面显示。请注意这只包含了“流程部分”。如果使用图形化建模工具，实际的XML文件还将包含“可视化部分”，用于描述图形信息，如流程定义中各个元素的坐标（所有的图形化信息包含在XML的<em>BPMNDiagram</em>标签中，作为<em>definitions</em>标签的子元素）。</p>\n<p>  将下面的XML保存在<em>src/main/resources</em>文件夹下名为<em>holiday-request.bpmn20.xml</em>的文件中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;holidayRequest&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Holiday Request&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startEvent&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startEvent&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;approveTask&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;approveTask&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Approve or reject request&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;approveTask&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;decision&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;decision&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;decision&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class=\"line\">                &lt;![CDATA[</span><br><span class=\"line\">          $&#123;approved&#125;</span><br><span class=\"line\">        ]]&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span>  <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;decision&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class=\"line\">                &lt;![CDATA[</span><br><span class=\"line\">          $&#123;!approved&#125;</span><br><span class=\"line\">        ]]&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Enter holidays in external system&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Holiday approved&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Send out rejection email&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经有了流程BPMN 2.0 XML文件，下来需要将它**部署(deploy)**<em>到引擎中。部署</em>一个流程定义意味着：</p>\n<ul>\n<li>流程引擎会将XML文件存储在数据库中，这样可以在需要的时候获取它</li>\n<li>流程定义转换为内部的、可执行的对象模型，这样使用它就可以启动<em>流程实例</em>。</li>\n</ul>\n<p>  将流程定义<em>部署</em>至Flowable引擎，需要使用<em>RepositoryService</em>，其可以从<em>ProcessEngine</em>对象获取。使用<em>RepositoryService</em>，可以通过XML文件的路径创建一个新的*部署(Deployment)<em>，并调用</em>deploy()*方法实际执行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDeploy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 部署流程 获取RepositoryService对象</span></span><br><span class=\"line\">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class=\"line\">        Deployment deployment = repositoryService.createDeployment()<span class=\"comment\">// 创建Deployment对象</span></span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;holiday-request.bpmn20.xml&quot;</span>) <span class=\"comment\">// 添加流程部署文件</span></span><br><span class=\"line\">                .name(<span class=\"string\">&quot;请求流程&quot;</span>) <span class=\"comment\">// 设置部署流程的名称</span></span><br><span class=\"line\">                .deploy(); <span class=\"comment\">// 执行部署操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deployment.getId() = &quot;</span> + deployment.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deployment.getName() = &quot;</span> + deployment.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在后台表结构也可以看到相关的信息</p>\n<p>act_re_deployment: 流程定义部署表，每部署一次就增加一条记录</p>\n<p>act_re_procdef ：流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p>\n<p>act_ge_bytearray ：流程资源表，流程部署的 bpmn文件和png图片会保存在该表中</p>\n<p>我们现在可以通过API查询验证流程定义已经部署在引擎中（并学习一些API）。通过<em>RepositoryService</em>创建的<em>ProcessDefinitionQuery</em>对象实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看流程定义</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDeployQuery</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 部署流程 获取RepositoryService对象</span></span><br><span class=\"line\">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程定义对象</span></span><br><span class=\"line\">        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()</span><br><span class=\"line\">                .deploymentId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getId() = &quot;</span> + processDefinition.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getName() = &quot;</span> + processDefinition.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getDeploymentId() = &quot;</span> + processDefinition.getDeploymentId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getDescription() = &quot;</span> + processDefinition.getDescription());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动流程实例\"><a href=\"#启动流程实例\" class=\"headerlink\" title=\"启动流程实例\"></a>启动流程实例</h1><p>现在已经在流程引擎中<em>部署</em>了流程定义，因此可以使用这个<em>流程定义</em>作为“模板”启动<em>流程实例</em>。</p>\n<p><img src=\"/2021/09/19/java/java-tec-stack/WorkerFlow/Flowable/Flowable-guide/a73085259af34e699f4bc8547a103e60.png\" alt=\"全网最火的工作流框架Flowable完整教程之基本操作\"></p>\n<p>要启动流程实例，需要提供一些初始化<em>流程变量</em>。一般来说，可以通过呈现给用户的表单，或者在流程由其他系统自动触发时通过REST API，来获取这些变量。在这个例子里，我们简化直接在代码中定义了，我们使用<em>RuntimeService</em>启动一个<em>流程实例</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRunProcess</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">        RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 构建流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;employee&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>) ;<span class=\"comment\">// 谁申请请假</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;nrOfHolidays&quot;</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 请几天假</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;description&quot;</span>,<span class=\"string\">&quot;工作累了，想出去玩玩&quot;</span>); <span class=\"comment\">// 请假的原因</span></span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">        ProcessInstance processInstance = runtimeService</span><br><span class=\"line\">                .startProcessInstanceByKey(<span class=\"string\">&quot;holidayRequest&quot;</span>, variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动流程实例涉及到的表结构：</p>\n<ul>\n<li>act_hi_actinst 流程实例执行历史</li>\n<li>act_hi_identitylink 流程的参与用户的历史信息</li>\n<li>act_hi_procinst 流程实例历史信息</li>\n<li>act_hi_taskinst 流程任务历史信息</li>\n<li>act_ru_execution 流程执行信息</li>\n<li>act_ru_identitylink 流程的参与用户信息</li>\n<li>act_ru_task 任务信息</li>\n</ul>\n<h1 id=\"查看任务\"><a href=\"#查看任务\" class=\"headerlink\" title=\"查看任务\"></a>查看任务</h1><p>上面员工发起了一个请假流程，接下来就会流转到总经理这儿来处理，之前我们没有指定经理这的处理人，我们可以加一个</p>\n<p><img src=\"/2021/09/19/java/java-tec-stack/WorkerFlow/Flowable/Flowable-guide/72b3ad9b2a2543fb99b8c79cb29b5ba0.png\" alt=\"全网最火的工作流框架Flowable完整教程之基本操作\"></p>\n<p>然后我们来查看下lisi的任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueryTask</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">        TaskService taskService = processEngine.getTaskService();</span><br><span class=\"line\">        List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionKey(<span class=\"string\">&quot;holidayRequestNew&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getProcessDefinitionId() = &quot;</span> + task.getProcessDefinitionId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getAssignee() = &quot;</span> + task.getAssignee());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"完成任务\"><a href=\"#完成任务\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h1><p>  现在李四这个角色可以来完成当前的任务了</p>\n<p><img src=\"/2021/09/19/java/java-tec-stack/WorkerFlow/Flowable/Flowable-guide/cbf37b57747649acab341a981a37d897.png\" alt=\"全网最火的工作流框架Flowable完整教程之基本操作\"></p>\n<p>在此处我们直接解决掉这个请假，然后会走发送拒绝邮件的流程，这块我们需要用到JavaDelegate来触发。</p>\n<p><img src=\"/2021/09/19/java/java-tec-stack/WorkerFlow/Flowable/Flowable-guide/03aa4eab385745c49a8996e608bc70d4.png\" alt=\"全网最火的工作流框架Flowable完整教程之基本操作\"></p>\n<p>我们定义这样一个Java类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendRejectionMail</span> <span class=\"keyword\">implements</span> <span class=\"title\">JavaDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 触发发送邮件的操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delegateExecution</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(DelegateExecution delegateExecution)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请假被拒绝,,,安心工作吧&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后来完成任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCompleteTask</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">        TaskService taskService = processEngine.getTaskService();</span><br><span class=\"line\">        Task task = taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionKey(<span class=\"string\">&quot;holidayRequestNew&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;approved&quot;</span>,<span class=\"keyword\">false</span>); <span class=\"comment\">// 拒绝请假</span></span><br><span class=\"line\">        <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">        taskService.complete(task.getId(),variables);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后可以看到JavaDelegate触发了</p>\n<h1 id=\"流程的删除\"><a href=\"#流程的删除\" class=\"headerlink\" title=\"流程的删除\"></a>流程的删除</h1><p>  有些流程已经没有用了，我们需要删除掉，其实也非常简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDeleteProcess</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">        RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"comment\">// 删除流程定义，如果该流程定义已经有了流程实例启动则删除时报错</span></span><br><span class=\"line\">        <span class=\"comment\">// repositoryService.deleteDeployment(&quot;1&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置为TRUE 级联删除流程定义，及时流程有实例启动，也可以删除，设置为false 非级联删除操作。</span></span><br><span class=\"line\">        repositoryService.deleteDeployment(<span class=\"string\">&quot;2501&quot;</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看历史信息\"><a href=\"#查看历史信息\" class=\"headerlink\" title=\"查看历史信息\"></a>查看历史信息</h1><p>选择使用Flowable这样的流程引擎的原因之一，是它可以自动存储所有流程实例的<strong>「审计数据」</strong>或<strong>「历史数据」</strong>。这些数据可以用于创建报告，深入展现组织运行的情况，瓶颈在哪里，等等。</p>\n<p>  例如，如果希望显示流程实例已经执行的时间，就可以从<em>ProcessEngine</em>获取<em>HistoryService</em>，并创建*历史活动(historical activities)*的查询。在下面的代码片段中，可以看到我们添加了一些额外的过滤条件：</p>\n<ul>\n<li>只选择一个特定流程实例的活动</li>\n<li>只选择已完成的活动</li>\n</ul>\n<p>  结果按照结束时间排序，代表其执行顺序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看历史</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueryHistory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        ProcessEngineConfiguration cfg = <span class=\"keyword\">new</span> StandaloneProcessEngineConfiguration()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class=\"line\">        HistoryService historyService = processEngine.getHistoryService();</span><br><span class=\"line\">        List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holidayRequestNew:1:10003&quot;</span>)</span><br><span class=\"line\">                .finished()</span><br><span class=\"line\">                .orderByHistoricActivityInstanceEndTime().asc()</span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HistoricActivityInstance historicActivityInstance : list) &#123;</span><br><span class=\"line\">            System.out.println(historicActivityInstance.getActivityId() + <span class=\"string\">&quot; took &quot;</span></span><br><span class=\"line\">                    + historicActivityInstance.getDurationInMillis() + <span class=\"string\">&quot; milliseconds&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","categories":["java-tec-stack"],"tags":["java","Flowable"]},{"title":"EFK环境搭建","url":"/2021/12/18/cloud-native/kubernetes/kubernetes-app/log-collect/EFK/","content":"<h1 id=\"EFK环境搭建\"><a href=\"#EFK环境搭建\" class=\"headerlink\" title=\"EFK环境搭建\"></a>EFK环境搭建</h1><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Kubernetes中比较流行的日志收集解决方案是Elasticsearch、Fluentd和 Kibana（EFK）技术栈，也是目前官方比较推荐的一种方案。</p>\n<p><code>Elasticsearch</code> 是一个实时的、分布式的可扩展的搜索引擎，允许进行全文、结构化搜索，它通常用于索引和搜索大量日志数据，也可用于搜索许多不同类型的文档。</p>\n<p>Elasticsearch 通常与 <code>Kibana</code> 一起部署，Kibana 是 Elasticsearch 的一个功能强大的数据可视化 Dashboard，Kibana 允许你通过 web 界面来浏览 Elasticsearch 日志数据。</p>\n<p><code>Fluentd</code>是一个流行的开源数据收集器，我们将在 Kubernetes 集群节点上安装 Fluentd，通过获取容器日志文件、过滤和转换日志数据，然后将数据传递到 Elasticsearch 集群，在该集群中对其进行索引和存储。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"创建Elasticsearch集群\"><a href=\"#创建Elasticsearch集群\" class=\"headerlink\" title=\"创建Elasticsearch集群\"></a>创建Elasticsearch集群</h1><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logging</span></span><br></pre></td></tr></table></figure>\n\n<p>然后通过kubectl创建该namespace，创建名为logging的命名空间</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl create -f kube-logging.yaml </span></span><br><span class=\"line\">namespace/logging created</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\"># kubectl get ns</span></span><br><span class=\"line\">NAME                   STATUS   AGE</span><br><span class=\"line\">default                Active   31d</span><br><span class=\"line\">kube-node-lease        Active   31d</span><br><span class=\"line\">kube-public            Active   31d</span><br><span class=\"line\">kube-system            Active   31d</span><br><span class=\"line\">kubernetes-dashboard   Active   28d</span><br><span class=\"line\">logging                Active   7s</span><br></pre></td></tr></table></figure>\n\n<p>使用3个Elasticsearch Pod来避免 高可用下多节点集群中出现的“脑裂”问题，一个关键的是您应该设置参数<code>discover.zen.minimum_master_nodes=N/2+1</code>，其中<code>N</code>是 Elasticsearch 集群中符合主节点的节点数，比如我们这里3个节点，意味着<code>N</code>应该设置为2。</p>\n<p>首先创建一个名为elasticsearch的headless服务，新建文件elasticearch-svc.yaml:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">rest</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">inter-node</span></span><br></pre></td></tr></table></figure>\n\n<p>定义了一个名为 elasticsearch 的 Service，指定标签<code>app=elasticsearch</code>，当我们将 Elasticsearch StatefulSet 与此服务关联时，服务将返回带有标签<code>app=elasticsearch</code>的 Elasticsearch Pods 的 DNS A 记录，然后设置<code>clusterIP=None</code>，将该服务设置成无头服务。最后，我们分别定义端口9200、9300，分别用于与 REST API 交互，以及用于节点间通信。</p>\n<p>使用kubectl 直接创建资源对象：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl create -f elasticsearch-svc.yaml </span></span><br><span class=\"line\">service/elasticsearch created</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\"># kubectl get svc -n logging</span></span><br><span class=\"line\">NAME           TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">elasticsearch   ClusterIP   None         &lt;none&gt;        9200/TCP,9300/TCP   7s</span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经为 Pod 设置了无头服务和一个稳定的域名<code>.elasticsearch.logging.svc.cluster.local</code>，接下来我们通过 StatefulSet 来创建具体的 Elasticsearch 的 Pod 应用。</p>\n<p>定义elasticsearch的配置文件，elasticsearch-conf.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    cluster.name: k8s-log</span></span><br><span class=\"line\"><span class=\"string\">    node.name: &quot;$&#123;POD_NAME&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    network.host: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">    cluster.initial_master_nodes: [&quot;es-cluster-0&quot;,&quot;es-cluster-1&quot;,&quot;es-cluster-2&quot;]</span></span><br><span class=\"line\"><span class=\"string\">    discovery.zen.ping.unicast.hosts: [&quot;es-cluster-0.elasticsearch&quot;,&quot;es-cluster-1.elasticsearch&quot;,&quot;es-cluster-2.elasticsearch&quot;]</span></span><br><span class=\"line\"><span class=\"string\">    xpack.security.enabled: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">    bootstrap.system_call_filter: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">    discovery.zen.minimum_master_nodes: &quot;2&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建该configmap</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl create -f elasticsearch-conf.yaml</span></span><br><span class=\"line\"><span class=\"string\">​</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl get configmap elasticsearch -n logging -o yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    cluster.name: k8s-log</span></span><br><span class=\"line\"><span class=\"string\">    node.name: &quot;$&#123;POD_NAME&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    network.host: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">    cluster.initial_master_nodes: [&quot;es-cluster-0&quot;,&quot;es-cluster-1&quot;,&quot;es-cluster-2&quot;]</span></span><br><span class=\"line\"><span class=\"string\">    discovery.zen.ping.unicast.hosts: [&quot;es-cluster-0.elasticsearch&quot;,&quot;es-cluster-1.elasticsearch&quot;,&quot;es-cluster-2.elasticsearch&quot;]</span></span><br><span class=\"line\"><span class=\"string\">    xpack.security.enabled: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">    bootstrap.system_call_filter: &quot;false&quot;</span></span><br><span class=\"line\"><span class=\"string\">    discovery.zen.minimum_master_nodes: &quot;2&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2020-07-07T01:05:33Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">managedFields:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">fieldsType:</span> <span class=\"string\">FieldsV1</span></span><br><span class=\"line\">    <span class=\"attr\">fieldsV1:</span></span><br><span class=\"line\">      <span class=\"attr\">f:data:</span></span><br><span class=\"line\">        <span class=\"string\">.:</span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"attr\">f:elasticsearch.yml:</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"attr\">manager:</span> <span class=\"string\">kubectl</span></span><br><span class=\"line\">    <span class=\"attr\">operation:</span> <span class=\"string\">Update</span></span><br><span class=\"line\">    <span class=\"attr\">time:</span> <span class=\"string\">&quot;2020-07-07T01:05:33Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;5924749&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">selfLink:</span> <span class=\"string\">/api/v1/namespaces/logging/configmaps/elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">2224da1f-78ac-47e7-bcda-814952bbb776</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cluster.name：Elasticsearch 集群的名称，我们这里命名成 k8s-logs。</li>\n<li>node.name：节点的名称，通过<code>metadata.name</code>来获取。这将解析为 es-cluster-[0,1,2]，取决于节点的指定顺序。</li>\n<li>discovery.zen.ping.unicast.hosts：此字段用于设置在 Elasticsearch 集群中节点相互连接的发现方法。我们使用 unicastdiscovery 方式，它为我们的集群指定了一个静态主机列表。由于我们之前配置的无头服务，我们的 Pod 具有唯一的 DNS 域<code>es-cluster-[0,1,2].elasticsearch.logging.svc.cluster.local</code>，因此我们相应地设置此变量。由于都在同一个 namespace 下面，所以我们可以将其缩短为<code>es-cluster-[0,1,2].elasticsearch</code>。要了解有关 Elasticsearch 发现的更多信息，请参阅 Elasticsearch 官方文档：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery.html%E3%80%82\">https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery.html。</a></li>\n<li>discovery.zen.minimum_master_nodes：我们将其设置为<code>(N/2) + 1</code>，<code>N</code>是我们的群集中符合主节点的节点的数量。我们有3个 Elasticsearch 节点，因此我们将此值设置为2（向下舍入到最接近的整数）。要了解有关此参数的更多信息，请参阅官方 Elasticsearch 文档：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#split-brain%E3%80%82\">https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#split-brain。</a></li>\n</ul>\n<p>Kubernetes StatefulSet 允许我们为 Pod 分配一个稳定的标识和持久化存储，Elasticsearch 需要稳定的存储来保证 Pod 在重新调度或者重启后的数据依然不变，所以需要使用 StatefulSet 来管理 Pod。</p>\n<p>新建名为 elasticsearch-statefulset.yaml 的资源清单文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br></pre></td></tr></table></figure>\n\n<p>该内容中，我们定义了一个名为 es-cluster 的 StatefulSet 对象，然后定义<code>serviceName=elasticsearch</code>和前面创建的 Service 相关联，这可以确保使用以下 DNS 地址访问 StatefulSet 中的每一个 Pod：<code>es-cluster-[0,1,2].elasticsearch.logging.svc.cluster.local</code>，其中[0,1,2]对应于已分配的 Pod 序号。</p>\n<p>然后指定3个副本，将 matchLabels 设置为<code>app=elasticsearch</code>，所以 Pod 的模板部分<code>.spec.template.metadata.lables</code>也必须包含<code>app=elasticsearch</code>标签。</p>\n<p>然后定义 Pod 模板部分内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">elasticsearch:7.5.0</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">rest</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">inter-node</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_JAVA_OPTS</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;-Xms512m -Xmx512m&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-config</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">elasticsearch.yml</span> </span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-config</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ES_JAVA_OPTS：这里我们设置为<code>-Xms512m -Xmx512m</code>，告诉<code>JVM</code>使用<code>512 MB</code>的最小和最大堆。您应该根据群集的资源可用性和需求调整这些参数。要了解更多信息，请参阅设置堆大小的相关文档：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html%E3%80%82\">https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html。</a></li>\n</ul>\n<p>接下来添加关于 initContainer 的内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">fix-permissions</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/google_containers/busybox</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>,<span class=\"string\">&#x27;-c&#x27;</span>,<span class=\"string\">&#x27;chown -R 1000.1000 /usr/share/elasticsearch/data&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-vm-max-map</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/google_containers/busybox</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sysctl&#x27;</span>,<span class=\"string\">&#x27;-w&#x27;</span>,<span class=\"string\">&#x27;vm.max_map_count=262144&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-fd-ulimit</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>,<span class=\"string\">&#x27;-c&#x27;</span>,<span class=\"string\">&#x27;ulimit -n 65535&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>第一个名为 fix-permissions 的容器用来运行 chown 命令，将 Elasticsearch 数据目录的用户和组更改为<code>1000:1000</code>（Elasticsearch 用户的 UID）。因为默认情况下，Kubernetes 用 root 用户挂载数据目录，这会使得 Elasticsearch 无法方法该数据目录，可以参考 Elasticsearch 生产中的一些默认注意事项相关文档说明：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_notes_for_production_use_and_defaults%E3%80%82\">https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_notes_for_production_use_and_defaults。</a></p>\n<p>第二个名为 increase-vm-max-map 的容器用来增加操作系统对<code>mmap</code>计数的限制，默认情况下该值可能太低，导致内存不足的错误，要了解更多关于该设置的信息，可以查看 Elasticsearch 官方文档说明：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html%E3%80%82\">https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html。</a></p>\n<p>最后一个初始化容器是用来执行<code>ulimit</code>命令增加打开文件描述符的最大数量的。</p>\n<blockquote>\n<p>此外 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_notes_for_production_use_and_defaults\">Elastisearch Notes for Production Use</a> 文档还提到了由于性能原因最好禁用 swap，当然对于 Kubernetes 集群而言，最好也是禁用 swap 分区的。</p>\n</blockquote>\n<p>现在我们已经定义了主应用容器和它之前运行的 Init Containers 来调整一些必要的系统参数，接下来我们可以添加数据目录的持久化相关的配置，在 StatefulSet 中，使用 volumeClaimTemplates 来定义 volume 模板即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span> [ <span class=\"string\">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">es-data-db</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br></pre></td></tr></table></figure>\n\n<p>这里使用 volumeClaimTemplates 来定义持久化模板，Kubernetes 会使用它为 Pod 创建 PersistentVolume，设置访问模式为<code>ReadWriteOnce</code>，这意味着它只能被 mount 到单个节点上进行读写，然后最重要的是使用了一个名为 es-data-db 的 StorageClass 对象，新建一个 elasticsearch-storageclass.yaml 的文件，文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-data-db</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">kubernetes.io/glusterfs</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">resturl:</span> <span class=\"string\">http://192.168.10.106:18080</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，完整的 Elasticsearch StatefulSet 资源清单文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">elasticsearch:7.5.0</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">rest</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">inter-node</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_JAVA_OPTS</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;-Xms512m -Xmx512m&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-config</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">elasticsearch.yml</span> </span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-config</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">fix-permissions</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/google_containers/busybox</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>,<span class=\"string\">&#x27;-c&#x27;</span>,<span class=\"string\">&#x27;chown -R 1000.1000 /usr/share/elasticsearch/data&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-vm-max-map</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/google_containers/busybox</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sysctl&#x27;</span>,<span class=\"string\">&#x27;-w&#x27;</span>,<span class=\"string\">&#x27;vm.max_map_count=262144&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-fd-ulimit</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>,<span class=\"string\">&#x27;-c&#x27;</span>,<span class=\"string\">&#x27;ulimit -n 65535&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span> [ <span class=\"string\">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">es-data-db</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">2Gi</span></span><br></pre></td></tr></table></figure>\n\n<p>部署</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl create -f elasticsearch-storageclass.yaml</span></span><br><span class=\"line\">storageclass.storage.k8s.io <span class=\"string\">&quot;es-data-db&quot;</span> created</span><br><span class=\"line\"><span class=\"comment\"># kubectl create -f elasticsearch-statefulset.yaml</span></span><br><span class=\"line\">statefulset.apps/es-cluster created</span><br></pre></td></tr></table></figure>\n\n<p>查看</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl get sts -n logging</span></span><br><span class=\"line\">NAME         READY   AGE</span><br><span class=\"line\">es-cluster   3/3     7m37s</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\"># kubectl get pods -n logging</span></span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">es-cluster-0   1/1     Running   0          7m44s</span><br><span class=\"line\">es-cluster-1   1/1     Running   0          6m20s</span><br><span class=\"line\">es-cluster-2   1/1     Running   0          5m1s</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\"># kubectl get svc -n logging</span></span><br><span class=\"line\">NAME                                                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">elasticserch                                             ClusterIP   None            &lt;none&gt;        9200/TCP,9300/TCP   3h1m</span><br></pre></td></tr></table></figure>\n\n<p>Pods 部署完成后，我们可以通过请求一个 REST API 来检查 Elasticsearch 集群是否正常运行。使用下面的命令将本地端口9200转发到 Elasticsearch 节点（如es-cluster-0）对应的端口：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl port-forward es-cluster-0 9200:9200 --namespace=logging</span></span><br><span class=\"line\">Forwarding from 127.0.0.1:9200 -&gt; 9200</span><br><span class=\"line\">Forwarding from [::1]:9200 -&gt; 9200</span><br></pre></td></tr></table></figure>\n\n<p>然后，在另外的终端窗口中，执行如下请求：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># curl http://localhost:9200/_cluster/state?pretty | more</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;cluster_name&quot;</span> : <span class=\"string\">&quot;k8s-log&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;cluster_uuid&quot;</span> : <span class=\"string\">&quot;iXCjUz9jS_2ndq1VHQhptg&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span> : 18,</span><br><span class=\"line\">  <span class=\"string\">&quot;state_uuid&quot;</span> : <span class=\"string\">&quot;BGVTBoDGTSmnM2BXdJVlbw&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;master_node&quot;</span> : <span class=\"string\">&quot;aL-lsgOIQJ64EMP9T_IRqA&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;blocks&quot;</span> : &#123; &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;nodes&quot;</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;aL-lsgOIQJ64EMP9T_IRqA&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;es-cluster-0&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ephemeral_id&quot;</span> : <span class=\"string\">&quot;8TGAhf9xQ9id2yqImo7y9A&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;transport_address&quot;</span> : <span class=\"string\">&quot;10.32.0.2:9300&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;attributes&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ml.machine_memory&quot;</span> : <span class=\"string\">&quot;2983755776&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;xpack.installed&quot;</span> : <span class=\"string\">&quot;true&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;ml.max_open_jobs&quot;</span> : <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;NbVg-sSYQFuMx0gyyu0ugw&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;es-cluster-2&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ephemeral_id&quot;</span> : <span class=\"string\">&quot;IGDXyo33S5GV779CJgl4fQ&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;transport_address&quot;</span> : <span class=\"string\">&quot;10.38.0.3:9300&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;attributes&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ml.machine_memory&quot;</span> : <span class=\"string\">&quot;2983759872&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;ml.max_open_jobs&quot;</span> : <span class=\"string\">&quot;20&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;xpack.installed&quot;</span> : <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;26cjOCdeSwiOIZaNP095Dw&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;es-cluster-1&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ephemeral_id&quot;</span> : <span class=\"string\">&quot;RtSL9qqHQya_m2VAYkTJRA&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;transport_address&quot;</span> : <span class=\"string\">&quot;10.34.0.1:9300&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;attributes&quot;</span> : &#123;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>看到上面的信息就表明我们名为 k8s-logs 的 Elasticsearch 集群成功创建了3个节点：es-cluster-0，es-cluster-1，和es-cluster-2，当前主节点是 es-cluster-0。</p>\n<h1 id=\"创建Kibana服务\"><a href=\"#创建Kibana服务\" class=\"headerlink\" title=\"创建Kibana服务\"></a>创建Kibana服务</h1><p>Elasticsearch 集群启动成功了，接下来我们可以来部署 Kibana 服务，新建一个名为 kibana.yaml 的文件，对应的文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"><span class=\"string\">​</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">kibana:7.5.0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTICSEARCH_URL</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">http://elasticsearch:9200</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5601</span></span><br></pre></td></tr></table></figure>\n\n<p>创建</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl create -f kibana.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl get svc -n logging</span></span><br><span class=\"line\">NAME                                                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">kibana                                                   NodePort    10.97.159.197   &lt;none&gt;        5601:32092/TCP      15m</span><br></pre></td></tr></table></figure>\n\n<p>如果 Pod 已经是 Running 状态了，证明应用已经部署成功了，然后可以通过 NodePort 来访问 Kibana 这个服务，在浏览器中打开<code>http://&lt;任意节点IP&gt;:32092</code>即可，如果看到如下欢迎界面证明 Kibana 已经成功部署到了 Kubernetes集群之中。</p>\n<p><img src=\"/2021/12/18/cloud-native/kubernetes/kubernetes-app/log-collect/EFK/821560-20200827140732458-62105043.png\" alt=\"img\"></p>\n<h1 id=\"部署Fluentd\"><a href=\"#部署Fluentd\" class=\"headerlink\" title=\"部署Fluentd\"></a>部署Fluentd</h1><p><code>Fluentd</code> 是一个高效的日志聚合器，是用 Ruby 编写的，并且可以很好地扩展。对于大部分企业来说，Fluentd 足够高效并且消耗的资源相对较少，另外一个工具<code>Fluent-bit</code>更轻量级，占用资源更少，但是插件相对 Fluentd 来说不够丰富，所以整体来说，Fluentd 更加成熟，使用更加广泛，所以我们这里也同样使用 Fluentd 来作为日志收集工具。</p>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>Fluentd 通过一组给定的数据源抓取日志数据，处理后（转换成结构化的数据格式）将它们转发给其他服务，比如 Elasticsearch、对象存储等等。Fluentd 支持超过300个日志存储和分析服务，所以在这方面是非常灵活的。主要运行步骤如下：</p>\n<ul>\n<li>首先 Fluentd 从多个日志源获取数据</li>\n<li>结构化并且标记这些数据</li>\n<li>然后根据匹配的标签将数据发送到多个目标服务去</li>\n</ul>\n<p><img src=\"/2021/12/18/cloud-native/kubernetes/kubernetes-app/log-collect/EFK/821560-20200827140753100-1977142050.jpg\" alt=\"img\"></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>一般来说我们是通过一个配置文件来告诉 Fluentd 如何采集、处理数据的</p>\n<p>日志源配置</p>\n<p>比如我们这里为了收集 Kubernetes 节点上的所有容器日志，就需要做如下的日志源配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">@id fluentd-containers.log</span><br><span class=\"line\">@type tail</span><br><span class=\"line\">path /var/log/containers/*.log</span><br><span class=\"line\">pos_file /var/log/fluentd-containers.log.pos</span><br><span class=\"line\">time_format %Y-%m-%dT%H:%M:%S.%NZ</span><br><span class=\"line\">tag raw.kubernetes.*</span><br><span class=\"line\">format json</span><br><span class=\"line\">read_from_head true</span><br><span class=\"line\">&lt;/source&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面配置部分参数说明如下：</p>\n<ul>\n<li>id：表示引用该日志源的唯一标识符，该标识可用于进一步过滤和路由结构化日志数据</li>\n<li>type：Fluentd 内置的指令，<code>tail</code>表示 Fluentd 从上次读取的位置通过 tail 不断获取数据，另外一个是<code>http</code>表示通过一个 GET 请求来收集数据。</li>\n<li>path：<code>tail</code>类型下的特定参数，告诉 Fluentd 采集<code>/var/log/containers</code>目录下的所有日志，这是 docker 在 Kubernetes 节点上用来存储运行容器 stdout 输出日志数据的目录。</li>\n<li>pos_file：检查点，如果 Fluentd 程序重新启动了，它将使用此文件中的位置来恢复日志数据收集。</li>\n<li>tag：用来将日志源与目标或者过滤器匹配的自定义字符串，Fluentd 匹配源/目标标签来路由日志数据。</li>\n</ul>\n<p>路由配置</p>\n<p>上面是日志源的配置，接下来看看如何将日志数据发送到 Elasticsearch：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">@id elasticsearch</span><br><span class=\"line\">@type elasticsearch</span><br><span class=\"line\">@log<span class=\"built_in\">_</span>level info</span><br><span class=\"line\">include<span class=\"built_in\">_</span>tag<span class=\"built_in\">_</span>key true</span><br><span class=\"line\">type<span class=\"built_in\">_</span>name fluentd</span><br><span class=\"line\">host &quot;<span class=\"params\">#</span>&#123;ENV[&#x27;OUTPUT<span class=\"built_in\">_</span>HOST&#x27;]&#125;&quot;</span><br><span class=\"line\">port &quot;<span class=\"params\">#</span>&#123;ENV[&#x27;OUTPUT<span class=\"built_in\">_</span>PORT&#x27;]&#125;&quot;</span><br><span class=\"line\">logstash<span class=\"built_in\">_</span>format true</span><br><span class=\"line\">&lt;buffer&gt;</span><br><span class=\"line\">@type file</span><br><span class=\"line\">path /var/log/fluentd-buffers/kubernetes.system.buffer</span><br><span class=\"line\">flush<span class=\"built_in\">_</span>mode interval</span><br><span class=\"line\">retry<span class=\"built_in\">_</span>type exponential<span class=\"built_in\">_</span>backoff</span><br><span class=\"line\">flush<span class=\"built_in\">_</span>thread<span class=\"built_in\">_</span>count 2</span><br><span class=\"line\">flush<span class=\"built_in\">_</span>interval 5s</span><br><span class=\"line\">retry<span class=\"built_in\">_</span>forever</span><br><span class=\"line\">retry<span class=\"built_in\">_</span>max<span class=\"built_in\">_</span>interval 30</span><br><span class=\"line\">chunk<span class=\"built_in\">_</span>limit<span class=\"built_in\">_</span>size &quot;<span class=\"params\">#</span>&#123;ENV[&#x27;OUTPUT<span class=\"built_in\">_</span>BUFFER<span class=\"built_in\">_</span>CHUNK<span class=\"built_in\">_</span>LIMIT&#x27;]&#125;&quot;</span><br><span class=\"line\">queue<span class=\"built_in\">_</span>limit<span class=\"built_in\">_</span>length &quot;<span class=\"params\">#</span>&#123;ENV[&#x27;OUTPUT<span class=\"built_in\">_</span>BUFFER<span class=\"built_in\">_</span>QUEUE<span class=\"built_in\">_</span>LIMIT&#x27;]&#125;&quot;</span><br><span class=\"line\">overflow<span class=\"built_in\">_</span>action block</span><br><span class=\"line\">&lt;/buffer&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>match：标识一个目标标签，后面是一个匹配日志源的正则表达式，我们这里想要捕获所有的日志并将它们发送给 Elasticsearch，所以需要配置成<code>**</code>。</li>\n<li>id：目标的一个唯一标识符。</li>\n<li>type：支持的输出插件标识符，我们这里要输出到 Elasticsearch，所以配置成 elasticsearch，这是 Fluentd 的一个内置插件。</li>\n<li>log_level：指定要捕获的日志级别，我们这里配置成<code>info</code>，表示任何该级别或者该级别以上（INFO、WARNING、ERROR）的日志都将被路由到 Elsasticsearch。</li>\n<li>host/port：定义 Elasticsearch 的地址，也可以配置认证信息，我们的 Elasticsearch 不需要认证，所以这里直接指定 host 和 port 即可。</li>\n<li>logstash_format：Elasticsearch 服务对日志数据构建反向索引进行搜索，将 logstash_format 设置为<code>true</code>，Fluentd 将会以 logstash 格式来转发结构化的日志数据。</li>\n<li>Buffer： Fluentd 允许在目标不可用时进行缓存，比如，如果网络出现故障或者 Elasticsearch 不可用的时候。缓冲区配置也有助于降低磁盘的 IO。</li>\n</ul>\n<p>安装</p>\n<p>要收集 Kubernetes 集群的日志，直接用 DasemonSet 控制器来部署 Fluentd 应用，这样，它就可以从 Kubernetes 节点上采集日志，确保在集群中的每个节点上始终运行一个 Fluentd 容器。当然可以直接使用 Helm 来进行一键安装，为了能够了解更多实现细节，我们这里还是采用手动方法来进行安装。</p>\n<p>首先，我们通过 ConfigMap 对象来指定 Fluentd 配置文件，新建 fluentd-configmap.yaml 文件，文件内容如下：</p>\n<p>（这个配置貌似没效果，直接再daemonset中设置）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">fluentd-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">system.conf:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">      &lt;system&gt;</span></span><br><span class=\"line\"><span class=\"string\">        root_dir /tmp/fluentd-buffers/</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/system&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span>    <span class=\"attr\">containers.input.conf:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">      &lt;source&gt;</span></span><br><span class=\"line\"><span class=\"string\">        @id fluentd-containers.log</span></span><br><span class=\"line\"><span class=\"string\">        @type tail</span></span><br><span class=\"line\"><span class=\"string\">        path /var/log/containers/*.log</span></span><br><span class=\"line\"><span class=\"string\">        pos_file /var/log/es-containers.log.pos</span></span><br><span class=\"line\"><span class=\"string\">        time_format %Y-%m-%dT%H:%M:%S.%NZ</span></span><br><span class=\"line\"><span class=\"string\">        localtime</span></span><br><span class=\"line\"><span class=\"string\">        tag raw.kubernetes.*</span></span><br><span class=\"line\"><span class=\"string\">        format json</span></span><br><span class=\"line\"><span class=\"string\">        read_from_head true</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/source&gt;</span></span><br><span class=\"line\"><span class=\"string\">      # Detect exceptions in the log output and forward them as one log entry.</span></span><br><span class=\"line\"><span class=\"string\">      &lt;match raw.kubernetes.**&gt;</span></span><br><span class=\"line\"><span class=\"string\">        @id raw.kubernetes</span></span><br><span class=\"line\"><span class=\"string\">        @type detect_exceptions</span></span><br><span class=\"line\"><span class=\"string\">        remove_tag_prefix raw</span></span><br><span class=\"line\"><span class=\"string\">        message log</span></span><br><span class=\"line\"><span class=\"string\">        stream stream</span></span><br><span class=\"line\"><span class=\"string\">        multiline_flush_interval 5</span></span><br><span class=\"line\"><span class=\"string\">        max_bytes 500000</span></span><br><span class=\"line\"><span class=\"string\">        max_lines 1000</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/match&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span>    <span class=\"attr\">system.input.conf:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">       # Logs from systemd-journal for interesting services.</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"string\">&lt;source&gt;</span></span><br><span class=\"line\">        <span class=\"string\">@id</span> <span class=\"string\">journald-docker</span></span><br><span class=\"line\">        <span class=\"string\">@type</span> <span class=\"string\">systemd</span></span><br><span class=\"line\">        <span class=\"string\">filters</span> [&#123; <span class=\"attr\">&quot;_SYSTEMD_UNIT&quot;:</span> <span class=\"string\">&quot;docker.service&quot;</span> &#125;]</span><br><span class=\"line\">        <span class=\"string\">&lt;storage&gt;</span></span><br><span class=\"line\">          <span class=\"string\">@type</span> <span class=\"string\">local</span></span><br><span class=\"line\">          <span class=\"string\">persistent</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/storage&gt;</span></span><br><span class=\"line\">        <span class=\"string\">read_from_head</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"string\">tag</span> <span class=\"string\">docker</span></span><br><span class=\"line\">      <span class=\"string\">&lt;/source&gt;</span></span><br><span class=\"line\">      <span class=\"string\">&lt;source&gt;</span></span><br><span class=\"line\">        <span class=\"string\">@id</span> <span class=\"string\">journald-docker</span></span><br><span class=\"line\">        <span class=\"string\">@type</span> <span class=\"string\">systemd</span></span><br><span class=\"line\">        <span class=\"string\">filters</span> [&#123; <span class=\"attr\">&quot;_SYSTEMD_UNIT&quot;:</span> <span class=\"string\">&quot;docker.service&quot;</span> &#125;]</span><br><span class=\"line\">        <span class=\"string\">&lt;storage&gt;</span></span><br><span class=\"line\">          <span class=\"string\">@type</span> <span class=\"string\">local</span></span><br><span class=\"line\">          <span class=\"string\">persistent</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/storage&gt;</span></span><br><span class=\"line\">        <span class=\"string\">read_from_head</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"string\">tag</span> <span class=\"string\">docker</span></span><br><span class=\"line\">      <span class=\"string\">&lt;/source&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">forward.input.conf:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">       # Takes the messages sent over TCP</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"string\">&lt;source&gt;</span></span><br><span class=\"line\">        <span class=\"string\">@type</span> <span class=\"string\">forward</span></span><br><span class=\"line\">      <span class=\"string\">&lt;/source&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">output.conf:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">      # Enriches records with Kubernetes metadata   </span></span><br><span class=\"line\"><span class=\"string\">      &lt;filter kubernetes.**&gt;</span></span><br><span class=\"line\"><span class=\"string\">        @type kubernetes_metadata</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/filter&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;match **&gt;</span></span><br><span class=\"line\"><span class=\"string\">        @id elasticsearch</span></span><br><span class=\"line\"><span class=\"string\">        @type elasticsearch</span></span><br><span class=\"line\"><span class=\"string\">        @log_level info</span></span><br><span class=\"line\"><span class=\"string\">        include_tag_key true</span></span><br><span class=\"line\"><span class=\"string\">        host elasticsearch</span></span><br><span class=\"line\"><span class=\"string\">        port 9200</span></span><br><span class=\"line\"><span class=\"string\">        logstash_format true</span></span><br><span class=\"line\"><span class=\"string\">        request_timeout    30s</span></span><br><span class=\"line\"><span class=\"string\">        &lt;buffer&gt;</span></span><br><span class=\"line\"><span class=\"string\">          @type file</span></span><br><span class=\"line\"><span class=\"string\">          path /var/log/fluentd-buffers/kubernetes.system.buffer</span></span><br><span class=\"line\"><span class=\"string\">          flush_mode interval</span></span><br><span class=\"line\"><span class=\"string\">          retry_type exponential_backoff</span></span><br><span class=\"line\"><span class=\"string\">          flush_thread_count 2</span></span><br><span class=\"line\"><span class=\"string\">          flush_interval 5s</span></span><br><span class=\"line\"><span class=\"string\">          retry_forever</span></span><br><span class=\"line\"><span class=\"string\">          retry_max_interval 30</span></span><br><span class=\"line\"><span class=\"string\">          chunk_limit_size 2M</span></span><br><span class=\"line\"><span class=\"string\">          queue_limit_length 8</span></span><br><span class=\"line\"><span class=\"string\">          overflow_action block</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/buffer&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/match&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置文件中我们配置了 docker 容器日志目录以及 docker、kubelet 应用的日志的收集，收集到数据经过处理后发送到 elasticsearch:9200 服务。</p>\n<p>然后新建一个 fluentd-daemonset.yaml 的文件，文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;namespaces&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;pods&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;get&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;watch&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;list&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"comment\">#apiGroup: &quot;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">​</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">    <span class=\"comment\">#version: v2.0.4</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">      <span class=\"comment\">#version: v2.0.4</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">        <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">       <span class=\"comment\"># version: v2.0.4</span></span><br><span class=\"line\">        <span class=\"comment\"># This annotation ensures that fluentd does not get evicted if the node</span></span><br><span class=\"line\">        <span class=\"comment\"># supports critical pod annotation based priority scheme.</span></span><br><span class=\"line\">        <span class=\"comment\"># Note that this does not guarantee admission on the nodes (#40573).</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">fluentd-es</span></span><br><span class=\"line\">        <span class=\"comment\">#image: cnych/fluentd-elasticsearch:v2.0.4</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">fluent/fluentd-kubernetes-daemonset:v1.4.2-debian-elasticsearch-1.1</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">FLUENTD_ARGS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">--no-supervisor</span> <span class=\"string\">-q</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">FLUENT_ELASTICSEARCH_HOST</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;elasticsearch.logging.svc.cluster.local&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">FLUENT_ELASTICSEARCH_PORT</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;9200&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">FLUENT_ELASTICSEARCH_SCHEME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">FLUENTD_SYSTEMD_CONF</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">disable</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">varlog</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">beta.kubernetes.io/fluentd-ds-ready:</span> <span class=\"string\">&quot;true&quot;</span>  </span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\">        <span class=\"attr\">operator:</span> <span class=\"string\">Exists</span></span><br><span class=\"line\">        <span class=\"attr\">effect:</span> <span class=\"string\">NoSchedule</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">varlog</span></span><br><span class=\"line\">        <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">        <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br></pre></td></tr></table></figure>\n\n<p>将上面创建的 fluentd-config 这个 ConfigMap 对象通过 volumes 挂载到了 Fluentd 容器中，另外为了能够灵活控制哪些节点的日志可以被收集，所以我们这里还添加了一个 nodSelector 属性：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nodeSelector:</span></span><br><span class=\"line\">  <span class=\"attr\">beta.kubernetes.io/fluentd-ds-ready:</span> <span class=\"string\">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>先给kubernetes集群打标签</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl label nodes node1 beta.kubernetes.io/fluentd-ds-ready=true</span></span><br><span class=\"line\">node/node1 labeled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#类似所有节点打上label</span></span><br></pre></td></tr></table></figure>\n\n<p>另外由于我们的集群使用的是 kubeadm 搭建的，默认情况下 master 节点有污点，所以要想也收集 master 节点的日志，则需要添加上容忍：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tolerations:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\">  <span class=\"attr\">operator:</span> <span class=\"string\">Exists</span></span><br><span class=\"line\">  <span class=\"attr\">effect:</span> <span class=\"string\">NoSchedule</span></span><br></pre></td></tr></table></figure>\n\n<p>创建flunetd</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl create -f fluentd-daemonset.yaml </span></span><br><span class=\"line\">serviceaccount/fluentd-es created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/fluentd-es created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/fluentd-es created</span><br><span class=\"line\">daemonset.apps/fluentd-es created</span><br></pre></td></tr></table></figure>\n\n<p>启动后查看kibana，点击discover</p>\n<p><img src=\"/2021/12/18/cloud-native/kubernetes/kubernetes-app/log-collect/EFK/821560-20200827141110934-1599575741.png\" alt=\"img\"></p>\n<p>如果创建的index无法保存，总是要重新创建，建议重启elasticsearch和kibana</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl scale statefulset es-cluster -n logging --replicas=0</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl scale deployment kibana -n logging --replicas=0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubectl scale statefulset es-cluster -n logging --replicas=3</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl scale deployment kibana -n logging --replicas=1</span></span><br></pre></td></tr></table></figure>\n\n<p>新建index pattern: logstash-*， 时间过滤日志数据，在下拉列表中，选择<code>@timestamp</code>字段</p>\n<p>最后显示:</p>\n<p><img src=\"/2021/12/18/cloud-native/kubernetes/kubernetes-app/log-collect/EFK/821560-20200827141137972-830843377.png\" alt=\"img\"></p>\n","categories":["kubernetes"],"tags":["k8s","container"]},{"title":"SpringBootRedis系列(一)：springboot-data-redis基本使用","url":"/2021/07/23/java/spring/springboot/springboot-data/springboot-data-redis/springboot-data-redis%E4%BD%BF%E7%94%A8-md/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>springboot版本: 2.5.2</p>\n<p>spring-boot-data-redis默认采用lettuce作为客户端对redis进行操作。</p>\n<p>官网文档: <a href=\"https://docs.spring.io/spring-data/redis/docs/2.5.3/reference/html/#redis\">https://docs.spring.io/spring-data/redis/docs/2.5.3/reference/html/#redis</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t\t如果使用jedis客户端，可以在这里排除lettuce的依赖，配置文件就不用指定client-type,</span></span><br><span class=\"line\"><span class=\"comment\">\t \tspring-boot-data-redis会自动选择jedis作为客户端，如果不排除该依赖，则需要指定client-type</span></span><br><span class=\"line\"><span class=\"comment\">\t --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--&lt;exclusions&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;exclusion&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;/exclusion&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;/exclusions&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\tredis使用连接池，上面的spring-boot-starter-data-redis默认使用的是lettuce客户端，不包含</span></span><br><span class=\"line\"><span class=\"comment\">\t该引用，需要单独导入</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-pool2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t若采用jedis为spring-boot-data-redis的客户端，则需要导入该引用，该引用默认已导入连接池，不需要</span></span><br><span class=\"line\"><span class=\"comment\">\t单独导入</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编写配置类\"><a href=\"#编写配置类\" class=\"headerlink\" title=\"编写配置类\"></a>编写配置类</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.lettuce.core.ReadFrom;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisSentinelConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisStandaloneConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认是JDK的序列化策略，这里配置redisTemplate采用的是Jackson2JsonRedisSerializer的序列化策略</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> redisConnectionFactory</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String,Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 配置连接工厂</span></span><br><span class=\"line\">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        <span class=\"comment\">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class=\"line\">        <span class=\"comment\">//redisTemplate.setKeySerializer(new StringRedisSerializer());</span></span><br><span class=\"line\">        redisTemplate.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// 值采用json序列化</span></span><br><span class=\"line\">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * stringRedisTemplate默认采用的是String的序列化策略</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> redisConnectionFactory</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title\">stringRedisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class=\"line\">        StringRedisTemplate stringRedisTemplate = <span class=\"keyword\">new</span> StringRedisTemplate();</span><br><span class=\"line\">        stringRedisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringRedisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代码方式配置使用lettuce客户端</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\">    <span class=\"comment\">/*public LettuceConnectionFactory lettuceConnectionFactory() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return new LettuceConnectionFactory(new RedisStandaloneConfiguration(&quot;host&quot;, 6379));</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 集群环境配置</span></span><br><span class=\"line\"><span class=\"comment\">     * Write to Master, Read from Replica</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\">    <span class=\"comment\">/*public LettuceConnectionFactory lettuceConnectionFactory() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        LettuceClientConfiguration clientConfig = LettuceClientConfiguration.builder()</span></span><br><span class=\"line\"><span class=\"comment\">                .readFrom(ReadFrom.REPLICA_PREFERRED)</span></span><br><span class=\"line\"><span class=\"comment\">                .build();</span></span><br><span class=\"line\"><span class=\"comment\">        RedisStandaloneConfiguration serverConfig = new RedisStandaloneConfiguration(&quot;localhost&quot;, 6379);</span></span><br><span class=\"line\"><span class=\"comment\">        return new LettuceConnectionFactory(serverConfig, clientConfig);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代码方式配置使用jedis客户端</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\">    <span class=\"comment\">/*public JedisConnectionFactory jedisConnectionFactory() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return new JedisConnectionFactory(new RedisStandaloneConfiguration(&quot;host&quot;, 6379));</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Redis Sentinel Support</span></span><br><span class=\"line\">    <span class=\"comment\">//下面时jedis和lettuce的两种方式</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\">    <span class=\"comment\">/*public RedisConnectionFactory jedisConnectionFactory() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        RedisSentinelConfiguration sentinelConfig = new RedisSentinelConfiguration()</span></span><br><span class=\"line\"><span class=\"comment\">                .master(&quot;mymaster&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">                .sentinel(&quot;localhost&quot;, 6379)</span></span><br><span class=\"line\"><span class=\"comment\">                .sentinel(&quot;localhost&quot;, 6380);</span></span><br><span class=\"line\"><span class=\"comment\">        return new JedisConnectionFactory(sentinelConfig);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisConnectionFactory <span class=\"title\">lettuceConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RedisSentinelConfiguration sentinelConfig = <span class=\"keyword\">new</span> RedisSentinelConfiguration()</span><br><span class=\"line\">                .master(<span class=\"string\">&quot;mymaster&quot;</span>)</span><br><span class=\"line\">                .sentinel(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">6379</span>)</span><br><span class=\"line\">                .sentinel(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">6380</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LettuceConnectionFactory(sentinelConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h1><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springboot-demo</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"comment\"># Redis服务器地址</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"comment\"># Redis服务器连接端口</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"comment\"># Redis服务器连接密码（默认为空）</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">    <span class=\"comment\"># Redis数据库索引（默认为0）</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 连接超时时间（毫秒）</span></span><br><span class=\"line\">    <span class=\"attr\">timeout :</span> <span class=\"number\">300</span></span><br><span class=\"line\">    <span class=\"attr\">client-type:</span> <span class=\"string\">lettuce</span> <span class=\"comment\">#切换jedis客户端，改成jedis</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span> <span class=\"comment\"># 若使用连接池，则配置如下配置项,如果是使用jedis客户端，则这里也改为jedis即可</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池最大连接数（使用负值表示没有限制</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最大空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最小空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">jedis:</span> <span class=\"comment\"># 若使用连接池，则配置如下配置项,如果是使用jedis客户端，则这里也改为jedis即可</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池最大连接数（使用负值表示没有限制</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最大空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最小空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n","categories":["springboot-redis"],"tags":["redis","java","springboot","spring"]},{"title":"spring-boot-data-redis使用问题总结","url":"/2021/07/23/java/spring/springboot/springboot-data/springboot-data-redis/%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","content":"<h1 id=\"SpringBoot2-1-X使用Redis连接池Lettuce踩坑\"><a href=\"#SpringBoot2-1-X使用Redis连接池Lettuce踩坑\" class=\"headerlink\" title=\"SpringBoot2.1.X使用Redis连接池Lettuce踩坑\"></a>SpringBoot2.1.X使用Redis连接池Lettuce踩坑</h1><h2 id=\"踩坑场景\"><a href=\"#踩坑场景\" class=\"headerlink\" title=\"踩坑场景\"></a>踩坑场景</h2><p>　　运行环境Redis集群中某个master节点不稳定连接不上，导致SpringBoot应用连接Redis报错，报错连接timeout。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>基于Spring-data-redis重写RedisConnectionFactory Bean。需要设置“取消校验集群节点的成员关系”：.validateClusterNodeMembership(false)。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"redis配置\"><a href=\"#redis配置\" class=\"headerlink\" title=\"redis配置\"></a>redis配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"> <span class=\"attr\">redis:</span></span><br><span class=\"line\">  <span class=\"attr\">cluster:</span></span><br><span class=\"line\">   <span class=\"attr\">nodes:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">$&#123;redis.host.cluster&#125;</span> <span class=\"comment\">#redis集群ip-port</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">$&#123;redis.password&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">timeout:</span> <span class=\"number\">5000</span> <span class=\"comment\">#连接超时时间</span></span><br><span class=\"line\">  <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">   <span class=\"attr\">pool:</span></span><br><span class=\"line\">    <span class=\"attr\">max-active:</span> <span class=\"number\">10</span> <span class=\"comment\">#连接池最大连接数</span></span><br><span class=\"line\">    <span class=\"attr\">max-wait:</span> <span class=\"number\">-1</span> <span class=\"comment\">#连接池最大阻塞时间</span></span><br><span class=\"line\">    <span class=\"attr\">max-idle:</span> <span class=\"number\">5</span> <span class=\"comment\">#连接池中最大空闲连接</span></span><br><span class=\"line\">    <span class=\"attr\">min-idle:</span> <span class=\"number\">1</span> <span class=\"comment\">#连接池中最小空闲连接</span></span><br><span class=\"line\"><span class=\"attr\">redis:</span></span><br><span class=\"line\"> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Config配置类\"><a href=\"#Config配置类\" class=\"headerlink\" title=\"Config配置类\"></a>Config配置类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;redis.cluster.enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisProperties redisProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在构建LettuceConnectionFactory时，如果不使用内置的destroyMethod，可能会导致Redis连接早于其它Bean被销毁</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(destroyMethod = &quot;destroy&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisConnectionFactory <span class=\"title\">newLettuceConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置用于开启自适应刷新和定时刷新。如自适应刷新不开启，Redis集群变更时将会导致连接异常</span></span><br><span class=\"line\">        ClusterTopologyRefreshOptions clusterTopologyRefreshOptions = ClusterTopologyRefreshOptions.builder()</span><br><span class=\"line\">                .enablePeriodicRefresh(Duration.ofSeconds(<span class=\"number\">60</span>))<span class=\"comment\">// 开启周期刷新(默认60秒)</span></span><br><span class=\"line\">                .enableAdaptiveRefreshTriggers(RefreshTrigger.ASK_REDIRECT,RefreshTrigger.UNKNOWN_NODE)<span class=\"comment\">// 开启自适应刷新</span></span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        ClusterClientOptions clusterClientOptions = ClusterClientOptions.builder()</span><br><span class=\"line\">                                 .topologyRefreshOptions(clusterTopologyRefreshOptions)<span class=\"comment\">//拓扑刷新</span></span><br><span class=\"line\">                                 .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)</span><br><span class=\"line\">                                 .autoReconnect(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                                 .socketOptions(SocketOptions.builder().keepAlive(<span class=\"keyword\">true</span>).build())</span><br><span class=\"line\">　　　　　　　　　　　　　　　　       .validateClusterNodeMembership(<span class=\"keyword\">false</span>)<span class=\"comment\">// 取消校验集群节点的成员关系</span></span><br><span class=\"line\">                                 .build();</span><br><span class=\"line\">        LettuceClientConfiguration clientConfig = LettuceClientConfiguration.builder()</span><br><span class=\"line\">                .clientOptions(clusterClientOptions)</span><br><span class=\"line\">                                .readFrom(ReadFrom.SLAVE_PREFERRED)</span><br><span class=\"line\">                                .build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LettuceConnectionFactory(getClusterConfiguration(), clientConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span>  RedisClusterConfiguration <span class=\"title\">getClusterConfiguration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RedisProperties.Cluster clusterProperties = redisProperties.getCluster();</span><br><span class=\"line\">        RedisClusterConfiguration config = <span class=\"keyword\">new</span> RedisClusterConfiguration(clusterProperties.getNodes());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clusterProperties.getMaxRedirects() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            config.setMaxRedirects(clusterProperties.getMaxRedirects());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (redisProperties.getPassword() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            config.setPassword(RedisPassword.of(redisProperties.getPassword()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">RedisClusterConfiguration getClusterConfiguration()需要设置Password，不然SpringBoot启动报认证错误：</span><br><span class=\"line\">“io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required”。如下：</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/07/23/java/spring/springboot/springboot-data/springboot-data-redis/%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/1375038-20200419160248151-234231417-7032213.png\" alt=\"img\"></p>\n<p> 另外，lettuce-core jar包版本不能过低，避免部分配置项无法支持</p>\n","categories":["springboot-redis"],"tags":["redis","java","springboot","spring"]},{"title":"SpringBoot整合flowable快速实现工作流","url":"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/","content":"<h1 id=\"SpringBoot-flowable快速实现工作流\"><a href=\"#SpringBoot-flowable快速实现工作流\" class=\"headerlink\" title=\"SpringBoot+flowable快速实现工作流\"></a>SpringBoot+flowable快速实现工作流</h1><h1 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h1><ul>\n<li>使用flowable自带的flowable-ui制作流程图</li>\n<li>使用springboot开发流程使用的接口完成流程的业务功能</li>\n</ul>\n<h1 id=\"flowable-ui部署运行\"><a href=\"#flowable-ui部署运行\" class=\"headerlink\" title=\"flowable-ui部署运行\"></a>flowable-ui部署运行</h1><p>flowable-6.6.0 运行 官方demo</p>\n<span id=\"more\"></span>\n\n<p>参考文档：</p>\n<blockquote>\n<p><a href=\"https://flowable.com/open-source/docs/bpmn/ch14-Applications/\">https://flowable.com/open-source/docs/bpmn/ch14-Applications/</a></p>\n</blockquote>\n<p>1、从官网下载flowable-6.6.0 : <a href=\"https://github.com/flowable/flowable-engine/releases/download/flowable-6.6.0/flowable-6.6.0.zip\">https://github.com/flowable/flowable-engine/releases/download/flowable-6.6.0/flowable-6.6.0.zip</a></p>\n<p>2、将压缩包中的 flowable-6.6.0\\wars\\flowable-ui.war 丢到Tomcat中跑起来</p>\n<p>3、打开<a href=\"http://localhost:8080/flowable-ui\">http://localhost:8080/flowable-ui</a> 用账户：admin/test 登录</p>\n<p>4、进入APP.MODELER创建流程，之后可以导出流程到项目中使用，或者配置apache-tomcat-9.0.37\\webapps\\flowable-ui\\WEB-INF\\classes\\flowable-default.properties连接本地数据库</p>\n<p><img src=\"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/c0158e7ae2f642149ea1287ece66c588.png\" alt=\"效率这不就提上来了嘛！SpringBoot+flowable快速实现工作流\"></p>\n<blockquote>\n<p>注意：需要将java驱动jar（mysql-connector-java-5.1.45.jar）复制到 apache-tomcat-9.0.37\\webapps\\flowable-rest\\WEB-INF\\lib</p>\n</blockquote>\n<p>这样创建的流程后端程序就能直接使用</p>\n<h1 id=\"绘制流程图\"><a href=\"#绘制流程图\" class=\"headerlink\" title=\"绘制流程图\"></a>绘制流程图</h1><p><img src=\"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/a9f8af6f263844b687a4db49e3edbef2.png\" alt=\"效率这不就提上来了嘛！SpringBoot+flowable快速实现工作流\"></p>\n<p>根据业务需要在 flowable-ui&gt;APP.MODELER里面绘制流程图，示例如上图。先解释一些概念。</p>\n<ul>\n<li><strong>事件（event）</strong> 通常用于为流程生命周期中发生的事情建模，图里是【开始、结束】两个圈。</li>\n<li><strong>顺序流（sequence flow）</strong> 是流程中两个元素间的连接器。图里是【箭头线段】。</li>\n<li><strong>网关（gateway）</strong> 用于控制执行的流向。图里是【菱形（中间有X）】</li>\n<li><strong>用户任务（user task）</strong> 用于对需要人工执行的任务进行建模。图里是【矩形】。</li>\n</ul>\n<p>简单的工作流大概就这些元素(还有很多这里就不扩展了)。下面描述一下工作流是如何流动的。</p>\n<p>首先启动了工作流后，由【开始】节点自动流向【学生】节点，等待该任务执行。任务被分配的学生用户执行后流向 【老师】节点，再次等待该任务执行。被分配的老师用户执行后流向 【网关】，网关以此检查每个出口，流向符合条件的任务，比如这里老师执行任务时是同意，就流向【校长】节点，等待该任务执行。执行后跟老师类似，同意后就流向【结束】节点，整个流程到此结束。</p>\n<p><strong>绘图细节：</strong></p>\n<p>1、保留流程模型</p>\n<img src=\"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/5aec2163040647b49e287a25d3fdde6a.jpeg\" alt=\"效率这不就提上来了嘛！SpringBoot+flowable快速实现工作流\" style=\"zoom: 50%;\">\n\n<p>2、顺序流可以设置流条件来限制流动，比如上面的网关出口就设置了条件</p>\n<p><img src=\"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/e4aaec54020b4acdb9de13ed04d1d3df.png\" alt=\"效率这不就提上来了嘛！SpringBoot+flowable快速实现工作流\"></p>\n<p>3、任务需要分配任务的执行用户，可以分配到候选组，也可以直接分配到候选人</p>\n<p><img src=\"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/bab3be0a77db49ea9191e2d9eceaa1fa.png\" alt=\"效率这不就提上来了嘛！SpringBoot+flowable快速实现工作流\"></p>\n<p>最后导出工作流文件</p>\n<p><img src=\"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/f50169109f1446fe853705a63bd1bb4e.png\" alt=\"效率这不就提上来了嘛！SpringBoot+flowable快速实现工作流\"></p>\n<p>4、bpmn文件导入</p>\n<p>如果需要，可以把这个流程文件下载下来，直接导入使用</p>\n<h1 id=\"后台项目搭建\"><a href=\"#后台项目搭建\" class=\"headerlink\" title=\"后台项目搭建\"></a>后台项目搭建</h1><p>后台项目基于jdk8，使用springboot框架</p>\n<p>spring 版本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>项目依赖pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flowable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.45<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>项目配置application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/flowable?useSSL=false&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><p>1、Flowable的所有数据库表都以ACT_开头。第二部分是说明表用途的两字符标示符。服务API的命名也大略符合这个规则。</p>\n<p>2、ACT_RE_: ‘RE’代表repository。带有这个前缀的表包含“静态”信息，例如流程定义与流程资源（图片、规则等）。</p>\n<p>3、ACT_RU_: ‘RU’代表runtime。这些表存储运行时信息，例如流程实例（process instance）、用户任务（user task）、变量（variable）、作业（job）等。Flowable只在流程实例运行中保存运行时数据，并在流程实例结束时删除记录。这样保证运行时表小和快。</p>\n<p>4、ACT_HI_: ‘HI’代表history。这些表存储历史数据，例如已完成的流程实例、变量、任务等。</p>\n<p>5、ACT_GE_: 通用数据。在多处使用。</p>\n<p>1）通用数据表（2个）</p>\n<ul>\n<li>act_ge_bytearray：二进制数据表，如流程定义、流程模板、流程图的字节流文件；</li>\n<li>act_ge_property：属性数据表（不常用）；</li>\n</ul>\n<p>2）历史表（8个，HistoryService接口操作的表）</p>\n<ul>\n<li>act_hi_actinst：历史节点表，存放流程实例运转的各个节点信息（包含开始、结束等非任务节点）；</li>\n<li>act_hi_attachment：历史附件表，存放历史节点上传的附件信息（不常用）；</li>\n<li>act_hi_comment：历史意见表；</li>\n<li>act_hi_detail：历史详情表，存储节点运转的一些信息（不常用）；</li>\n<li>act_hi_identitylink：历史流程人员表，存储流程各节点候选、办理人员信息，常用于查询某人或部门的已办任务；</li>\n<li>act_hi_procinst：历史流程实例表，存储流程实例历史数据（包含正在运行的流程实例）；</li>\n<li>act_hi_taskinst：历史流程任务表，存储历史任务节点；</li>\n<li>act_hi_varinst：流程历史变量表，存储流程历史节点的变量信息；</li>\n</ul>\n<p>3）用户相关表（4个，IdentityService接口操作的表）</p>\n<ul>\n<li>act_id_group：用户组信息表，对应节点选定候选组信息；</li>\n<li>act_id_info：用户扩展信息表，存储用户扩展信息；</li>\n<li>act_id_membership：用户与用户组关系表；</li>\n<li>act_id_user：用户信息表，对应节点选定办理人或候选人信息；</li>\n</ul>\n<p>4）流程定义、流程模板相关表（3个，RepositoryService接口操作的表）</p>\n<ul>\n<li>act_re_deployment：部属信息表，存储流程定义、模板部署信息；</li>\n<li>act_re_procdef：流程定义信息表，存储流程定义相关描述信息，但其真正内容存储在act_ge_bytearray表中，以字节形式存储；</li>\n<li>act_re_model：流程模板信息表，存储流程模板相关描述信息，但其真正内容存储在act_ge_bytearray表中，以字节形式存储；</li>\n</ul>\n<p>5）流程运行时表（6个，RuntimeService接口操作的表）</p>\n<ul>\n<li>act_ru_task：运行时流程任务节点表，存储运行中流程的任务节点信息，重要，常用于查询人员或部门的待办任务时使用；</li>\n<li>act_ru_event_subscr：监听信息表，不常用；</li>\n<li>act_ru_execution：运行时流程执行实例表，记录运行中流程运行的各个分支信息（当没有子流程时，其数据与act_ru_task表数据是一一对应的）；</li>\n<li>act_ru_identitylink：运行时流程人员表，重要，常用于查询人员或部门的待办任务时使用；</li>\n<li>act_ru_job：运行时定时任务数据表，存储流程的定时任务信息；</li>\n<li>act_ru_variable：运行时流程变量数据表，存储运行中的流程各节点的变量信息；</li>\n</ul>\n<h1 id=\"流程引擎API与服务\"><a href=\"#流程引擎API与服务\" class=\"headerlink\" title=\"流程引擎API与服务\"></a>流程引擎API与服务</h1><p>引擎API是与Flowable交互的最常用手段。总入口点是ProcessEngine。</p>\n<p><img src=\"/2021/09/05/java/java-tec-stack/WorkerFlow/Flowable/flowable/f64cb1f7948c43a58027264a63bca29b.png\" alt=\"效率这不就提上来了嘛！SpringBoot+flowable快速实现工作流\"></p>\n<p>1、RepositoryService很可能是使用Flowable引擎要用的第一个服务。这个服务提供了管理与控制部署(deployments)与流程定义(process definitions)的操作。管理静态信息，</p>\n<p>2、RuntimeService用于启动流程定义的新流程实例。</p>\n<p>3、IdentityService很简单。它用于管理（创建，更新，删除，查询……）组与用户。</p>\n<p>4、FormService是可选服务。也就是说Flowable没有它也能很好地运行，而不必牺牲任何功能。</p>\n<p>5、HistoryService暴露Flowable引擎收集的所有历史数据。要提供查询历史数据的能力。</p>\n<p>6、ManagementService通常在用Flowable编写用户应用时不需要使用。它可以读取数据库表与表原始数据的信息，也提供了对作业(job)的查询与管理操作。</p>\n<p>7、DynamicBpmnService可用于修改流程定义中的部分内容，而不需要重新部署它。例如可以修改流程定义中一个用户任务的办理人设置，或者修改一个服务任务中的类名。</p>\n<p>接下来使用之前的请假流程图，上代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.HistoryService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.RepositoryService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.RuntimeService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.history.HistoricProcessInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.repository.Deployment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.repository.ProcessDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.runtime.Execution;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.runtime.ProcessInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.idm.api.Group;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.idm.api.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.task.api.Task;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.task.api.history.HistoricTaskInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipInputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TestFlowable</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2021/10/17 23:35</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFlowable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RuntimeService runtimeService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HistoryService historyService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> org.flowable.engine.TaskService taskService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> org.flowable.engine.IdentityService identityService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createDeploymentZip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @Date: 2021/10/17 23:38</span></span><br><span class=\"line\"><span class=\"comment\">         * Step 1: 部署xml（压缩到zip形式，直接xml需要配置相对路径，麻烦，暂不用）</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            File zipTemp = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;f:/leave_approval.bpmn20.zip&quot;</span>);</span><br><span class=\"line\">            ZipInputStream zipInputStream = <span class=\"keyword\">new</span> ZipInputStream(<span class=\"keyword\">new</span> FileInputStream(zipTemp));</span><br><span class=\"line\">            Deployment deployment = repositoryService</span><br><span class=\"line\">                    .createDeployment()</span><br><span class=\"line\">                    .addZipInputStream(zipInputStream)</span><br><span class=\"line\">                    .deploy();</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;部署成功:&#123;&#125;&quot;</span>, deployment.getId());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @Date: 2021/10/17 23:40</span></span><br><span class=\"line\"><span class=\"comment\">         * Step 2: 查询部署的流程定义</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        List&lt;ProcessDefinition&gt; list = repositoryService.createProcessDefinitionQuery().processDefinitionKey(<span class=\"string\">&quot;leave_approval&quot;</span>).list();</span><br><span class=\"line\">        List&lt;ProcessDefinition&gt; pages = repositoryService.createProcessDefinitionQuery().processDefinitionKey(<span class=\"string\">&quot;leave_approval&quot;</span>).listPage(<span class=\"number\">1</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @Date: 2021/10/17 23:40</span></span><br><span class=\"line\"><span class=\"comment\">         * Step 3: 启动流程，创建实例</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String processDefinitionKey = <span class=\"string\">&quot;leave_approval&quot;</span>;<span class=\"comment\">//流程定义的key,对应请假的流程图</span></span><br><span class=\"line\">        String businessKey = <span class=\"string\">&quot;schoolleave&quot;</span>;<span class=\"comment\">//业务代码，根据自己的业务用</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; variablesDefinition = <span class=\"keyword\">new</span> HashMap&lt;&gt;();<span class=\"comment\">//流程变量，可以自定义扩充</span></span><br><span class=\"line\">        ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(processDefinitionKey, businessKey, variablesDefinition);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;启动成功:&#123;&#125;&quot;</span>, processInstance.getId());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @Date: 2021/10/17 23:40</span></span><br><span class=\"line\"><span class=\"comment\">         * Step 4: 查询指定流程所有启动的实例列表</span></span><br><span class=\"line\"><span class=\"comment\">         * 列表，或 分页 删除</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        List&lt;Execution&gt; executions = runtimeService.createExecutionQuery().processDefinitionKey(<span class=\"string\">&quot;leave_approval&quot;</span>).list();</span><br><span class=\"line\">        List&lt;Execution&gt; executionPages = runtimeService.createExecutionQuery().processDefinitionKey(<span class=\"string\">&quot;leave_approval&quot;</span>).listPage(<span class=\"number\">1</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">//        runtimeService.deleteProcessInstance(processInstanceId, deleteReason); //删除实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @Date: 2021/10/17 23:40</span></span><br><span class=\"line\"><span class=\"comment\">         * Step 5: 学生查询可以操作的任务,并完成任务</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String candidateGroup = <span class=\"string\">&quot;stu_group&quot;</span>; <span class=\"comment\">//候选组 xml文件里面的 flowable:candidateGroups=&quot;stu_group&quot;</span></span><br><span class=\"line\">        List&lt;Task&gt; taskList = taskService.createTaskQuery().taskCandidateGroup(candidateGroup).orderByTaskCreateTime().desc().list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : taskList) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 申领任务</span></span><br><span class=\"line\">            taskService.claim(task.getId(), <span class=\"string\">&quot;my&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 完成</span></span><br><span class=\"line\">            taskService.complete(task.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @Date: 2021/10/17 23:40</span></span><br><span class=\"line\"><span class=\"comment\">         * Step 6: 老师查询可以操作的任务,并完成任务</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String candidateGroupTe = <span class=\"string\">&quot;te_group&quot;</span>; <span class=\"comment\">//候选组 xml文件里面的 flowable:candidateGroups=&quot;te_group&quot;</span></span><br><span class=\"line\">        List&lt;Task&gt; taskListTe = taskService.createTaskQuery().taskCandidateGroup(candidateGroupTe).orderByTaskCreateTime().desc().list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : taskListTe) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 申领任务</span></span><br><span class=\"line\">            taskService.claim(task.getId(), <span class=\"string\">&quot;myte&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 完成</span></span><br><span class=\"line\">            Map&lt;String, Object&gt; variables = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            variables.put(<span class=\"string\">&quot;command&quot;</span>,<span class=\"string\">&quot;agree&quot;</span>); <span class=\"comment\">//携带变量，用于网关流程的条件判定，这里的条件是同意</span></span><br><span class=\"line\">            taskService.complete(task.getId(), variables);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @Date: 2021/10/18 0:17</span></span><br><span class=\"line\"><span class=\"comment\">         * Step 7: 历史查询，因为一旦流程执行完毕，活动的数据都会被清空，上面查询的接口都查不到数据，但是提供历史查询接口</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">// 历史流程实例</span></span><br><span class=\"line\">        List&lt;HistoricProcessInstance&gt; historicProcessList = historyService.createHistoricProcessInstanceQuery().processDefinitionKey(<span class=\"string\">&quot;leave_approval&quot;</span>).list();</span><br><span class=\"line\">        <span class=\"comment\">// 历史任务</span></span><br><span class=\"line\">        List&lt;HistoricTaskInstance&gt; historicTaskList = historyService.createHistoricTaskInstanceQuery().processDefinitionKey(<span class=\"string\">&quot;leave_approval&quot;</span>).list();</span><br><span class=\"line\">        <span class=\"comment\">// 实例历史变量 , 任务历史变量</span></span><br><span class=\"line\">        <span class=\"comment\">// historyService.createHistoricVariableInstanceQuery().processInstanceId(processInstanceId);</span></span><br><span class=\"line\">        <span class=\"comment\">// historyService.createHistoricVariableInstanceQuery().taskId(taskId);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// *****************************************************分隔符********************************************************************</span></span><br><span class=\"line\">        <span class=\"comment\">// *****************************************************分隔符********************************************************************</span></span><br><span class=\"line\">        <span class=\"comment\">// 可能还需要的API</span></span><br><span class=\"line\">        <span class=\"comment\">// 移动任务，人为跳转任务</span></span><br><span class=\"line\">        <span class=\"comment\">// runtimeService.createChangeActivityStateBuilder().processInstanceId(processInstanceId)</span></span><br><span class=\"line\">        <span class=\"comment\">//       .moveActivityIdTo(currentActivityTaskId, newActivityTaskId).changeState();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果在数据库配置了分组和用户，还会用到</span></span><br><span class=\"line\">        List&lt;User&gt; users = identityService.createUserQuery().list();    <span class=\"comment\">//用户查询，用户id对应xml 里面配置的用户</span></span><br><span class=\"line\">        List&lt;Group&gt; groups = identityService.createGroupQuery().list(); <span class=\"comment\">//分组查询，分组id对应xml 里面配置的分组 如 stu_group，te_group 在表里是id的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 另外，每个查询后面都可以拼条件，内置恁多查询，包括模糊查询，大小比较都有</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>分享牛Flowable文档汉化：<a href=\"https://github.com/qiudaoke/flowable-userguide\">https://github.com/qiudaoke/flowable-userguide</a></li>\n<li>猫七姑娘 flowable-6.6.0 运行官方 demo</li>\n<li>华格瑞沙 <a href=\"https://www.cnblogs.com/yangjiming/p/10938515.html\">https://www.cnblogs.com/yangjiming/p/10938515.html</a></li>\n</ul>\n","categories":["java-tec-stack"],"tags":["java","springboot","workflow"]},{"title":"Resis布隆过滤器","url":"/2021/09/11/java/java-tec-stack/BloomFilter/RedisBloomFilter/","content":"<h1 id=\"什么是布隆过滤器\"><a href=\"#什么是布隆过滤器\" class=\"headerlink\" title=\"什么是布隆过滤器\"></a>什么是布隆过滤器</h1><p>布隆过滤器（Bloom Filter）是 1970 年由布隆提出的，是一种非常节省空间的概率数据结构，运行速度快，占用内存小，但是有一定的误判率且无法删除元素。它实际上是一个很长的二进制向量和一系列随机映射函数组成，主要用于判断一个元素是否在一个集合中。</p>\n<p>通常我们都会遇到判断一个元素是否在某个集合中的业务场景，这个时候我们可能都是采用 HashMap的Put方法或者其他集合将数据保存起来，然后进行比较确定，但是如果元素很多的情况下，采用这种方式就会非常浪费空间，最终达到瓶颈，检索速度也会越来越慢，这时布隆过滤器（Bloom Filter）就应运而生了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"布隆过滤器的优点：\"><a href=\"#布隆过滤器的优点：\" class=\"headerlink\" title=\"布隆过滤器的优点：\"></a>布隆过滤器的优点：</h2><ul>\n<li>支持海量数据场景下高效判断元素是否存在</li>\n<li>布隆过滤器存储空间小，并且节省空间，不存储数据本身，仅存储hash结果取模运算后的位标记</li>\n<li>不存储数据本身，比较适合某些保密场景</li>\n</ul>\n<h2 id=\"布隆过滤器的缺点：\"><a href=\"#布隆过滤器的缺点：\" class=\"headerlink\" title=\"布隆过滤器的缺点：\"></a>布隆过滤器的缺点：</h2><p>不存储数据本身，所以只能添加但不可删除，因为删掉元素会导致误判率增加<br>由于存在hash碰撞，匹配结果如果是“存在于过滤器中”，实际不一定存在<br>当容量快满时，hash碰撞的概率变大，插入、查询的错误率也就随之增加了<br>布隆过滤器中一个元素如果判断结果为存在的时候元素不一定存在，但是判断结果为不存在的时候则一定不存在。因此，布隆过滤器不适合那些对结果必须精准的应用场景。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>不支持计数，同一个元素可以多次插入，但效果和插入一次相同</li>\n<li>由于错误率影响hash函数的数量，当hash函数越多，每次插入、查询需做的hash操作就越多</li>\n</ul>\n<h1 id=\"布隆过滤器适合的场景\"><a href=\"#布隆过滤器适合的场景\" class=\"headerlink\" title=\"布隆过滤器适合的场景\"></a>布隆过滤器适合的场景</h1><ul>\n<li>区块链中使用布隆过滤器来加快钱包同步；以太坊使用布隆过滤器用于快速查询以太坊区块链的日志</li>\n<li>数据库防止穿库，Google Bigtable，HBase 和 Cassandra 以及 Postgresql 使用BloomFilter来减少不存在的行或列的磁盘查找。避免代价高昂的磁盘查找会大大提高数据库查询操作的性能</li>\n<li>判断用户是否阅读过某一个视频或者文章，类似抖音，刷过的视频往下滑动不再刷到，可能会导致一定的误判，但不会让用户看到重复的内容</li>\n<li>网页爬虫对URL去重，采用布隆过滤器来对已经爬取过的URL进行存储，这样在进行下一次爬取的时候就可以判断出这个URL是否爬取过了</li>\n<li>使用布隆过滤器来做黑名单过滤，针对不同的用户是否存入白名单或者黑名单，虽然有一定的误判，但是在一定程度上还是很好的解决问题</li>\n<li>缓存击穿场景，一般判断用户是否在缓存中，如果存在则直接返回结果，不存在则查询数据库，如果来一波冷数据，会导致缓存大量击穿，造成雪崩效应，这时候可以用布隆过滤器当缓存的索引，只有在布隆过滤器中，才去查询缓存，如果没查询到则穿透到数据库查询。如果不在布隆过滤器中，则直接返回，会造成一定程度的误判</li>\n<li>WEB拦截器，如果相同请求则拦截，防止重复被攻击。用户第一次请求，将请求参数放入布隆过滤器中，当第二次请求时，先判断请求参数是否被布隆过滤器命中。可以提高缓存命中率。Squid 网页代理缓存服务器在 cache digests 中就使用了布隆过滤器。Google Chrome浏览器使用了布隆过滤器加速安全浏览服务</li>\n<li>Google 著名的分布式数据库 Bigtable 使用了布隆过滤器来查找不存在的行或列，以减少磁盘查找的IO次数</li>\n<li>Squid 网页代理缓存服务器在 cache digests 中使用了也布隆过滤器</li>\n<li>Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据</li>\n<li>SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间</li>\n<li>Google Chrome浏览器使用了布隆过滤器加速安全浏览服务</li>\n</ul>\n<p>如果允许误判率的话，可以使用布隆过滤器，只有你想不到的，没有你做不到的</p>\n<h1 id=\"布隆过滤器原理\"><a href=\"#布隆过滤器原理\" class=\"headerlink\" title=\"布隆过滤器原理\"></a>布隆过滤器原理</h1><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>布隆过滤器是由一个固定大小的<a href=\"https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020\">二进制</a>向量或者位图（bitmap）和一系列映射函数组成的。</p>\n<p>对于长度为 m 的位数组，在初始状态时，它所有位置都被置为0，如下图所示：</p>\n<img src=\"/2021/09/11/java/java-tec-stack/BloomFilter/RedisBloomFilter/image-20220412114430497.png\" alt=\"image-20220412114430497\" style=\"zoom: 50%;\">\n\n<p>位数组中的每个元素都只占用 1 bit ，并且数组中元素只能是 0 或者 1。这样申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 KB ≈ 122KB 的空间。</p>\n<p>增加元素</p>\n<p>当一个元素加入布隆过滤器中的时候，会进行如下操作：</p>\n<p>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值)<br>根据得到的哈希值，在位数组中把对应下标的值置为 1<br>如下图所示：</p>\n<img src=\"/2021/09/11/java/java-tec-stack/BloomFilter/RedisBloomFilter/image-20220412114516132.png\" alt=\"image-20220412114516132\" style=\"zoom:50%;\">\n\n<p>接着再添加一个值 “xinlang”，哈希函数的值是3、5、8，如下图所示：</p>\n<img src=\"/2021/09/11/java/java-tec-stack/BloomFilter/RedisBloomFilter/image-20220412114538918.png\" alt=\"image-20220412114538918\" style=\"zoom:50%;\">\n\n<p>这里需要注意的是，5 这个 bit 位由于两个值的哈希函数都返回了这个 bit 位，因此被覆盖了。</p>\n<p>查询元素</p>\n<p>对给定元素再次进行相同的哈希计算<br>得到哈希值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值存在布隆过滤器当中，如果存在一个值不为 1，说明该元素不在布隆过滤器中<br>例如我们查询 “cunzai” 这个值是否存在，哈希函数返回了 1、5、8三个值<br>如下图所示：</p>\n<img src=\"/2021/09/11/java/java-tec-stack/BloomFilter/RedisBloomFilter/image-20220412114606348.png\" alt=\"image-20220412114606348\" style=\"zoom:50%;\">\n\n<p>结果得到三个 1 ，说明 “cunzai” 是有可能存在的。</p>\n<p>为什么说是可能存在，而不是一定存在呢？主要分为以下几种情况：</p>\n<p>因为映射函数本身就是散列函数，散列函数是会有碰撞的情况发生。</p>\n<p>情况1：一个字符串可能是 “chongtu” 经过相同的三个映射函数运算得到的三个点跟 “xinlang” 是一样的，这种情况下我们就说出现了误判<br>情况2： “chongtu” 经过运算得到三个点位上的 1 是两个不同的变量经过运算后得到的，这也不能证明字符串 “chongtu” 是一定存在的</p>\n<img src=\"/2021/09/11/java/java-tec-stack/BloomFilter/RedisBloomFilter/image-20220412114637000.png\" alt=\"image-20220412114637000\" style=\"zoom:50%;\">\n\n<p>鉴于上面的情况，不同的字符串可能哈希出来的位置相同，这种情况我们可以适当增加位数组大小或者调整哈希函数。</p>\n<p>布隆过滤器判定某个元素存在，小概率会误判；布隆过滤器判定某个元素不在，则这个元素一定不在。</p>\n<p>删除元素</p>\n<p>布隆过滤器对元素的删除，肯定不可以，会出现问题，比如上面添加元素的 bit 位 5 被两个变量的哈希值共同覆盖的情况下，一旦我们删除其中一个值。例如“xinlang”而将其置位 0，那么下次判断另一个值例如“baidu”是否存在的话，会直接返回 false，而实际上我们并没有删除它，这就导致了误判的问题。</p>\n<h1 id=\"使用布隆过滤器\"><a href=\"#使用布隆过滤器\" class=\"headerlink\" title=\"使用布隆过滤器\"></a>使用布隆过滤器</h1><h2 id=\"Google开源的Guava自带布隆过滤器\"><a href=\"#Google开源的Guava自带布隆过滤器\" class=\"headerlink\" title=\"Google开源的Guava自带布隆过滤器\"></a>Google开源的Guava自带布隆过滤器</h2><p>首先引入Guava的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>31.0.1-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class=\"number\">5000000</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000000</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tbloomFilter.put(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.nanoTime();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bloomFilter.mightContain(<span class=\"number\">500000</span>)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;成功过滤到500000&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> end = System.nanoTime();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;布隆过滤器消耗时间&quot;</span>+(end - start)/<span class=\"number\">1000000L</span>+<span class=\"string\">&quot;毫秒&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">成功过滤到500000</span><br><span class=\"line\">布隆过滤器消耗时间0毫秒</span><br></pre></td></tr></table></figure>\n\n<p>布隆过滤器消耗时间:0毫秒，有点不敢相信呢，匹配速度是不是很快？</p>\n<p>那么，在数据量很大的情况下，1%的误判率结果如何？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">BloomFilter&lt;String&gt; bloomFilter = BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8),<span class=\"number\">5000000</span>,<span class=\"number\">0.01</span>);</span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">5000000</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000000</span>; i++) &#123;</span><br><span class=\"line\">\tString uuid = UUID.randomUUID().toString();</span><br><span class=\"line\">\tbloomFilter.put(uuid);</span><br><span class=\"line\">\tlist.add(uuid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mightContainNumber1= <span class=\"number\">0</span>;</span><br><span class=\"line\">NumberFormat percentFormat =NumberFormat.getPercentInstance();</span><br><span class=\"line\">percentFormat.setMaximumFractionDigits(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"number\">500</span>;i++)&#123;</span><br><span class=\"line\">\tString key = list.get(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bloomFilter.mightContain(key))&#123;</span><br><span class=\"line\">\t\tmightContainNumber1++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;【key真实存在的情况】布隆过滤器认为存在的key值数：&quot;</span> + mightContainNumber1);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;================================================================================&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> mightContainNumber2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"number\">5000000</span>;i++)&#123;</span><br><span class=\"line\">\tString key = UUID.randomUUID().toString();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bloomFilter.mightContain(key))&#123;</span><br><span class=\"line\">\t\tmightContainNumber2++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;【key不存在的情况】布隆过滤器认为存在的key值数：&quot;</span> + mightContainNumber2);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;【key不存在的情况】布隆过滤器的误判率为：&quot;</span> + percentFormat.format((<span class=\"keyword\">float</span>)mightContainNumber2 / <span class=\"number\">5000000</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">【key真实存在的情况】布隆过滤器认为存在的key值数：500</span><br><span class=\"line\">================================================================================</span><br><span class=\"line\">【key不存在的情况】布隆过滤器认为存在的key值数：50389</span><br><span class=\"line\">【key不存在的情况】布隆过滤器的误判率为：1.01<span class=\"comment\">%</span></span><br></pre></td></tr></table></figure>\n\n<p>3%的误判率结果如何？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">BloomFilter&lt;String&gt; bloomFilter = BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8),<span class=\"number\">5000000</span>,);</span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">5000000</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000000</span>; i++) &#123;</span><br><span class=\"line\">\tString uuid = UUID.randomUUID().toString();</span><br><span class=\"line\">\tbloomFilter.put(uuid);</span><br><span class=\"line\">\tlist.add(uuid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mightContainNumber1= <span class=\"number\">0</span>;</span><br><span class=\"line\">NumberFormat percentFormat =NumberFormat.getPercentInstance();</span><br><span class=\"line\">percentFormat.setMaximumFractionDigits(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"number\">500</span>;i++)&#123;</span><br><span class=\"line\">\tString key = list.get(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bloomFilter.mightContain(key))&#123;</span><br><span class=\"line\">\t\tmightContainNumber1++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;【key真实存在的情况】布隆过滤器认为存在的key值数：&quot;</span> + mightContainNumber1);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;================================================================================&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> mightContainNumber2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"number\">5000000</span>;i++)&#123;</span><br><span class=\"line\">\tString key = UUID.randomUUID().toString();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bloomFilter.mightContain(key))&#123;</span><br><span class=\"line\">\t\tmightContainNumber2++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;【key不存在的情况】布隆过滤器认为存在的key值数：&quot;</span> + mightContainNumber2);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;【key不存在的情况】布隆过滤器的误判率为：&quot;</span> + percentFormat.format((<span class=\"keyword\">float</span>)mightContainNumber2 / <span class=\"number\">5000000</span>));</span><br></pre></td></tr></table></figure>\n\n<p>创建一个最多添加 500 个整数的布隆过滤器，并且可以容忍误判率为百分之一（0.01）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bool</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tBloomFilter&lt;Integer&gt; filter = BloomFilter.create(Funnels.integerFunnel(), <span class=\"number\">500</span>, <span class=\"number\">0.01</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 判断指定元素是否存在</span></span><br><span class=\"line\">\tSystem.out.println(filter.mightContain(<span class=\"number\">1</span>));</span><br><span class=\"line\">\tSystem.out.println(filter.mightContain(<span class=\"number\">2</span>));</span><br><span class=\"line\">      <span class=\"comment\">// 将元素添加进布隆过滤器</span></span><br><span class=\"line\">\tfilter.put(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tfilter.put(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 判断指定元素是否存在</span></span><br><span class=\"line\">\tSystem.out.println(filter.mightContain(<span class=\"number\">1</span>));</span><br><span class=\"line\">\tSystem.out.println(filter.mightContain(<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">【key真实存在的情况】布隆过滤器认为存在的key值数：500</span><br><span class=\"line\">================================================================================</span><br><span class=\"line\">【key不存在的情况】布隆过滤器认为存在的key值数：150591</span><br><span class=\"line\">【key不存在的情况】布隆过滤器的误判率为：3.01<span class=\"comment\">%</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面的结果可以看出：</p>\n<ul>\n<li>如果元素实际存在，那么布隆过滤器一定会判断存在</li>\n<li>误判率即fpp在3%左右，随着for循环的次数越大，而且越接近3%，那么如果元素不存在，那么布隆过滤器可能会判断存在</li>\n</ul>\n<p>看源码可知这个3%的fpp是Guava中默认的fpp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">BloomFilter&lt;T&gt; <span class=\"title\">create</span><span class=\"params\">(Funnel&lt;? <span class=\"keyword\">super</span> T&gt; funnel, <span class=\"keyword\">long</span> expectedInsertions)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> create(funnel, expectedInsertions, <span class=\"number\">0.03</span>); <span class=\"comment\">// FYI, for 3%, we always get 5 hash functions</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下地址是一个免费的在线布隆过滤器在线计算的网址：<br><a href=\"https://hur.st/bloomfilter/?n=1000000&p=0.03&m=&k=\">点击这里</a></p>\n<p>经过哈希计算次数设置为3次，这个3%的误判率和3次哈希运算需要多大空间位数组呢？</p>\n<p><img src=\"/2021/09/11/java/java-tec-stack/BloomFilter/RedisBloomFilter/image-20220412115108878.png\" alt=\"image-20220412115108878\"></p>\n<p>计算得到的结果是1.74MiB，200W的key才占用了1.74M，而如果是10亿呢，计算的结果是960M，这个内存空间是完全可以接受的。</p>\n<p>Guava 提供的布隆过滤器的实现还是很不错的，但是它有一个重大的缺陷就是只能单机使用（另外，容量扩展也不容易），而现在互联网一般都是分布式的场景。为了解决这个问题就需要用到Redis中的布隆过滤器了。</p>\n<h2 id=\"Redis实现布隆过滤器\"><a href=\"#Redis实现布隆过滤器\" class=\"headerlink\" title=\"Redis实现布隆过滤器\"></a>Redis实现布隆过滤器</h2><h3 id=\"Redis中配置布隆过滤器\"><a href=\"#Redis中配置布隆过滤器\" class=\"headerlink\" title=\"Redis中配置布隆过滤器\"></a>Redis中配置布隆过滤器</h3><p>1、点击<a href=\"https://redis.io/modules\">https://redis.io/modules </a>找到RedisBloom<br>2、点击进去下载RedisBloom-master.zip文件，上传到linux<br>3、解压缩刚才的RedisBloom文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip RedisBloom-master.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> RedisBloom-master</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>make完生成redisbloom.so，拷贝到redis的安装目录。</p>\n<p>在redis.conf配置文件中加入如RedisBloom的redisbloom.so文件的地址,如果是集群则每个配置文件中都需要加入redisbloom.so文件的地址</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">loadmodule /home/www/server/redis/redisbloom.so</span><br></pre></td></tr></table></figure>\n\n<p>保存以后重启redis服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server redis.conf --loadmodule /home/www/server/redis/redisbloom.so</span><br></pre></td></tr></table></figure>\n\n<p>上面我们有提到需要重启Redis，在本地和测试环境还可以，但是正式环境能不重启就不需要重启，那这么做可以不重启Redis，使用module load命令执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; MODULE LOAD /home/www/server/redis/redisbloom.so</span><br><span class=\"line\">&gt; module list</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;bf&quot;</span></span><br><span class=\"line\">   3) <span class=\"string\">&quot;ver&quot;</span></span><br><span class=\"line\">   4) (<span class=\"built_in\">integer</span>) 999999</span><br></pre></td></tr></table></figure>\n\n<p>看到以上数据则说明redisbloom加载成功了，模块名name为”bf”，模块版本号ver为999999。</p>\n<p>Redis中布隆过滤器指令使用</p>\n<p>使用布隆过滤器完整指令请到官网查看： 点击这里</p>\n<h4 id=\"自定义参数\"><a href=\"#自定义参数\" class=\"headerlink\" title=\"自定义参数\"></a>自定义参数</h4><p>bf.reserve {key} {error_rate} {capacity}<br>使用给定的期望错误率和初始容量创建空的布隆过滤器<br>参数说明：<br>key：布隆过滤器的key<br>error_rate：期望的错误率（False Positive Rate），该值必须介于0和1之间。该值越小，BloomFilter的内存占用量越大，CPU使用率越高<br>capacity：布隆过滤器的初始容量，即期望添加到布隆过滤器中的元素的个数。当实际添加的元素个数超过该值时，布隆过滤器将进行自动的扩容，该过程会导致性能有所下降，下降的程度是随着元素个数的指数级增长而线性下降<br>返回值：<br>成功：OK<br>其它情况返回相应的异常信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个容量为5且不允许扩容的过滤器；</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.reserve name 0.1 5 NONSCALING</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name 1 2 3 4 5</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">4) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">5) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#添加第6个元素时即提示布隆过滤器已满；</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name 6</span><br><span class=\"line\">1) (error) ERR non scaling filter is full</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.info name</span><br><span class=\"line\"> 1) Capacity</span><br><span class=\"line\"> 2) (<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"> 3) Size</span><br><span class=\"line\"> 4) (<span class=\"built_in\">integer</span>) 155</span><br><span class=\"line\"> 5) Number of filters</span><br><span class=\"line\"> 6) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"> 7) Number of items inserted</span><br><span class=\"line\"> 8) (<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"> 9) Expansion rate</span><br><span class=\"line\">10) (<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加单个元素</span></span><br><span class=\"line\">bf.add &#123;key&#125; &#123;item&#125;</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">item：待插入过滤器的元素</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">元素不存在插入成功：返回1</span><br><span class=\"line\">元素可能已经存在：返回0</span><br><span class=\"line\">其它情况返回相应的异常信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加多个元素</span></span><br><span class=\"line\">bf.madd &#123;key&#125; &#123;item&#125; [item...]</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">item：待插入过滤器的元素，可插入多个</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">成功：返回一个数组，数组的每一个元素可能为1或0，当item一定不存在时数组元素值为1，当item可能已经存在时数组元素值为0</span><br><span class=\"line\">其它情况返回相应的异常信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断单个元素是否存在</span></span><br><span class=\"line\">bf.exists&#123;key&#125; &#123;item&#125;</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">item：待检查的元素</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">元素一定不存在：0</span><br><span class=\"line\">元素可能存在：1</span><br><span class=\"line\">其它情况返回相应的异常信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断多个元素是否存在</span></span><br><span class=\"line\">bf.mexists&#123;key&#125; &#123;item&#125; [item...]</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">item：待检查的元素</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">元素一定不存在：0</span><br><span class=\"line\">元素可能存在：1</span><br><span class=\"line\">其它情况返回相应的异常信息</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.add name zhangsan1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.add name zhangsan2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name zhangsan2 zhangsan3 zhangsan4 zhangsan5</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">4) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.exists name zhangsan2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.exists name  zhangsan3 </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.mexists name zhangsan3 zhangsan4 zhangsan5</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 向key指定的Bloom中添加多个元素，添加时可以指定大小和错误率，且可以控制在Bloom不存在的时候是否自动创建</span></span><br><span class=\"line\">bf.insert&#123;key&#125; [CAPACITY &#123;<span class=\"built_in\">cap</span>&#125;] [ERROR &#123;ERROR&#125;] [NOCREATE] ITEMS &#123;item…&#125;</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">CAPACITY：如果过滤器已创建，则此参数将被忽略</span><br><span class=\"line\">ERROR：如果过滤器已创建，则此参数将被忽略</span><br><span class=\"line\">expansion：布隆过滤器会自动创建一个子过滤器，子过滤器的大小是上一个过滤器大小乘以expansion。expansion的默认值是2，也就是说布隆过滤器扩容默认是2倍扩容。</span><br><span class=\"line\">NOCREATE：如果设置了该参数，当布隆过滤器不存在时则不会被创建。用于严格区分过滤器的创建和元素插入场景。该参数不能与CAPACITY和ERROR同时设置。</span><br><span class=\"line\">NONSCALING：设置此项后，当添加到布隆过滤器中的数据达到初始容量后，不会扩容过滤器，并且会抛出异常（(error) ERR non scaling filter is full）。</span><br><span class=\"line\">ITEMS：待插入过滤器的元素列表，该参数必传。</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">成功：返回一个数组，数组的每一个元素可能为1或0，当item一定不存在时数组元素值为1，当item可能已经存在时数组元素值为0</span><br><span class=\"line\">其它情况返回相应的异常信息</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bf.insert name items  zhangsan1 zhangsan2 zhangsan3</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.insert name items  zhangsan1 zhangsan2 zhangsan3</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.insert name capacity  10000 error 0.00001  nocreate  items  zhangsan1 zhangsan2 zhangsan3</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.insert name capacity  10000 error 0.00001  nocreate  items  zhangsan4 zhangsan5 zhangsan6</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对布隆过滤器进行增量持久化操作</span></span><br><span class=\"line\">bf.scandump &#123;key&#125; &#123;item&#125;</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">item：首次调用传值0，或者上次调用此命令返回的结果值</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">返回连续的(iter, data)对，直到(0,NULL)，表示DUMP完成</span><br><span class=\"line\">其它情况返回相应的异常信息</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6378&gt; bf.madd name zhangsan1 zhangsan2 zhangsan3 zhangsan4 zhangsan5</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6378&gt; bf.scandump name  0</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) <span class=\"string\">&quot;\\a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x8a\\x00\\x00\\x00\\x00\\x00\\x00\\x00P\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\a\\x00\\x00\\x00\\x00\\x00\\x00\\x00&#123;\\x14\\xaeG\\xe1zt?\\xe9\\x86/\\xb25\\x0e&amp;@\\b\\x00\\x00\\x00d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot;</span></span><br><span class=\"line\">127.0.0.1:6378&gt; bf.scandump name  1</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 139</span><br><span class=\"line\">2) <span class=\"string\">&quot;\\x80\\x00\\b\\n\\x00$\\x00 \\b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\b\\x00\\x00\\x00\\x00\\x82$\\x04\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x01@\\xa0\\x00@\\x00\\x00\\x00\\x00\\x00\\x10@\\x00\\x02\\&quot;\\x00 \\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00 \\x00\\x80\\x00\\x00\\&quot;\\x04\\x04\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x00\\x00 \\x80$\\x00 \\x00\\x00 \\x0c$\\x00\\x00\\x00\\b`\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\b\\x80\\x02 \\x04\\x00\\x00\\x00\\x00\\x00&quot;</span></span><br><span class=\"line\">127.0.0.1:6378&gt; bf.scandump name 200</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对布隆过滤器进行增量持久化操作</span></span><br><span class=\"line\">bf.scandump &#123;key&#125; &#123;item&#125;</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">item：首次调用传值0，或者上次调用此命令返回的结果值</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">返回连续的(iter, data)对，直到(0,NULL)，表示DUMP完成</span><br><span class=\"line\">其它情况返回相应的异常信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回布隆过滤器的相关信息</span></span><br><span class=\"line\">bf.info &#123;key&#125;</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">Capacity：预设容量</span><br><span class=\"line\">Size：实际占用情况，但如何计算待进一步确认</span><br><span class=\"line\">Number of filters：过滤器层数</span><br><span class=\"line\">Number of items inserted：已经实际插入的元素数量</span><br><span class=\"line\">Expansion rate：子过滤器扩容系数（默认2）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bf.info name</span><br><span class=\"line\"> 1) Capacity</span><br><span class=\"line\"> 2) (<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"> 3) Size</span><br><span class=\"line\"> 4) (<span class=\"built_in\">integer</span>) 155</span><br><span class=\"line\"> 5) Number of filters</span><br><span class=\"line\"> 6) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"> 7) Number of items inserted</span><br><span class=\"line\"> 8) (<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"> 9) Expansion rate</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看布隆过滤器的内部详细信息</span></span><br><span class=\"line\">bf.debug&#123;key&#125;</span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">key：布隆过滤器的名字</span><br><span class=\"line\">返回值：</span><br><span class=\"line\">size：布隆过滤器中已插入的元素数量</span><br><span class=\"line\">每层BloomFilter的详细信息</span><br><span class=\"line\">bytes：占用字节数量</span><br><span class=\"line\">bits：占用bit位数量，bits = bytes * 8</span><br><span class=\"line\">shashes：该层<span class=\"built_in\">hash</span>函数数量</span><br><span class=\"line\">hashwidth：<span class=\"built_in\">hash</span>函数宽度</span><br><span class=\"line\">capacity：该层容量（第一层为BloomFilter初始化时设置的容量，第2层容量 = 第一层容量 * expansion，以此类推）</span><br><span class=\"line\">size：该层中已插入的元素数量（各层size之和等于BloomFilter中已插入的元素数量size）</span><br><span class=\"line\">ratio：该层错误率（第一层的错误率 = BloomFilter初始化时设置的错误率 * 0.5，第二层为第一层的0.5倍，以此类推，ratio与expansion无关）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个容量为5的布隆过滤器，其key为“name”；</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.reserve name0.1 5</span><br><span class=\"line\">OK</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 查看布隆过滤器的内部信息，此时布隆过滤器的层数为1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.debug name</span><br><span class=\"line\">1) <span class=\"string\">&quot;size:0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;bytes:4 bits:32 hashes:5 hashwidth:64 capacity:5 size:0 ratio:0.05&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name 1 2 3 4 5</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">4) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">5) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.debug name</span><br><span class=\"line\">1) <span class=\"string\">&quot;size:5&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;bytes:4 bits:32 hashes:5 hashwidth:64 capacity:5 size:5 ratio:0.05&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name 11 12 13 14 15</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">4) (<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">5) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 添加10个元素后，此时布隆过滤器的层数变为2；</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.debug name</span><br><span class=\"line\">1) <span class=\"string\">&quot;size:9&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;bytes:4 bits:32 hashes:5 hashwidth:64 capacity:5 size:5 ratio:0.05&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;bytes:10 bits:80 hashes:6 hashwidth:64 capacity:10 size:4 ratio:0.025&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name 21 22 23</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.debug name</span><br><span class=\"line\">1) <span class=\"string\">&quot;size:12&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;bytes:4 bits:32 hashes:5 hashwidth:64 capacity:5 size:5 ratio:0.05&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;bytes:10 bits:80 hashes:6 hashwidth:64 capacity:10 size:7 ratio:0.025&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name 24 25</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; bf.debug name</span><br><span class=\"line\">1) <span class=\"string\">&quot;size:14&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;bytes:4 bits:32 hashes:5 hashwidth:64 capacity:5 size:5 ratio:0.05&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;bytes:10 bits:80 hashes:6 hashwidth:64 capacity:10 size:9 ratio:0.025&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.madd name 31 32 33 34 35</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">4) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">5) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#添加20个元素后，此时布隆过滤器的层数变为3；</span></span><br><span class=\"line\">127.0.0.1:6379&gt; bf.debug name</span><br><span class=\"line\">1) <span class=\"string\">&quot;size:19&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;bytes:4 bits:32 hashes:5 hashwidth:64 capacity:5 size:5 ratio:0.05&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;bytes:10 bits:80 hashes:6 hashwidth:64 capacity:10 size:10 ratio:0.025&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;bytes:23 bits:184 hashes:7 hashwidth:64 capacity:20 size:4 ratio:0.0125&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java集成Redis使用布隆过滤器\"><a href=\"#Java集成Redis使用布隆过滤器\" class=\"headerlink\" title=\"Java集成Redis使用布隆过滤器\"></a>Java集成Redis使用布隆过滤器</h4><p>pom中引入redisson依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.13.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编写代码测试1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">patchingConsum</span><span class=\"params\">(ConsumPatchingVO vo)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</span><br><span class=\"line\">\tConfig config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">\tSingleServerConfig singleServerConfig = config.useSingleServer();</span><br><span class=\"line\">\tsingleServerConfig.setAddress(<span class=\"string\">&quot;redis://127.0.0.1:6379&quot;</span>);</span><br><span class=\"line\">\tsingleServerConfig.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\tRedissonClient redissonClient = Redisson.create(config);</span><br><span class=\"line\">\tRBloomFilter&lt;String&gt; bloom = redissonClient.getBloomFilter(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化布隆过滤器；  大小:100000，误判率:0.01</span></span><br><span class=\"line\">\tbloom.tryInit(<span class=\"number\">100000L</span>, <span class=\"number\">0.01</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 新增10万条数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++) &#123;</span><br><span class=\"line\">\t\tbloom.add(<span class=\"string\">&quot;name&quot;</span> + i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断不存在于布隆过滤器中的元素</span></span><br><span class=\"line\">\tList&lt;String&gt; notExistList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++) &#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">&quot;name&quot;</span> + i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> notExist = bloom.contains(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (notExist) &#123;</span><br><span class=\"line\">\t\t\tnotExistList.add(str);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ($.isNotEmpty(notExistList) &amp;&amp; notExistList.size() &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;误判次数:&quot;</span>+notExistList.size());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写代码测试1</p>\n<p>在springboot配置文件中配置reids连接信息</p>\n<p>编写一个service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.haoxuan.springboot.demo.bloomfilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RBloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RedissonClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilterService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedissonClient redissonClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建布隆过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filterName 过滤器名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expectedInsertions 预测插入数量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> falseProbability 误判率</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt;<span class=\"function\">RBloomFilter&lt;T&gt; <span class=\"title\">create</span><span class=\"params\">(String filterName, <span class=\"keyword\">long</span> expectedInsertions, <span class=\"keyword\">double</span> falseProbability)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            注意事项：如果是 Redis Cluster 集群，则需要</span></span><br><span class=\"line\"><span class=\"comment\">            RClusteredBloomFilter&lt;SomeObject&gt; bloomFilter = redisson.getClusteredBloomFilter(&quot;sample&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        RBloomFilter&lt;T&gt; bloomFilter = redissonClient.getBloomFilter(filterName);</span><br><span class=\"line\">        bloomFilter.tryInit(expectedInsertions, falseProbability);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bloomFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.haoxuan.springboot.demo.bloomfilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RBloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilterTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BloomFilterService bloomFilterService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBloomFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 预期插入数量</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> expectedInsertions = <span class=\"number\">10000L</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 错误比率</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> falseProbability = <span class=\"number\">0.01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        RBloomFilter&lt;Long&gt; ipBlackList = bloomFilterService.create(<span class=\"string\">&quot;ipBlackList&quot;</span>, expectedInsertions, falseProbability);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; expectedInsertions; i++) &#123;</span><br><span class=\"line\">             ipBlackList.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> elementCount = ipBlackList.count();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;elementCount is: &quot;</span> + elementCount);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 统计误判次数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; expectedInsertions * <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (ipBlackList.contains(i)) &#123;</span><br><span class=\"line\">                 count++;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;误判次数：&quot;</span> + count);</span><br><span class=\"line\">        ipBlackList.delete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["java-tec-stack"],"tags":["java","springboot","bloomfilter"]},{"title":"Validated注解的使用","url":"/2021/05/19/java/java-tools/Validated/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>日常开发过程中，经常遇到大量的参数进行校验,在业务中还要抛出异常等校验信息,在代码中相当冗长, 充满了if-else这种校验代码,代码不够优雅，使用spring的javax.validation注解式参数校验，可以免去繁琐的校验。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Validated注解\"><a href=\"#Validated注解\" class=\"headerlink\" title=\"Validated注解\"></a>Validated注解</h2><p><strong>实体类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;id添加时可以为空，更新时不能为空&quot;, groups = &#123;UpdateGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank(message = &quot;名字不能为空&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 12, message = &quot;名字的长度在6到12之间&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;年龄不能为空&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Min(value = 20, message = &quot;最小年龄要大于20&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 没有指定组别，默认是Default.class组别</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank(message = &quot;编号不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Pattern(regexp = &quot;^(广告组)\\\\d$&quot;, message = &quot;编号要以广告组开头，以1-9结尾&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String number;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> com.tt.enums.PersonStatusEnum</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;添加人员的时候状态不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status;</span><br><span class=\"line\">    <span class=\"meta\">@NotBlank(message = &quot;添加人员的时候如果状态是类别2的时候角色字段不能为空&quot;, groups = &#123;SecondGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String role;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用的校验注解\"><a href=\"#常用的校验注解\" class=\"headerlink\" title=\"常用的校验注解\"></a>常用的校验注解</h3><p>@NotNull<br>被注释的元素必须不为 null<br>@Min(value)<br>被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@Max(value)<br>被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@Size(max, min)<br>被注释的元素的大小必须在指定的范围内，用在集合大小或者字符串的大小<br>@Pattern(value)<br>被注释的元素必须符合指定的正则表达式<br>@NotEmpty<br>被注释的元素必须不为 null 或者不为空，可校验字符、集合、Map<br>@NotBlank<br>被注释的元素必须不为空字符串<br>@Range(min ，max)<br>数值类型的范围大小，相当于@Min+@Max两个注解</p>\n<h2 id=\"采用Validated注解校验\"><a href=\"#采用Validated注解校验\" class=\"headerlink\" title=\"采用Validated注解校验\"></a>采用Validated注解校验</h2><h3 id=\"采用-Valid注解校验-Valid不提供分组的功能\"><a href=\"#采用-Valid注解校验-Valid不提供分组的功能\" class=\"headerlink\" title=\"采用@Valid注解校验(@Valid不提供分组的功能)\"></a>采用@Valid注解校验(@Valid不提供分组的功能)</h3><p><strong>接口层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 采用<span class=\"doctag\">@valid</span>注解校验 只校验没有指定分组的字段，也相当于校验Default的组别</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> person</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;valid&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">valid</span><span class=\"params\">(<span class=\"meta\">@Valid</span> <span class=\"meta\">@RequestBody</span> Person person)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;valid注解校验成功!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Validated不分组校验（单层对象）\"><a href=\"#Validated不分组校验（单层对象）\" class=\"headerlink\" title=\"Validated不分组校验（单层对象）\"></a>Validated不分组校验（单层对象）</h3><p><strong>接口层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 不指定分组，只校验默认的组别Default</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> person</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;default&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">defaultGroup</span><span class=\"params\">(<span class=\"meta\">@Validated()</span> <span class=\"meta\">@RequestBody</span> Person person)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Validated注解默认成功!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Validated分组校验（单层对象）\"><a href=\"#Validated分组校验（单层对象）\" class=\"headerlink\" title=\"Validated分组校验（单层对象）\"></a>Validated分组校验（单层对象）</h3><p>由于在项目中存在几个接口共用一个实体类，在不同的接口中某些字段的规则是不一样的，如果想要用同一个对象的话，这个时候就需要用到分组的功能了，指定字段在某个组别下的规则。</p>\n<p><strong>接口层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 指定组别校验，校验自定义的AddGroup组别</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> person</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;add&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addGroup</span><span class=\"params\">(<span class=\"meta\">@Validated(&#123;AddGroup.class&#125;)</span> <span class=\"meta\">@RequestBody</span> Person person)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Validated注解添加成功!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 指定组别校验，校验自定义的UpdateGroup组别和默认的组别Default</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> person</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;update&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateGroup</span><span class=\"params\">(<span class=\"meta\">@Validated(&#123;UpdateGroup.class, Default.class&#125;)</span> <span class=\"meta\">@RequestBody</span> Person person)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Validated注解更新成功!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Validated根据前端的传参状态，添加不同的组别，最后进行手动校验（单层对象）\"><a href=\"#Validated根据前端的传参状态，添加不同的组别，最后进行手动校验（单层对象）\" class=\"headerlink\" title=\"Validated根据前端的传参状态，添加不同的组别，最后进行手动校验（单层对象）\"></a>Validated根据前端的传参状态，添加不同的组别，最后进行手动校验（单层对象）</h3><p><strong>接口层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 框架先校验AddGroup组别的参数，然后如果状态是类别2，则需要手动添加要</span></span><br><span class=\"line\"><span class=\"comment\"> 校验SecondGroup和Default组别，最后再调用校验的工具类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> person</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;manual&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">manualGroup</span><span class=\"params\">(<span class=\"meta\">@Validated(&#123;AddGroup.class&#125;)</span> <span class=\"meta\">@RequestBody</span> Person person)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    List&lt;Class&gt; groupClasses = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (PersonStatusEnum.isSecond(person.getStatus())) &#123;</span><br><span class=\"line\">        groupClasses.add(SecondGroup.class);</span><br><span class=\"line\">        groupClasses.add(Default.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//转成数组</span></span><br><span class=\"line\">    Class[] groups = groupClasses.toArray(<span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"comment\">//手动调用校验的方法</span></span><br><span class=\"line\">    ValidatorUtils.validateEntity(person, groups);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Validated注解手动添加成功!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>工具类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValidatorUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Validator validator = Validation.buildDefaultValidatorFactory().getValidator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 手动校验</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> groups</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">validateEntity</span><span class=\"params\">(Object object, Class&lt;?&gt;... groups)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolations = validator.validate(object, groups);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!constraintViolations.isEmpty()) &#123;</span><br><span class=\"line\">            StringBuilder errorMsg = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (ConstraintViolation&lt;?&gt; e : constraintViolations) &#123;</span><br><span class=\"line\">                errorMsg.append(e.getMessage() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(errorMsg.substring(<span class=\"number\">0</span>, errorMsg.toString().length() - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Validated嵌套对象校验-级联\"><a href=\"#Validated嵌套对象校验-级联\" class=\"headerlink\" title=\"Validated嵌套对象校验(级联)\"></a>Validated嵌套对象校验(级联)</h3><p>项目中经常会遇到一个对象中嵌套另外一个对象的情况（一对多的关系），这个时候就要用到级联校验</p>\n<p><strong>接口层</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部门添加人员的校验，指定组别校验，部门的对象包含了一个人员对象的集合</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> dept</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;add&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addGroup</span><span class=\"params\">(<span class=\"meta\">@Validated(&#123;AddGroup.class, Default.class&#125;)</span> <span class=\"meta\">@RequestBody</span> Dept dept)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;添加部门人员成功!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实体类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dept</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NotBlank(message = &quot;部门的名称不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String departName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotEmpty(message = &quot;人员对象集合不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(max = 2, message = &quot;一次添加部门人员最多两个&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *    加上该注解能够对嵌套里面的那层对象Person进行校验，要不然不会校验</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Valid</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Person&gt; personList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;id添加时可以为空，更新时不能为空&quot;, groups = &#123;UpdateGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank(message = &quot;名字不能为空&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 12, message = &quot;名字的长度在6到12之间&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;年龄不能为空&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Min(value = 20, message = &quot;最小年龄要大于20&quot;, groups = &#123;UpdateGroup.class, AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 没有指定组别，默认是Default.class组别</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank(message = &quot;编号不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Pattern(regexp = &quot;^(广告组)\\\\d$&quot;, message = &quot;编号要以广告组开头，以1-9结尾&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String number;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> com.tt.enums.PersonStatusEnum</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;添加人员的时候状态不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status;</span><br><span class=\"line\">    <span class=\"meta\">@NotBlank(message = &quot;添加人员的时候如果状态是类别2的时候角色字段不能为空&quot;, groups = &#123;SecondGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String role;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Validated自定义注解校验\"><a href=\"#Validated自定义注解校验\" class=\"headerlink\" title=\"Validated自定义注解校验\"></a>Validated自定义注解校验</h3><p>如果框架提供的注解不满足实际开发中业务的校验，可以自定义一个校验注解来实现</p>\n<h4 id=\"自定义一个注解\"><a href=\"#自定义一个注解\" class=\"headerlink\" title=\"自定义一个注解\"></a>自定义一个注解</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 自定义校验注解</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义校验注解一定要有value,message,groups三个属性</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.tt.validator.ListNotHasNullValidatorImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Constraint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Payload;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ANNOTATION_TYPE, ElementType.METHOD, ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"comment\">//此处指定了该注解的实现类为ListNotHasNullValidatorImpl</span></span><br><span class=\"line\"><span class=\"meta\">@Constraint(validatedBy = ListNotHasNullValidatorImpl.class)</span></span><br><span class=\"line\"><span class=\"comment\">//在同一个地方使用相同的注解会报错，所以该注解是装同一个注解的容器，</span></span><br><span class=\"line\"><span class=\"meta\">@Repeatable(ListRoleNotHasNull.List.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ListRoleNotHasNull &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加value属性，可以作为校验时的条件,若不需要，可去掉此处定义</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认的报错提示信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">message</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;List集合中的元素不能含有<span class=\"keyword\">null</span>元素&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] groups() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 约束注解的有效负载  将一些元数据信息与该约束注解相关联</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Class&lt;? extends Payload&gt;[] payload() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义List，为了让Bean的一个属性上可以添加多套规则</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Target(&#123;METHOD, FIELD, ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\">    <span class=\"meta\">@Documented</span></span><br><span class=\"line\">    <span class=\"meta\">@interface</span> List &#123;</span><br><span class=\"line\">        ListRoleNotHasNull[] value();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现ConstraintValidator接口\"><a href=\"#实现ConstraintValidator接口\" class=\"headerlink\" title=\"实现ConstraintValidator接口\"></a>实现ConstraintValidator接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNotHasNullValidatorImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConstraintValidator</span>&lt;<span class=\"title\">ListRoleNotHasNull</span>, <span class=\"title\">List</span>&lt;<span class=\"title\">Role</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(ListRoleNotHasNull constraintAnnotation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//传入value 值，可以在校验中使用</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = constraintAnnotation.value();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(List&lt;Role&gt; list, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span> || list.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//返回false就会抛出错误的信息</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Role role : list) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (role.getRoleName() == <span class=\"keyword\">null</span> || role.getId() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Company</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ListRoleNotHasNull(message = &quot;集合不能为空,并且对象里面的属性值也不能为空&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Role&gt; roleList;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String roleName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;add&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">definedAdd</span><span class=\"params\">(<span class=\"meta\">@Validated(value = &#123;AddGroup.class&#125;)</span> <span class=\"meta\">@RequestBody</span> Company company)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;自定义注解添加成功!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Validated和Valid的不同\"><a href=\"#Validated和Valid的不同\" class=\"headerlink\" title=\"Validated和Valid的不同\"></a>Validated和Valid的不同</h2><p>@Valid用来标记验证属性和方法返回值，支持进行级联和递归校验（可以结合@Validated注解在嵌套对象中使用)。<br>@Validated是Spring提供的注解，提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制。<br>在Controller中校验方法参数时，使用@Valid和@Validated并无特殊差异（若不需要分组校验的话）。<br>@Validated只能用在类、方法和参数上，而@Valid可用于类、方法、字段、构造器和参数上。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>建议直接用@Validated，功能比@Valid注解强大</p>\n","categories":["java-tools"],"tags":["java"]},{"title":"mysql集群方案","url":"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BB%8B%E7%BB%8D\">介绍</a></li>\n<li><a href=\"#mysql%E5%8E%9F%E5%8E%82%E5%87%BA%E5%93%81\">mysql原厂出品</a><ul>\n<li><a href=\"#mysql-replication\">MySQL Replication</a></li>\n<li><a href=\"#mysql-fabirc\">MySQL Fabirc</a></li>\n<li><a href=\"#mysql-cluster\">MySQL Cluster</a></li>\n<li><a href=\"#mgr\">MGR</a></li>\n</ul>\n</li>\n<li><a href=\"#mysql%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BC%98%E5%8C%96\">mysql第三方优化</a><ul>\n<li><a href=\"#mmm\">MMM</a></li>\n<li><a href=\"#mha\">MHA</a></li>\n<li><a href=\"#pxc\">PXC</a></li>\n<li><a href=\"#galera-cluster\">Galera Cluster</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BE%9D%E6%89%98%E7%A1%AC%E4%BB%B6%E9%85%8D%E5%90%88\">依托硬件配合</a><ul>\n<li><a href=\"#heartbeatsan\">heartbeat+SAN</a></li>\n<li><a href=\"#heartbeatdrdb\">heartbeat+DRDB</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%B6%E5%AE%83\">其它</a><ul>\n<li><a href=\"#zookeeper-proxy\">Zookeeper + proxy</a></li>\n<li><a href=\"#paxos\">Paxos</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"介绍\">介绍</span></h1><p>集群的好处</p>\n<ul>\n<li>高可用性：故障检测及迁移，多节点备份。</li>\n<li>可伸缩性：新增数据库节点便利，方便扩容。</li>\n<li>负载均衡：切换某服务访问某节点，分摊单个节点的数据库压力。</li>\n</ul>\n<p>集群要考虑的风险</p>\n<ul>\n<li>网络分裂：群集还可能由于网络故障而拆分为多个部分，每部分内的节点相互连接，但各部分之间的节点失去连接。</li>\n<li>脑裂：导致数据库节点彼此独立运行的集群故障称为“脑裂”。这种情况可能导致数据不一致，并且无法修复，例如当两个数据库节点独立更新同一表上的同一行时。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1><span id=\"mysql原厂出品\">mysql原厂出品</span></h1><h2><span id=\"mysql-replication\">MySQL Replication</span></h2><p>主从架构</p>\n<p>mysql复制（MySQL Replication），是mysql自带的功能。</p>\n<p>原理简介：</p>\n<p>主从复制是通过重放binlog实现主库数据的异步复制。即当主库执行了一条sql命令，那么在从库同样的执行一遍，从而达到主从复制的效果。在这个过程中，master对数据的写操作记入二进制日志文件中(binlog)，生成一个 log dump 线程，用来给从库的 i/o线程传binlog。而从库的i/o线程去请求主库的binlog，并将得到的binlog日志写到中继日志（relaylog）中，从库的sql线程，会读取relaylog文件中的日志，并解析成具体操作，通过主从的操作一致，而达到最终数据一致。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70.jpeg\" alt=\"MySQL Replication_lgx211\"></p>\n<p>MySQL Replication一主多从的结构，主要目的是实现数据的多点备份（没有故障自动转移和负载均衡）。相比于单个的mysql，一主多从下的优势如下：</p>\n<ul>\n<li>如果让后台读操作连接从数据库，让写操作连接主数据库，能起到读写分离的作用，这个时候多个从数据库可以做负载均衡。</li>\n<li>可以在某个从数据库中暂时中断复制进程，来备份数据，从而不影响主数据的对外服务（如果在master上执行backup，需要让master处于readonly状态，这也意味这所有的write请求需要阻塞）。</li>\n</ul>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>主从复制是mysql自带的，无需借助第三方。</li>\n<li>数据被删除，可以从binlog日志中恢复。</li>\n<li>配置较为简单方便。</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>从库要从binlog获取数据并重放，这肯定与主库写入数据存在时间延迟，因此从库的数据总是要滞后主库。</li>\n<li>对主库与从库之间的网络延迟要求较高，若网络延迟太高，将加重上述的滞后，造成最终数据的不一致。</li>\n<li>单一的主节点挂了，将不能对外提供写服务。</li>\n</ul>\n<h2><span id=\"mysql-fabirc\">MySQL Fabirc</span></h2><p>mysql织物（MySQL Fabirc），是mysql官方提供的。</p>\n<p>这是在MySQL Replication的基础上，增加了故障检测与转移，自动数据分片功能。不过依旧是一主多从的结构，MySQL Fabirc只有一个主节点，区别是当该主节点挂了以后，会从从节点中选择一个来当主节点。</p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>mysql官方提供的工具，无需第三方插件。</li>\n<li>数据被删除，可以从binlog日志中恢复。</li>\n<li>主节点挂了以后，能够自动从从节点中选择一个来当主节点，不影响持续对外提供写服务。</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>从库要从binlog获取数据并重放，这肯定与主库写入数据存在时间延迟，因此从库的数据总是要滞后主库。</li>\n<li>对主库与从库之间的网络延迟要求较高，若网络延迟太高，将加重上述的滞后，造成最终数据的不一致。</li>\n<li>2014年5月推出的产品，数据库资历较浅，应用案例不多，网上各种资料相对较少。</li>\n<li>事务及查询只支持在同一个分片内，事务中更新的数据不能跨分片，查询语句返回的数据也不能跨分片。</li>\n<li>节点故障恢复30秒或更长（采用InnoDB存储引擎的都这样）。</li>\n</ul>\n<h2><span id=\"mysql-cluster\">MySQL Cluster</span></h2><p>mysql集群（MySQL Cluster）也是mysql官方提供的。</p>\n<p>MySQL Cluster是多主多从结构的</p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>mysql官方提供的工具，无需第三方插件。</li>\n<li>高可用性优秀，99.999%的可用性，可以自动切分数据，能跨节点冗余数据（其数据集并不是存储某个特定的MySQL实例上，而是被分布在多个Data Nodes中，即一个table的数据可能被分散在多个物理节点上，任何数据都会在多个Data Nodes上冗余备份。任何一个数据变更操作，都将在一组Data Nodes上同步，以保证数据的一致性）。</li>\n<li>可伸缩性优秀，能自动切分数据，方便数据库的水平拓展。</li>\n<li>负载均衡优秀，可同时用于读操作、写操作都都密集的应用，也可以使用SQL和NOSQL接口访问数据。</li>\n<li>多个主节点，没有单点故障的问题，节点故障恢复通常小于1秒。</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>架构模式和原理很复杂。</li>\n<li>只能使用存储引擎 NDB ，与平常使用的InnoDB 有很多明显的差距。比如在事务（其事务隔离级别只支持Read Committed，即一个事务在提交前，查询不到在事务内所做的修改），外键（虽然最新的NDB 存储引擎已经支持外键，但性能有问题，因为外键所关联的记录可能在别的分片节点），表限制上的不同，可能会导致日常开发出现意外。<a href=\"https://dev.mysql.com/doc/mysql-cluster-excerpt/8.0/en/mysql-cluster-ndb-innodb-engines.html\">点击查看具体差距比较</a></li>\n<li>作为分布式的数据库系统，各个节点之间存在大量的数据通讯，比如所有访问都是需要经过超过一个节点（至少有一个 SQL Node和一个 NDB Node）才能完成，因此对节点之间的内部互联网络带宽要求高。</li>\n<li>Data Node数据会被尽量放在内存中，对内存要求大，而且重启的时候，数据节点将数据load到内存需要很长时间。</li>\n</ul>\n<p>官方的区别对比如下所示；</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70.png\" alt=\"官方三兄弟对比图_lgx211\"></p>\n<p><strong>Differences between InnoDB and NDB storage engines</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Feature</th>\n<th align=\"left\"><code>InnoDB</code> (MySQL 8.0)</th>\n<th align=\"left\"><code>NDB</code> 8.0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">MySQL Server Version</td>\n<td align=\"left\">8.0</td>\n<td align=\"left\">8.0</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html\"><code>InnoDB</code></a> Version</td>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html\"><code>InnoDB</code></a> 8.0.26</td>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html\"><code>InnoDB</code></a> 8.0.26</td>\n</tr>\n<tr>\n<td align=\"left\">NDB Cluster Version</td>\n<td align=\"left\">N/A</td>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster.html\"><code>NDB</code></a> 8.0.27/8.0.27</td>\n</tr>\n<tr>\n<td align=\"left\">Storage Limits</td>\n<td align=\"left\">64TB</td>\n<td align=\"left\">128TB</td>\n</tr>\n<tr>\n<td align=\"left\">Foreign Keys</td>\n<td align=\"left\">Yes</td>\n<td align=\"left\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\">Transactions</td>\n<td align=\"left\">All standard types</td>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_read-committed\"><code>READ COMMITTED</code></a></td>\n</tr>\n<tr>\n<td align=\"left\">MVCC</td>\n<td align=\"left\">Yes</td>\n<td align=\"left\">No</td>\n</tr>\n<tr>\n<td align=\"left\">Data Compression</td>\n<td align=\"left\">Yes</td>\n<td align=\"left\">No (NDB checkpoint and backup files can be compressed)</td>\n</tr>\n<tr>\n<td align=\"left\">Large Row Support (&gt; 14K)</td>\n<td align=\"left\">Supported for <a href=\"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html\"><code>VARBINARY</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/char.html\"><code>VARCHAR</code></a>, <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>BLOB</code></a>, and <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>TEXT</code></a> columns</td>\n<td align=\"left\">Supported for <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>BLOB</code></a> and <a href=\"https://dev.mysql.com/doc/refman/8.0/en/blob.html\"><code>TEXT</code></a> columns only (Using these types to store very large amounts of data can lower NDB performance)</td>\n</tr>\n<tr>\n<td align=\"left\">Replication Support</td>\n<td align=\"left\">Asynchronous and semisynchronous replication using MySQL Replication; MySQL <a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-replication.html\">Group Replication</a></td>\n<td align=\"left\">Automatic synchronous replication within an NDB Cluster; asynchronous replication between NDB Clusters, using MySQL Replication (Semisynchronous replication is not supported)</td>\n</tr>\n<tr>\n<td align=\"left\">Scaleout for Read Operations</td>\n<td align=\"left\">Yes (MySQL Replication)</td>\n<td align=\"left\">Yes (Automatic partitioning in NDB Cluster; NDB Cluster Replication)</td>\n</tr>\n<tr>\n<td align=\"left\">Scaleout for Write Operations</td>\n<td align=\"left\">Requires application-level partitioning (sharding)</td>\n<td align=\"left\">Yes (Automatic partitioning in NDB Cluster is transparent to applications)</td>\n</tr>\n<tr>\n<td align=\"left\">High Availability (HA)</td>\n<td align=\"left\">Built-in, from InnoDB cluster</td>\n<td align=\"left\">Yes (Designed for 99.999% uptime)</td>\n</tr>\n<tr>\n<td align=\"left\">Node Failure Recovery and Failover</td>\n<td align=\"left\">From MySQL Group Replication</td>\n<td align=\"left\">Automatic (Key element in NDB architecture)</td>\n</tr>\n<tr>\n<td align=\"left\">Time for Node Failure Recovery</td>\n<td align=\"left\">30 seconds or longer</td>\n<td align=\"left\">Typically &lt; 1 second</td>\n</tr>\n<tr>\n<td align=\"left\">Real-Time Performance</td>\n<td align=\"left\">No</td>\n<td align=\"left\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\">In-Memory Tables</td>\n<td align=\"left\">No</td>\n<td align=\"left\">Yes (Some data can optionally be stored on disk; both in-memory and disk data storage are durable)</td>\n</tr>\n<tr>\n<td align=\"left\">NoSQL Access to Storage Engine</td>\n<td align=\"left\">Yes</td>\n<td align=\"left\">Yes (Multiple APIs, including Memcached, Node.js/JavaScript, Java, JPA, C++, and HTTP/REST)</td>\n</tr>\n<tr>\n<td align=\"left\">Concurrent and Parallel Writes</td>\n<td align=\"left\">Yes</td>\n<td align=\"left\">Up to 48 writers, optimized for concurrent writes</td>\n</tr>\n<tr>\n<td align=\"left\">Conflict Detection and Resolution (Multiple Sources)</td>\n<td align=\"left\">Yes (MySQL Group Replication)</td>\n<td align=\"left\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\">Hash Indexes</td>\n<td align=\"left\">No</td>\n<td align=\"left\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\">Online Addition of Nodes</td>\n<td align=\"left\">Read/write replicas using MySQL Group Replication</td>\n<td align=\"left\">Yes (all node types)</td>\n</tr>\n<tr>\n<td align=\"left\">Online Upgrades</td>\n<td align=\"left\">Yes (using replication)</td>\n<td align=\"left\">Yes</td>\n</tr>\n<tr>\n<td align=\"left\">Online Schema Modifications</td>\n<td align=\"left\">Yes, as part of MySQL 8.0</td>\n<td align=\"left\">Yes</td>\n</tr>\n</tbody></table>\n<h2><span id=\"mgr\">MGR</span></h2><p>Mysql Group Replication</p>\n<p>Mgr目前有两种模式，单主模式和多主模式，区别为是否提供多个节点同时写入的能力。由于mgr采用乐观锁，在高并发的情况下很容易在提交那一刻造成冲突，所以在生产环境中一般采用单主模式居多。Paxos协议能容忍少数节点宕机，因为paxos协议要求一半以上的节点收到日志主库才可以提交。在单主模式下，当主库宕机，集群会根据group_replication_member_weight设置的权重值进行备机升主，因为是强一致协议，所以不存在日志是否是最新的问题，如果权重相同，那么会根据server的uuid进行排序。mgr本身还有一些限制，比如写集合冲突问题，必须要求有主键，只支持innodb，不支持外键、save point等，还有集群的强一致导致对网络的要求较高，如果遇到网络波动，对集群的影响较大。mgr本身能够实现故障自动选举，但是生产环境需要做到对应用的透明，所以一般是基于vip的，应用连接的是vip，如果发生切换，需要将vip也漂移到新主库，这里其实还涉及到很多判断和切换逻辑，所以mgr并不是切换方案，他只是提供了一种新的强一致高可用技术，要想把它用于生产环境中其实还有很多工具和脚本要进行开发。</p>\n<p>MGR的特性</p>\n<p>　　高一致性。基于原生复制及paxos协议的组复制技术，并以插件的方式提供，提供一致数据安全保证；</p>\n<p>　　高容错性。只要不是大多数节点坏掉就可以继续工作，有自动检测机制，当不同节点产生资源争用冲突时，不会出现错误，按照先到者优先原则进行处理，并且内置了自动化脑裂防护机制；</p>\n<p>　　高扩展性。节点的新增和移除都是自动的，新节点加入后，会自动从其他节点上同步状态，直到新节点和其他节点保持一致，如果某节点被移除了，其他节点自动更新组信息，自动维护新的组信息；</p>\n<p>　　高灵活性。有单主模式和多主模式，单主模式下，会自动选主，所有更新操作都在主上进行；多主模式下，所有server都可以同时处理更新操作。</p>\n<h1><span id=\"mysql第三方优化\">mysql第三方优化</span></h1><h2><span id=\"mmm\">MMM</span></h2><p>MMM是在MySQL Replication的基础上，对其进行优化。</p>\n<p>MMM（Master Replication Manager for MySQL）是双主多从结构，这是Google的开源项目，使用Perl语言来对MySQL Replication做扩展，提供一套支持双主故障切换和双主日常管理的脚本程序，主要用来监控mysql主主复制并做失败转移。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70-20210802235007110.png\" alt=\"MMM_lgx211\"></p>\n<p>注意：这里的双主节点，虽然叫做双主复制，但是业务上同一时刻只允许对一个主进行写入，另一台备选主上提供部分读服务，以加速在主主切换时刻备选主的预热。</p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>自动的主主Failover切换，一般3s以内切换备机。</li>\n<li>多个从节点读的负载均衡。</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>无法完全保证数据的一致性。如主1挂了，MMM monitor已经切换到主2上来了，而若此时双主复制中，主2数据落后于主1（即还未完全复制完毕），那么此时的主2已经成为主节点，对外提供写服务，从而导致数据不一。</li>\n<li>由于是使用虚拟IP浮动技术，类似Keepalived，故RIP（真实IP）要和VIP（虚拟IP）在同一网段。如果是在不同网段也可以，需要用到虚拟路由技术。但是绝对要在同一个IDC机房，不可跨IDC机房组建集群。</li>\n</ul>\n<h2><span id=\"mha\">MHA</span></h2><p>MHA是在MySQL Replication的基础上，对其进行优化。</p>\n<p>MHA（Master High Availability）是多主多从结构，这是日本DeNA公司的youshimaton开发，主要提供更多的主节点，但是缺少VIP（虚拟IP），需要配合keepalived等一起使用。</p>\n<p>要搭建MHA，要求一个复制集群中必须最少有三台数据库服务器，一主二从，即一台充当master，一台充当备用master，另外一台充当从库。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70-20210802235043670.png\" alt=\"MHA_lgx211\"></p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>可以进行故障的自动检测和转移</li>\n<li>具备自动数据补偿能力，在主库异常崩溃时能够最大程度的保证数据的一致性。</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>MHA架构实现读写分离，最佳实践是在应用开发设计时提前规划读写分离事宜，在使用时设置两个连接池，即读连接池与写连接池，也可以选择折中方案即引入SQL Proxy。但无论如何都需要改动代码；</li>\n<li>关于读负载均衡可以使用F5、LVS、HAPROXY或者SQL Proxy等工具，只要能实现负载均衡、故障检查及备升级为主后的读写剥离功能即可，建议使用LVS</li>\n</ul>\n<h2><span id=\"pxc\">PXC</span></h2><p>PXC（Percona XtraDB Cluster）是一个开源的MySQL高可用解决方案。它将Percona server和XtraBackup与galera库集成，以实现同步多主复制。基于galera的高可用方案主要有MariaDB galeracluster和Percona XtraDB cluster，目前PXC架构在生产线上用的很多而且更加成熟。PXC相比那些传统的基于主从模式的集群架构MHA和双主，galera cluster最突出的特点是解决了诟病已久的复制延迟问题，基本上可以达到实时同步。而且节点与节点之间，他们互相的关系是对等的。本身galera cluster也是一种多主架构。PXC是在存储引擎层实现的同步复制，而非异步复制，所以其数据的一致性是相当高的。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzAxOTAxNg==,size_16,color_FFFFFF,t_70.png\" alt=\"在这里插入图片描述\"></p>\n<p>优点:</p>\n<ul>\n<li>实现了MySQL集群的高可用性和数据的强一致性。 </li>\n<li>完成了真正的多节点读写的集群方案。 </li>\n<li>改善了主从复制延迟问题，基本上达到了实时同步。 </li>\n<li>新加入的节点可以自动部署，无需提前手动备份，维护方便。</li>\n<li> 由于是多节点写入，所以DB故障切换很容易。</li>\n</ul>\n<p>缺点:</p>\n<ul>\n<li>加入新节点时开销大，添加新节点时，必须从现有节点之一复制完整数据集。如果是100GB，则复制100GB。</li>\n<li>任何更新的事务都需要全局验证通过，才会在其他节点上执行。集群性能受限于性能最差的节点，也就是常说的木桶定律。</li>\n<li>因为需要保证数据的一致性，PXC采用的实时基于存储引擎层来实现同步复制，所以在多节点并发写入时，锁冲突问题比较严重。</li>\n<li>存在写扩大的问题，所以节点上都会发生写操作，对于写负载过大的场景，不推荐使用PXC。</li>\n<li>只支持innodb存储引擎。</li>\n</ul>\n<h2><span id=\"galera-cluster\">Galera Cluster</span></h2><p>Galera Cluster是由Codership开发的MySQL多主结构集群，这些主节点互为其它节点的从节点。不同于MySQL原生的主从异步复制，Galera采用的是多主同步复制，并针对同步复制过程中，会大概率出现的事务冲突和死锁进行优化，就是复制不基于官方binlog而是Galera复制插件，重写了wsrep api。</p>\n<blockquote>\n<p>异步复制中，主库将数据更新传播给从库后立即提交事务，而不论从库是否成功读取或重放数据变化。这种情况下，在主库事务提交后的短时间内，主从库数据并不一致。</p>\n<p>同步复制时，主库的单个更新事务需要在所有从库上同步 更新。换句话说，当主库提交事务时，集群中所有节点的数据保持一致。</p>\n</blockquote>\n<p>对于读操作，从每个节点读取到的数据都是相同的。对于写操作，当数据写入某一节点后，集群会将其同步到其它节点。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/20200310165540560.png\" alt=\"MHA_lgx211\"></p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>多主多活下，可对任一节点进行读写操作，就算某个节点挂了，也不影响其它的节点的读写，都不需要做故障切换操作，也不会中断整个集群对外提供的服务。</li>\n<li>拓展性优秀，新增节点会自动拉取在线节点的数据（当有新节点加入时，集群会选择出一个Donor Node为新节点提供数据），最终集群所有节点数据一致，而不需要手动备份恢复。</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>能做到数据的强一致性，毫无疑问，也是以牺牲性能为代价。</li>\n</ul>\n<h1><span id=\"依托硬件配合\">依托硬件配合</span></h1><p>不同主机的数据同步不再依赖于MySQL的原生复制功能，而是通过同步磁盘数据，来保证数据的一致性。</p>\n<p>然后处理故障的方式是借助Heartbeat，它监控和管理各个节点间连接的网络，并监控集群服务，当节点出现故障或者服务不可用时，自动在其他节点启动集群服务。</p>\n<h2><span id=\"heartbeatsan\">heartbeat+SAN</span></h2><p>SAN：共享存储，主库从库用的一个存储。SAN的概念是允许存储设施和解决器（服务器）之间建立直接的高速连接，通过这种连接实现数据的集中式存储。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70-20210802235153449.png\" alt=\"heartbeat+SAN_lgx211\"></p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>保证数据的强一致性；</li>\n<li>与mysql解耦，不会由于mysql的逻辑错误发生数据不一致的情况；</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>SAN价格昂贵；</li>\n</ul>\n<h2><span id=\"heartbeatdrdb\">heartbeat+DRDB</span></h2><p>DRDB：这是linux内核板块实现的快级别的同步复制技术。通过各主机之间的网络，复制对方磁盘的内容。当客户将数据写入本地磁盘时，还会将数据发送到网络中另一台主机的磁盘上，这样的本地主机(主节点)与远程主机(备节点)的数据即可以保证明时同步。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70-20210802235223404.png\" alt=\"heartbeat+DRDB_lgx211\"></p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>相比于SAN储存网络，价格低廉；</li>\n<li>保证数据的强一致性；</li>\n<li>与mysql解耦，不会由于mysql的逻辑错误发生数据不一致的情况；</li>\n</ul>\n<p>其劣势为：</p>\n<ul>\n<li>对io性能影响较大；</li>\n<li>从库不提供读操作；</li>\n</ul>\n<h1><span id=\"其它\">其它</span></h1><h2><span id=\"zookeeper-proxy\">Zookeeper + proxy</span></h2><p>Zookeeper使用分布式算法保证集群数据的一致性，使用zookeeper可以有效的保证proxy的高可用性，可以较好的避免网络分区现象的产生。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70-20210802235309548.png\" alt=\"Zookeeper + proxy_lgx211\"></p>\n<p>就各个集群方案来说，其优势为：</p>\n<ul>\n<li>扩展性较好，可以扩展为大规模集群。</li>\n</ul>\n<p>缺其劣势为：</p>\n<ul>\n<li>搭建Zookeeper 集群，在配置一套代理，整个系统的逻辑变得更加复杂。</li>\n</ul>\n<h2><span id=\"paxos\">Paxos</span></h2><p>分布式一致性算法，Paxos 算法处理的问题是一个分布式系统如何就某个值（决议）达成一致。这个算法被认为是同类算法中最有效的。Paxos与MySQL相结合可以实现在分布式的MySQL数据的强一致性。</p>\n<p><img src=\"/2021/08/02/db-resource/mysql/mysql-ha/mysql%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc1MDIxMg==,size_16,color_FFFFFF,t_70-20210802235332067.png\" alt=\"Paxos_lgx211\"></p>\n","categories":["mysql"],"tags":["mysql"]},{"title":"mysql mgr集群方案","url":"/2021/08/03/db-resource/mysql/mysql-ha/Mysql-MGR/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E9%9B%86%E7%BE%A4%E8%A7%84%E5%88%92\">集群规划</a><ul>\n<li><a href=\"#%E8%8A%82%E7%82%B9%E8%A7%84%E5%88%92\">节点规划</a></li>\n<li><a href=\"#mysql-server%E7%89%88%E6%9C%AC\">Mysql Server版本</a></li>\n</ul>\n</li>\n<li><a href=\"#mysql%E9%83%A8%E7%BD%B2%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85\">Mysql部署（离线安装）</a><ul>\n<li><a href=\"#server%E5%AE%89%E8%A3%85\">Server安装</a></li>\n<li><a href=\"#%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC\">部署脚本</a></li>\n<li><a href=\"#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">默认配置文件</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6\">配置主从复制</a></li>\n<li><a href=\"#%E6%90%AD%E5%BB%BAgmr\">搭建GMR</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB\">常见问题汇总</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2><span id=\"集群规划\">集群规划</span></h2><h3><span id=\"节点规划\">节点规划</span></h3><p>本示例地址以下,部署时候按照实际情况进行修改</p>\n<span id=\"more\"></span>\n\n<table>\n<thead>\n<tr>\n<th>hostname</th>\n<th>IP</th>\n<th>节点规划</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zqt003</td>\n<td>100.4.17.4</td>\n<td>Master（主节点）</td>\n</tr>\n<tr>\n<td>zqt005</td>\n<td>100.4.17.5</td>\n<td>Slaver1（从节点1）</td>\n</tr>\n<tr>\n<td>zqt009</td>\n<td>100.4.17.9</td>\n<td>Slaver2（从节点2）</td>\n</tr>\n</tbody></table>\n<h3><span id=\"mysql-server版本\">Mysql Server版本</span></h3><p>本示例操作系统为：Centos7 x64</p>\n<p>Mysql Server版本：8.0.21 （mysql-8.0.21-el7-x86_64.tar.gz）</p>\n<h2><span id=\"mysql部署离线安装\">Mysql部署（离线安装）</span></h2><h3><span id=\"server安装\">Server安装</span></h3><p><strong>注意：所有节点都需要部署</strong></p>\n<ol>\n<li><p>将mysql8_install.sh（安装脚本）、my_test.cnf（默认安装配置）、mysql-8.0.21-el7-x86_64.tar.gz（安装文件名）放在同一目录下，本示例放在/opt/mysql_install下</p>\n</li>\n<li><p>修改脚本里的实际的ip地址、端口、hosts对应的主机名</p>\n</li>\n<li><p>使用如下命令进行安装</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash mysql8_install.sh</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>按照提示输入</li>\n</ol>\n<p>数据库服务名：例如 dataReport</p>\n<p>数据库服务端口：默认3306，根据需要进行输入</p>\n<p>MySQL serverId: 必须为纯数字，本示例采用ip地址后3位当成serverId，例如 100.4.17.4，那么本节点上serverId就取4174</p>\n<p>innodb_buffer_pool_size大小：示例输入 2，2G大小，默认大小为128M</p>\n<blockquote>\n<p>注：安装完成后my.cnf配置文件默认在/etc/目录下，文件名是以你的数据库名命名，例my_test.cnf，mysql.sock在/tmp目录下</p>\n</blockquote>\n<ol start=\"5\">\n<li><p>更新root用户权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#连接数据库,root密码默认<span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"operator\">/</span>usr<span class=\"operator\">/</span><span class=\"keyword\">local</span><span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>bin<span class=\"operator\">/</span>mysql <span class=\"operator\">-</span>uroot <span class=\"operator\">-</span>p <span class=\"operator\">-</span>S <span class=\"operator\">/</span>tmp<span class=\"operator\">/</span>mysql_master.sock</span><br><span class=\"line\">#切换database到mysql</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span>use mysql;</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span>update <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> host<span class=\"operator\">=</span><span class=\"string\">&#x27;%&#x27;</span> <span class=\"keyword\">where</span> <span class=\"keyword\">user</span><span class=\"operator\">=</span><span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;  #此步骤如果提示错误，再执行一遍</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span>FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用客户端工具进行连接测试</p>\n</li>\n</ol>\n<h3><span id=\"部署脚本\">部署脚本</span></h3><p>文件名: mysql8_install.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#文件名: mysql8_install.sh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;正在安装MySQL软件.......&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">useradd mysql</span><br><span class=\"line\">useradd nagios</span><br><span class=\"line\">useradd zabbix</span><br><span class=\"line\"></span><br><span class=\"line\">sleep 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######--配置参数--######</span></span><br><span class=\"line\">mysql8_version=mysql-8.0.21-el7-x86_64.tar.gz</span><br><span class=\"line\">mysql8_version_dir=mysql-8.0.21-el7-x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######--数据库同步复制用户--######</span></span><br><span class=\"line\">repl_user=repl</span><br><span class=\"line\">repl_passwd=sysrepl</span><br><span class=\"line\"><span class=\"comment\">#######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######--数据库root密码--######</span></span><br><span class=\"line\">root_passwd=123456</span><br><span class=\"line\"><span class=\"comment\">#######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######--数据库DBA管理用户--######</span></span><br><span class=\"line\">dba_user=admin</span><br><span class=\"line\">dba_passwd=123456</span><br><span class=\"line\"><span class=\"comment\">#######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######--数据库8.0克隆用户--######</span></span><br><span class=\"line\">clone_user=clone_user</span><br><span class=\"line\">clone_passwd=123456</span><br><span class=\"line\"><span class=\"comment\">#######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######--修改hosts文件--######</span></span><br><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt;&gt; /etc/hosts</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">100.4.17.4\t\tzqt003</span></span><br><span class=\"line\"><span class=\"string\">100.4.17.5\t\tzqt005</span></span><br><span class=\"line\"><span class=\"string\">100.4.17.9\t\tzqt009</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\">#######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######--Mysql MGR配置--######</span></span><br><span class=\"line\">mysql_port=3306</span><br><span class=\"line\">primary_ip=100.4.17.4</span><br><span class=\"line\">secondary1_ip=100.4.17.5</span><br><span class=\"line\">secondary2_ip=100.4.17.9</span><br><span class=\"line\"></span><br><span class=\"line\">primary_port=33061</span><br><span class=\"line\">secondary1_port=33061</span><br><span class=\"line\">secondary2_port=33061</span><br><span class=\"line\"></span><br><span class=\"line\">local_ip=100.4.17.4</span><br><span class=\"line\">local_port=33061</span><br><span class=\"line\"><span class=\"comment\">#############################</span></span><br><span class=\"line\"><span class=\"comment\">######MySQL主从复制同步#######</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&quot;repl&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">&quot;输入你的主库IP:  &quot;</span> master_ip</span><br><span class=\"line\">\t<span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">&quot;输入你的主库端口号:  &quot;</span> master_port</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[ -z <span class=\"variable\">$master_ip</span> || -z <span class=\"variable\">$master_port</span> ]]</span><br><span class=\"line\">\t<span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">continue</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;主库IP是： <span class=\"variable\">$master_ip</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;主库端口号是： <span class=\"variable\">$master_port</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">break</span> </span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -h127.0.0.1 -u<span class=\"string\">&quot;<span class=\"variable\">$dba_user</span>&quot;</span> -p<span class=\"string\">&quot;<span class=\"variable\">$dba_passwd</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$master_port</span>&quot;</span> --connect-expired-password -e <span class=\"string\">&quot;CHANGE MASTER TO MASTER_HOST=&#x27;<span class=\"variable\">$master_ip</span>&#x27;,MASTER_USER=&#x27;<span class=\"variable\">$repl_user</span>&#x27;,MASTER_PASSWORD=&#x27;<span class=\"variable\">$repl_passwd</span>&#x27;,MASTER_PORT=<span class=\"variable\">$master_port</span>,MASTER_AUTO_POSITION = 1,MASTER_CONNECT_RETRY=10; START SLAVE;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL主从复制同步已经初始化完毕。&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######MySQL MGR安装#######</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> = <span class=\"string\">&quot;mgr&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">&quot;是Primary吗？是请输入yes，否输入no:  &quot;</span> is_primary</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[ -z <span class=\"variable\">$is_primary</span> ]]</span><br><span class=\"line\">\t<span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">continue</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ <span class=\"variable\">$is_primary</span> == <span class=\"string\">&quot;yes&quot;</span> ] || [ <span class=\"variable\">$is_primary</span> == <span class=\"string\">&quot;no&quot;</span> ]</span><br><span class=\"line\">\t\t<span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">break</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t <span class=\"built_in\">echo</span> <span class=\"string\">&quot;你输入一个错误的字符<span class=\"variable\">$is_primary</span>，请重新输入...&quot;</span></span><br><span class=\"line\">\t\t\t <span class=\"built_in\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$is_primary</span> == <span class=\"string\">&quot;yes&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -h127.0.0.1 -u<span class=\"string\">&quot;<span class=\"variable\">$dba_user</span>&quot;</span> -p<span class=\"string\">&quot;<span class=\"variable\">$dba_passwd</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$mysql_port</span>&quot;</span> --connect-expired-password -e <span class=\"string\">&quot;INSTALL PLUGIN group_replication SONAME  &#x27;group_replication.so&#x27;; set persist group_replication_group_name = &#x27;3b12b5bd-f0c6-11e9-9778-000c2900afc6&#x27;;set persist group_replication_local_address =  &#x27;<span class=\"variable\">$&#123;local_ip&#125;</span>:<span class=\"variable\">$&#123;local_port&#125;</span>&#x27;; set persist group_replication_group_seeds = &#x27;<span class=\"variable\">$&#123;primary_ip&#125;</span>:<span class=\"variable\">$&#123;primary_port&#125;</span>,<span class=\"variable\">$&#123;secondary1_ip&#125;</span>:<span class=\"variable\">$&#123;secondary1_port&#125;</span>,<span class=\"variable\">$&#123;secondary2_ip&#125;</span>:<span class=\"variable\">$&#123;secondary2_port&#125;</span>&#x27;;SET GLOBAL group_replication_bootstrap_group=ON; CHANGE MASTER TO MASTER_USER=&#x27;<span class=\"variable\">$repl_user</span>&#x27;,MASTER_PASSWORD=&#x27;<span class=\"variable\">$repl_passwd</span>&#x27; FOR CHANNEL &#x27;group_replication_recovery&#x27;;START GROUP_REPLICATION;select sleep(5);select * from performance_schema.replication_group_members;SET GLOBAL group_replication_bootstrap_group=OFF;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -h127.0.0.1 -u<span class=\"string\">&quot;<span class=\"variable\">$dba_user</span>&quot;</span> -p<span class=\"string\">&quot;<span class=\"variable\">$dba_passwd</span>&quot;</span> -P<span class=\"string\">&quot;<span class=\"variable\">$mysql_port</span>&quot;</span> --connect-expired-password -e <span class=\"string\">&quot;INSTALL PLUGIN group_replication SONAME  &#x27;group_replication.so&#x27;; set persist group_replication_group_name = &#x27;3b12b5bd-f0c6-11e9-9778-000c2900afc6&#x27;;set persist group_replication_local_address =  &#x27;<span class=\"variable\">$&#123;local_ip&#125;</span>:<span class=\"variable\">$&#123;local_port&#125;</span>&#x27;; set persist group_replication_group_seeds = &#x27;<span class=\"variable\">$&#123;primary_ip&#125;</span>:<span class=\"variable\">$&#123;primary_port&#125;</span>,<span class=\"variable\">$&#123;secondary1_ip&#125;</span>:<span class=\"variable\">$&#123;secondary1_port&#125;</span>,<span class=\"variable\">$&#123;secondary2_ip&#125;</span>:<span class=\"variable\">$&#123;secondary2_port&#125;</span>&#x27;; SET GLOBAL group_replication_bootstrap_group=OFF; CHANGE MASTER TO MASTER_USER=&#x27;<span class=\"variable\">$repl_user</span>&#x27;,MASTER_PASSWORD=&#x27;<span class=\"variable\">$repl_passwd</span>&#x27; FOR CHANNEL &#x27;group_replication_recovery&#x27;;START GROUP_REPLICATION;select sleep(5);select * from performance_schema.replication_group_members;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL Mgr组复制已经初始化完毕。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps aux | grep <span class=\"string\">&#x27;mysql&#x27;</span> | grep -v <span class=\"string\">&#x27;grep&#x27;</span> | grep -v <span class=\"string\">&#x27;bash&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL进程已经启动，无需二次安装。&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d /usr/<span class=\"built_in\">local</span>/<span class=\"variable\">$&#123;mysql8_version_dir&#125;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">#yum install xz -y</span></span><br><span class=\"line\">\ttar -zxvf <span class=\"variable\">$&#123;mysql8_version&#125;</span> -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">\tln -s /usr/<span class=\"built_in\">local</span>/<span class=\"variable\">$&#123;mysql8_version_dir&#125;</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">\tchown -R mysql.mysql /usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\">\tchown -R mysql.mysql /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tln -s /usr/<span class=\"built_in\">local</span>/<span class=\"variable\">$&#123;mysql8_version_dir&#125;</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">\tchown -R mysql.mysql /usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\">\tchown -R mysql.mysql /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\"><span class=\"keyword\">fi</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">&quot;输入你的数据库服务名:  &quot;</span> dbname</span><br><span class=\"line\">\t<span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">&quot;输入你的数据库端口号:  &quot;</span> dbport</span><br><span class=\"line\">\t<span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">&quot;输入MySQL serverId:  &quot;</span> serverId</span><br><span class=\"line\">\t<span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">&quot;输入innodb_buffer_pool_size大小，单位G:  &quot;</span> innodb_bp_size</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[ -z <span class=\"variable\">$dbname</span> || -z <span class=\"variable\">$dbport</span> || -z <span class=\"variable\">$serverId</span> || -z <span class=\"variable\">$innodb_bp_size</span> ]]</span><br><span class=\"line\">\t<span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">continue</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;数据库服务名字是： <span class=\"variable\">$dbname</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;数据库端口是： <span class=\"variable\">$dbport</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL serverId： <span class=\"variable\">$serverId</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;BP大小是： <span class=\"variable\">$innodb_bp_size</span> GB&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">break</span> </span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">sed <span class=\"string\">&quot;s/test/<span class=\"variable\">$dbname</span>/g;s/3306/<span class=\"variable\">$dbport</span>/;s/413306/<span class=\"variable\">$serverId</span>/;/innodb_buffer_pool_size/s/1/<span class=\"variable\">$innodb_bp_size</span>/&quot;</span> my_test.cnf &gt; /etc/my_<span class=\"variable\">$dbname</span>.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">DATA_DIR=/data/mysql/<span class=\"variable\">$dbname</span></span><br><span class=\"line\">[ ! -d <span class=\"variable\">$DATA_DIR</span> ] &amp;&amp; mkdir -p <span class=\"variable\">$DATA_DIR</span>/&#123;data,binlog,relaylog,tmp,slowlog,<span class=\"built_in\">log</span>&#125;; touch <span class=\"variable\">$DATA_DIR</span>/<span class=\"built_in\">log</span>/error.log; chown -R mysql.mysql /data/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ `ls -A <span class=\"variable\">$DATA_DIR</span>/data/ | wc -w` -eq 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;初始化MySQL数据目录......&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\tbin/mysqld --defaults-file=/etc/my_<span class=\"variable\">$dbname</span>.cnf --initialize --lower-case-table-names=1 --user=mysql --basedir=/usr/<span class=\"built_in\">local</span>/mysql --datadir=/data/mysql/<span class=\"variable\">$dbname</span>/data</span><br><span class=\"line\">\tsleep 2</span><br><span class=\"line\">\tbin/mysqld_safe --defaults-file=/etc/my_<span class=\"variable\">$dbname</span>.cnf --user=mysql &amp;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t netstat -ntlp | grep <span class=\"variable\">$dbport</span></span><br><span class=\"line\">\t <span class=\"keyword\">if</span> [ $? -eq 1 ]</span><br><span class=\"line\">\t <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL启动中，稍等......&quot;</span></span><br><span class=\"line\">\t\tsleep 5</span><br><span class=\"line\">\t\t<span class=\"built_in\">continue</span></span><br><span class=\"line\">\t <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">break</span></span><br><span class=\"line\">\t <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps aux | grep <span class=\"string\">&#x27;mysql&#x27;</span> | grep -v <span class=\"string\">&#x27;grep&#x27;</span> | grep -v <span class=\"string\">&#x27;bash&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL安装完毕。&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL安装失败。&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###更改root账号随机密码</span></span><br><span class=\"line\">random_passwd=`grep <span class=\"string\">&#x27;temporary password&#x27;</span> <span class=\"variable\">$DATA_DIR</span>/<span class=\"built_in\">log</span>/error.log | awk -F <span class=\"string\">&#x27;root@localhost: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -S /tmp/mysql_<span class=\"variable\">$dbname</span>.sock -p<span class=\"string\">&quot;<span class=\"variable\">$random_passwd</span>&quot;</span> --connect-expired-password -e <span class=\"string\">&quot;set sql_log_bin=0;alter user root@&#x27;localhost&#x27; identified by &#x27;<span class=\"variable\">$root_passwd</span>&#x27;;&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;root账号随机密码更改完毕。&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###创建同步账号和管理员账号</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -S /tmp/mysql_<span class=\"variable\">$dbname</span>.sock --connect-expired-password -p<span class=\"string\">&quot;<span class=\"variable\">$root_passwd</span>&quot;</span> -e <span class=\"string\">&quot;set sql_log_bin=0;create user &#x27;<span class=\"variable\">$repl_user</span>&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;<span class=\"variable\">$repl_passwd</span>&#x27;; GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO &#x27;<span class=\"variable\">$repl_user</span>&#x27;@&#x27;%&#x27;; create user &#x27;<span class=\"variable\">$dba_user</span>&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;<span class=\"variable\">$dba_passwd</span>&#x27;; GRANT ALL on *.* to &#x27;<span class=\"variable\">$dba_user</span>&#x27;@&#x27;%&#x27; WITH GRANT OPTION;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sed -i -r <span class=\"string\">&quot;s/(PATH=)/\\1\\/usr\\/local\\/mysql\\/bin:/&quot;</span> /root/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> /root/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;MySQL账号初始化完毕。&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###安装clone插件</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -S /tmp/mysql_<span class=\"variable\">$dbname</span>.sock --connect-expired-password -p<span class=\"string\">&quot;<span class=\"variable\">$root_passwd</span>&quot;</span> -e <span class=\"string\">&quot;set sql_log_bin=0;INSTALL PLUGIN CLONE SONAME &#x27;mysql_clone.so&#x27;; CREATE USER &#x27;<span class=\"variable\">$clone_user</span>&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;<span class=\"variable\">$clone_passwd</span>&#x27;;GRANT BACKUP_ADMIN,CLONE_ADMIN ON *.* TO &#x27;<span class=\"variable\">$clone_user</span>&#x27;@&#x27;%&#x27;;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;clone克隆插件安装完毕。&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"默认配置文件\">默认配置文件</span></h3><p>可根据具体需要进行更改</p>\n<p>文件名: my_test.cnf</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"attr\">port</span>\t\t=  <span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"attr\">socket</span>   =  <span class=\"string\">/tmp/mysql_test.sock</span></span><br><span class=\"line\"><span class=\"comment\">#default-character-set = utf8 </span></span><br><span class=\"line\"><span class=\"attr\">prompt</span>=<span class=\"string\">(\\\\u@\\\\h) [\\\\d]&gt;\\\\_</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># The MySQL server</span></span><br><span class=\"line\"><span class=\"comment\">#########Basic##################</span></span><br><span class=\"line\"><span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">##bind_address = 127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">server-id</span>\t=  <span class=\"string\">413306</span></span><br><span class=\"line\"><span class=\"attr\">port</span>\t        =  <span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"attr\">user</span>            =  <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>\t\t=  <span class=\"string\">/usr/local/mysql</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>\t\t=  <span class=\"string\">/data/mysql/test/data</span></span><br><span class=\"line\"><span class=\"attr\">tmpdir</span>\t\t=  <span class=\"string\">/data/mysql/test/tmp</span></span><br><span class=\"line\"><span class=\"attr\">socket</span>\t\t=  <span class=\"string\">/tmp/mysql_test.sock</span></span><br><span class=\"line\"><span class=\"attr\">skip-external-locking</span></span><br><span class=\"line\"><span class=\"attr\">skip-name-resolve</span></span><br><span class=\"line\"><span class=\"comment\">##init_connect = &#x27;SET global sql_mode = &quot;&quot;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">sql_mode</span> = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span> = <span class=\"string\">mysql_native_password</span></span><br><span class=\"line\"><span class=\"attr\">activate_all_roles_on_login</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### Percona ###</span></span><br><span class=\"line\"><span class=\"comment\">#extra_port = 13306</span></span><br><span class=\"line\"><span class=\"comment\">#extra_max_connections = 100</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">###skip-networking</span></span><br><span class=\"line\"><span class=\"meta\">default-storage-engine</span> = <span class=\"string\">INNODB</span></span><br><span class=\"line\"><span class=\"meta\">character-set-server</span> = <span class=\"string\">utf8</span></span><br><span class=\"line\"><span class=\"attr\">wait_timeout</span>  =  <span class=\"string\">3600</span></span><br><span class=\"line\"><span class=\"attr\">connect_timeout</span>  =  <span class=\"string\">20</span></span><br><span class=\"line\"><span class=\"attr\">interactive_timeout</span>  =  <span class=\"string\">3600</span></span><br><span class=\"line\"><span class=\"attr\">back_log</span>  =  <span class=\"string\">500</span></span><br><span class=\"line\"><span class=\"comment\">#event_scheduler  =  ON</span></span><br><span class=\"line\"><span class=\"attr\">open_files_limit</span> = <span class=\"string\">65535</span></span><br><span class=\"line\"><span class=\"comment\">#thread_handling  =  pool-of-threads</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">lower_case_table_names</span>  =  <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">###### binlog ######</span></span><br><span class=\"line\"><span class=\"meta\">log-bin</span>  =  <span class=\"string\">/data/mysql/test/binlog/mysql-bin</span></span><br><span class=\"line\"><span class=\"attr\">binlog_format</span> = <span class=\"string\">ROW</span></span><br><span class=\"line\"><span class=\"attr\">binlog_checksum</span> = <span class=\"string\">NONE</span></span><br><span class=\"line\"><span class=\"attr\">binlog_transaction_dependency_tracking</span> = <span class=\"string\">WRITESET</span></span><br><span class=\"line\"><span class=\"attr\">sync_binlog</span>      =   <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gtid_mode</span> = <span class=\"string\">on</span></span><br><span class=\"line\"><span class=\"attr\">enforce_gtid_consistency</span> = <span class=\"string\">on</span></span><br><span class=\"line\"><span class=\"attr\">log_slave_updates</span>   =  <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">master_info_repository</span> = <span class=\"string\">TABLE</span></span><br><span class=\"line\"><span class=\"attr\">relay_log_info_repository</span> = <span class=\"string\">TABLE</span></span><br><span class=\"line\"><span class=\"attr\">max_binlog_size</span>  =  <span class=\"string\">128M</span></span><br><span class=\"line\"><span class=\"attr\">binlog_cache_size</span>  =  <span class=\"string\">1M</span></span><br><span class=\"line\"><span class=\"meta\">expire-logs-days</span>  =  <span class=\"string\">7</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#########replication#############</span></span><br><span class=\"line\"><span class=\"meta\">relay-log</span>               =  <span class=\"string\">/data/mysql/test/relaylog/relay-log</span></span><br><span class=\"line\"><span class=\"meta\">slave-net-timeout</span>                   =  <span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"comment\">#rpl_semi_sync_master_enabled        =  1</span></span><br><span class=\"line\"><span class=\"comment\">#rpl_semi_sync_master_wait_no_slave   =  1</span></span><br><span class=\"line\"><span class=\"comment\">#rpl_semi_sync_master_timeout        =  1000</span></span><br><span class=\"line\"><span class=\"comment\">#rpl_semi_sync_slave_enabled         =  1</span></span><br><span class=\"line\"><span class=\"comment\">#skip-slave-start</span></span><br><span class=\"line\"><span class=\"attr\">log_slave_updates</span>                  =  <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">relay_log_recovery</span>                 =  <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\">#slave_skip_errors = 1062</span></span><br><span class=\"line\"><span class=\"attr\">read_only</span>                          =  <span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">###### Mgr config ######</span></span><br><span class=\"line\"><span class=\"meta\">loose-transaction_write_set_extraction</span> = <span class=\"string\">XXHASH64</span></span><br><span class=\"line\"><span class=\"meta\">loose-group_replication_start_on_boot</span> = <span class=\"string\">ON ###是否随mysql启动Group Replication</span></span><br><span class=\"line\"><span class=\"meta\">loose-group_replication_bootstrap_group</span> = <span class=\"string\">OFF  ###是否是Group Replication的引导节点，初次搭建集群的时候需要有一个节点设置为ON来启动Group Replication</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t       ###参数设置为ON，是为了标示以后加入集群的服务器都已这台服务器为基准。以后加入的就不需要进行设置</span></span><br><span class=\"line\">\t\t\t\t\t    </span><br><span class=\"line\"><span class=\"meta\">loose-group_replication_group_name</span> = <span class=\"string\">850ce522-a85e-11e9-8ea3-48df3749e199\t\t\t\t  </span></span><br><span class=\"line\"><span class=\"comment\">#loose-group_replication_local_address = 192.168.148.41:33061\t\t\t\t\t       </span></span><br><span class=\"line\"><span class=\"comment\">#loose-group_replication_group_seeds = 192.168.148.41:33061,192.168.148.42:33072,192.168.148.39:33083\t\t\t\t\t       </span></span><br><span class=\"line\"><span class=\"meta\">loose-group_replication_single_primary_mode</span> = <span class=\"string\">ON\t</span></span><br><span class=\"line\"><span class=\"meta\">loose-group_replication_exit_state_action</span> = <span class=\"string\">OFFLINE_MODE</span></span><br><span class=\"line\"><span class=\"meta\">loose-group_replication_transaction_size_limit</span> = <span class=\"string\">150000000 ###默认143M事务大小，最大值2147483647（大约2G），当此系统变量设置为0时，该组接受的事务大小没有限制。</span></span><br><span class=\"line\"><span class=\"meta\">loose-group_replication_enforce_update_everywhere_checks</span> = <span class=\"string\">OFF ###在单主模式下设置为OFF，多主模式下设置为ON。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"attr\">offline_mode</span> = <span class=\"string\">ON</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">###MHA ############</span></span><br><span class=\"line\"><span class=\"attr\">relay_log_purge</span>            =  <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\">###################</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">###parallel replication####</span></span><br><span class=\"line\"><span class=\"attr\">slave_parallel_type</span> = <span class=\"string\">LOGICAL_CLOCK</span></span><br><span class=\"line\"><span class=\"attr\">slave_parallel_workers</span> = <span class=\"string\">24</span></span><br><span class=\"line\"><span class=\"attr\">slave_preserve_commit_order</span> = <span class=\"string\">ON</span></span><br><span class=\"line\"><span class=\"comment\">##################################</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#########slow log#############</span></span><br><span class=\"line\"><span class=\"attr\">slow_query_log</span>  =  <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">slow_query_log_file</span>  =  <span class=\"string\">/data/mysql/test/log/mysql-slow.log</span></span><br><span class=\"line\"><span class=\"comment\">#log-slow-verbosity = query_plan,explain</span></span><br><span class=\"line\"><span class=\"attr\">long_query_time</span>  =  <span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#########error log#############</span></span><br><span class=\"line\"><span class=\"meta\">log-error</span>   =  <span class=\"string\">/data/mysql/test/log/error.log</span></span><br><span class=\"line\"><span class=\"attr\">log_timestamps</span> = <span class=\"string\">system</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\">#######per_thread_buffers############</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"string\">4100</span></span><br><span class=\"line\"><span class=\"attr\">max_user_connections</span>=<span class=\"string\">4000</span></span><br><span class=\"line\"><span class=\"attr\">max_connect_errors</span>=<span class=\"string\">100000000</span></span><br><span class=\"line\"><span class=\"attr\">max_allowed_packet</span> = <span class=\"string\">256M</span></span><br><span class=\"line\"><span class=\"attr\">table_open_cache</span> = <span class=\"string\">6144</span></span><br><span class=\"line\"><span class=\"attr\">table_definition_cache</span> = <span class=\"string\">4096</span></span><br><span class=\"line\"><span class=\"attr\">sort_buffer_size</span> = <span class=\"string\">128K</span></span><br><span class=\"line\"><span class=\"attr\">read_buffer_size</span> = <span class=\"string\">128K</span></span><br><span class=\"line\"><span class=\"attr\">read_rnd_buffer_size</span> = <span class=\"string\">128k</span></span><br><span class=\"line\"><span class=\"attr\">join_buffer_size</span> = <span class=\"string\">128K</span></span><br><span class=\"line\"><span class=\"attr\">tmp_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">max_heap_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">bulk_insert_buffer_size</span> = <span class=\"string\">32M</span></span><br><span class=\"line\"><span class=\"attr\">thread_cache_size</span> = <span class=\"string\">64</span></span><br><span class=\"line\"><span class=\"comment\">#thread_concurrency = 32</span></span><br><span class=\"line\"><span class=\"attr\">thread_stack</span> = <span class=\"string\">256K</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">##MyISAM## </span></span><br><span class=\"line\"><span class=\"attr\">key_buffer_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">myisam_sort_buffer_size</span> = <span class=\"string\">8M</span></span><br><span class=\"line\"><span class=\"attr\">concurrent_insert</span>=<span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"attr\">low_priority_updates</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">myisam_recover_options</span>=<span class=\"string\">BACKUP,FORCE</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">######### InnoDB #############</span></span><br><span class=\"line\"><span class=\"attr\">innodb_adaptive_hash_index</span> = <span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">innodb_autoinc_lock_mode</span> = <span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"attr\">innodb_numa_interleave</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">innodb_sort_buffer_size</span> = <span class=\"string\">32M</span></span><br><span class=\"line\"><span class=\"attr\">innodb_rollback_on_timeout</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">innodb_data_file_path</span> = <span class=\"string\">ibdata1:10M:autoextend</span></span><br><span class=\"line\"><span class=\"attr\">innodb_buffer_pool_dump_at_shutdown</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">innodb_buffer_pool_load_at_startup</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">innodb_buffer_pool_size</span> = <span class=\"string\">1G</span></span><br><span class=\"line\"><span class=\"attr\">innodb_buffer_pool_instances</span>\t= <span class=\"string\">16</span></span><br><span class=\"line\"><span class=\"attr\">innodb_lru_scan_depth</span> = <span class=\"string\">2048</span></span><br><span class=\"line\"><span class=\"attr\">innodb_log_file_size</span> = <span class=\"string\">512M</span></span><br><span class=\"line\"><span class=\"attr\">innodb_log_buffer_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">innodb_log_files_in_group</span> = <span class=\"string\">3</span></span><br><span class=\"line\"><span class=\"attr\">innodb_flush_log_at_trx_commit</span> = <span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"attr\">innodb_lock_wait_timeout</span> = <span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">innodb_sync_spin_loops</span> = <span class=\"string\">40</span></span><br><span class=\"line\"><span class=\"attr\">innodb_max_dirty_pages_pct</span> = <span class=\"string\">95</span></span><br><span class=\"line\"><span class=\"attr\">innodb_thread_concurrency</span> = <span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">innodb_thread_sleep_delay</span> = <span class=\"string\">500</span></span><br><span class=\"line\"><span class=\"attr\">innodb_concurrency_tickets</span> = <span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">log_bin_trust_function_creators</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">innodb_flush_method</span> = <span class=\"string\">O_DIRECT</span></span><br><span class=\"line\"><span class=\"comment\">#innodb_flush_method = O_DIRECT_NO_FSYNC</span></span><br><span class=\"line\"><span class=\"attr\">innodb_file_per_table</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">innodb_read_io_threads</span> = <span class=\"string\">16</span></span><br><span class=\"line\"><span class=\"attr\">innodb_write_io_threads</span> = <span class=\"string\">16</span></span><br><span class=\"line\"><span class=\"attr\">innodb_use_native_aio</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">innodb_io_capacity</span> = <span class=\"string\">800</span></span><br><span class=\"line\"><span class=\"attr\">innodb_purge_threads</span> = <span class=\"string\">16</span></span><br><span class=\"line\"><span class=\"attr\">innodb_purge_batch_size</span> = <span class=\"string\">32</span></span><br><span class=\"line\"><span class=\"attr\">innodb_old_blocks_time</span> = <span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">innodb_change_buffering</span> = <span class=\"string\">all</span></span><br><span class=\"line\"><span class=\"attr\">transaction_isolation</span> = <span class=\"string\">READ-COMMITTED</span></span><br><span class=\"line\"><span class=\"attr\">innodb_stats_on_metadata</span> = <span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">####### NEW ########</span></span><br><span class=\"line\"><span class=\"comment\">##innodb_kill_idle_transaction = 5</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">###### SSD #########</span></span><br><span class=\"line\"><span class=\"comment\">#innodb_flush_neighbors = 0</span></span><br><span class=\"line\"><span class=\"comment\">#innodb_log_block_size = 4096</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">[mysqldump]</span></span><br><span class=\"line\"><span class=\"attr\">quick</span></span><br><span class=\"line\"><span class=\"attr\">max_allowed_packet</span> = <span class=\"string\">128M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">[mysql]</span></span><br><span class=\"line\"><span class=\"attr\">no-auto-rehash</span></span><br><span class=\"line\"><span class=\"comment\">#prompt=(\\\\u@\\\\h) [\\\\d]&gt;\\\\_</span></span><br><span class=\"line\"><span class=\"attr\">prompt</span>=<span class=\"string\">(\\\\u@\\\\h) [\\\\d]&gt;\\\\_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">[myisamchk]</span></span><br><span class=\"line\"><span class=\"attr\">key_buffer_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">sort_buffer_size</span> = <span class=\"string\">256k</span></span><br><span class=\"line\"><span class=\"attr\">read_buffer</span> = <span class=\"string\">2M</span></span><br><span class=\"line\"><span class=\"attr\">write_buffer</span> = <span class=\"string\">2M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">[mysqlhotcopy]</span></span><br><span class=\"line\"><span class=\"attr\">interactive-timeout</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">[mysqld_safe]</span></span><br><span class=\"line\"><span class=\"meta\">open-files-limit</span> = <span class=\"string\">65535</span></span><br><span class=\"line\"><span class=\"comment\">#flush_caches = 1</span></span><br><span class=\"line\"><span class=\"comment\">#numa_interleave = 1</span></span><br><span class=\"line\"><span class=\"comment\">#malloc-lib = /usr/lib64/libjemalloc.so</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"配置主从复制\">配置主从复制</span></h3><p><strong>注意：只在从节点都需要部署</strong></p>\n<ol>\n<li><p>执行安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash mysql8_install.sh repl</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"搭建gmr\">搭建GMR</span></h3><p><strong>注意：先把3个节点MySQL实例启动后再开始搭建mgr，先在Primary节点上执行，再到Secondary节点上执行</strong></p>\n<ol>\n<li><p>执行安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash mysql8_install.sh mgr</span><br></pre></td></tr></table></figure></li>\n<li><p>查看安装错误日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#错误日志目录：/data/mysql/test/log/err.log</span></span><br><span class=\"line\">tailf -n 300 /data/mysql/<span class=\"built_in\">test</span>/<span class=\"built_in\">log</span>/err.log</span><br><span class=\"line\"><span class=\"comment\">#关注错误信息</span></span><br></pre></td></tr></table></figure></li>\n<li><p>因为上一步部署过主从，需要重启一下主从</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#连接数据库,root密码默认123456</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -uroot -p -S /tmp/mysql_master.sock</span><br><span class=\"line\"><span class=\"comment\">#切换database到mysql</span></span><br><span class=\"line\">mysql&gt;use mysql;</span><br><span class=\"line\">mysql&gt;stop slave;</span><br><span class=\"line\">mysql&gt;reset master;</span><br><span class=\"line\">mysql&gt;reset slave;</span><br></pre></td></tr></table></figure></li>\n<li><p>节点加入白名单</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#连接数据库,root密码默认123456</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql -uroot -p -S /tmp/mysql_master.sock</span><br><span class=\"line\"><span class=\"comment\">#切换database到mysql</span></span><br><span class=\"line\">mysql&gt;use mysql;</span><br><span class=\"line\">mysql&gt;STOP GROUP_REPLICATION;</span><br><span class=\"line\">mysql&gt;SET GLOBAL group_replication_ip_whitelist=<span class=\"string\">&quot;100.4.17.5,100.4.17.4,100.4.17.9&quot;</span>;</span><br><span class=\"line\">mysql&gt;start GROUP_REPLICATION;</span><br></pre></td></tr></table></figure></li>\n<li><p>查看集群状态</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> performance_schema.replication_group_members;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1><span id=\"常见问题汇总\">常见问题汇总</span></h1><p>查看错误日志查看错误日志</p>\n<p>/data/mysql/test/数据库服务名称/log/err.log</p>\n<p>数据库服务重启</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意：my_slaver01.cnf以当前节点服务配置文件为准</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin/mysqld_safe --defaults-file=/etc/my_slaver01.cnf --user=mysql &amp;</span><br></pre></td></tr></table></figure>\n\n<p>卸载MGR</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在mysql库中执行</span></span><br><span class=\"line\">mysql&gt;uninstall plugin group_replication;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["mysql"],"tags":["mysql"]},{"title":"mysql事务隔离级别","url":"/2021/09/02/db-resource/mysql/mysql-tx/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83\">环境</a></li>\n<li><a href=\"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A6%81%E7%B4%A0acid\">事务的基本要素（ACID）</a></li>\n<li><a href=\"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98\">事务的并发问题</a></li>\n<li><a href=\"#mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\">MySQL事务隔离级别</a></li>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B%E6%BC%94%E7%A4%BA\">示例演示</a><ul>\n<li><a href=\"#%E8%AF%BB%E6%9C%AA%E6%8F%90%E4%BA%A4\">读未提交</a></li>\n<li><a href=\"#%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4\">读已提交</a></li>\n<li><a href=\"#%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB\">可重复读</a></li>\n<li><a href=\"#%E4%B8%B2%E8%A1%8C%E5%8C%96\">串行化</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"环境\">环境</span></h1><p>mysql：5.7</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"事务的基本要素acid\">事务的基本要素（ACID）</span></h1><p>　　1、原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p>\n<p>　　 2、一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</p>\n<p>　　 3、隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p>\n<p>　　 4、持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p>\n<h1><span id=\"事务的并发问题\">事务的并发问题</span></h1><p>​        1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p>\n<p>　　2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</p>\n<p>　　3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p>\n<p>　　小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>\n<h1><span id=\"mysql事务隔离级别\">MySQL事务隔离级别</span></h1><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读未提交（read-uncommitted）</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>读已提交（read-committed）</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>可重复读（repeatable-read）</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>串行化（serializable）</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p>mysql默认的事务隔离级别为repeatable-read</p>\n<p>查看隔离级别</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\"><span class=\"comment\">-- 或</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%tx_isolations&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"示例演示\">示例演示</span></h1><p>打开两个客户端</p>\n<h2><span id=\"读未提交\">读未提交</span></h2><table>\n<thead>\n<tr>\n<th>执行顺序</th>\n<th>客户端A</th>\n<th align=\"left\">客户端B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>set session transaction isolation level read uncommitted;<br>start transaction;<br>select * from user;</td>\n<td align=\"left\">set session transaction isolation level read uncommitted;<br>start transaction;</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td align=\"left\">update user set name=’acd’;</td>\n</tr>\n<tr>\n<td>3</td>\n<td>select * from user;（读到B未提交的数据,脏读问题）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td>4</td>\n<td>commit</td>\n<td align=\"left\">rollback（一旦客户端B的事务因为某种原因回滚，所有的操作都将会被撤销，那客户端A查询到的数据其实就是脏数据）</td>\n</tr>\n<tr>\n<td>5</td>\n<td></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2><span id=\"读已提交\">读已提交</span></h2><table>\n<thead>\n<tr>\n<th>执行顺序</th>\n<th>客户端A</th>\n<th align=\"left\">客户端B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>set session transaction isolation level read committed;<br>start transaction;<br>select * from user;</td>\n<td align=\"left\">set session transaction isolation level read committed;<br>start transaction;</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td align=\"left\">update user set name=’acd’;</td>\n</tr>\n<tr>\n<td>3</td>\n<td>select * from user;（无法读到B未提交的数据,解决脏读问题）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td>4</td>\n<td></td>\n<td align=\"left\">commit</td>\n</tr>\n<tr>\n<td>5</td>\n<td>select * from user;(客户端A执行与上一步相同的查询，结果 与上一步不一致，即产生了不可重复读的问题)</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td>6</td>\n<td>commit</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2><span id=\"可重复读\">可重复读</span></h2><table>\n<thead>\n<tr>\n<th>执行顺序</th>\n<th>客户端A</th>\n<th align=\"left\">客户端B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>set session transaction isolation level repeatable read;<br>start transaction;<br>select * from user;</td>\n<td align=\"left\">set session transaction isolation level repeatable read;<br>start transaction;</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td align=\"left\">update user set name=’acd’;</td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td align=\"left\">commit</td>\n</tr>\n<tr>\n<td>4</td>\n<td>select * from user;（无法读到B已提交的数据,解决不可重复读问题）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td>5</td>\n<td>commit</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td>6</td>\n<td></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>可重复读的隔离级别下使用了MVCC机制，select操作不会更新版本号，是快照读（历史版本）；insert、update和delete会更新版本号，是当前读（当前版本）。</p>\n<h2><span id=\"串行化\">串行化</span></h2><p>打开一个客户端A，并设置当前事务模式为serializable，查询表account的初始值：</p>\n<p>打开一个客户端B，并设置当前事务模式为serializable，插入一条记录报错，表被锁了插入失败，mysql中事务隔离级别为serializable时会锁表，因此不会出现幻读的情况，这种隔离级别并发性极低，开发中很少会用到。</p>\n<p>解决脏读、不可重复读、幻读问题；</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>是否阻塞</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>读-读</td>\n<td>不会阻塞</td>\n</tr>\n<tr>\n<td>读-写</td>\n<td>阻塞</td>\n</tr>\n<tr>\n<td>写-写</td>\n<td>阻塞</td>\n</tr>\n</tbody></table>\n<p><strong>补充：</strong></p>\n<p>　　1、事务隔离级别为读提交时，写数据只会锁住相应的行</p>\n<p>　　2、事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的，这样可以防止幻读。</p>\n<p>　　3、事务隔离级别为串行化时，读写数据都会锁住整张表</p>\n<p>　　 4、隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</p>\n","categories":["mysql"],"tags":["mysql"]},{"title":"SpringBoot自定义配置文件路径","url":"/2021/06/18/java/spring/springboot/springboo-base/springboot-configfile-path/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E8%83%8C%E6%99%AF\">背景</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\">配置方式</a><ul>\n<li><a href=\"#%E5%9C%A8%E5%90%AF%E5%8A%A8%E7%B1%BB%E4%B8%AD%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%B7%AF%E5%BE%84\">在启动类中手动指定配置文件的加载路径</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"背景\">背景</span></h1><p>springboot 项目配置文件 application.properties/application.yml 默认放置的位置是 classpath:/、classpath:/config/、file:./、file:./config/ 这4个位置.只要编译后的文件位于这 4 个位置,springboot 就可以加载配置文件.但有时候需要以环境名称为标识,配置多个环境的配置文件.如下需要将配置文件放置在指定的环境标识下.</p>\n<span id=\"more\"></span>\n\n<img src=\"/2021/06/18/java/spring/springboot/springboo-base/springboot-configfile-path/image-20220518183533540.png\" alt=\"image-20220518183533540\" style=\"zoom:50%;\">\n\n<h1><span id=\"配置方式\">配置方式</span></h1><h2><span id=\"在启动类中手动指定配置文件的加载路径\">在启动类中手动指定配置文件的加载路径</span></h2><p>SpringBoot版本：2.6.4</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootDemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//SpringApplication.run(SpringbootDemoApplication.class, args);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这里暂时存在问题，配置多个自定义路径报错：</span></span><br><span class=\"line\">        String addClassPath = <span class=\"string\">&quot;spring.config.location:optional:classpath:/&quot;</span>;</span><br><span class=\"line\">        addClassPath += <span class=\"string\">&quot;,optional:classpath:/config/&quot;</span>;</span><br><span class=\"line\">        addClassPath += <span class=\"string\">&quot;,optional:classpath:/config/dev/&quot;</span>;</span><br><span class=\"line\">        addClassPath += <span class=\"string\">&quot;,optional:classpath:/config/test/&quot;</span>;</span><br><span class=\"line\">        addClassPath += <span class=\"string\">&quot;,optional:classpath:/config/prod/&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SpringApplicationBuilder(SpringbootDemoApplication.class).properties(</span><br><span class=\"line\">                        <span class=\"string\">&quot;spring.config.name:application&quot;</span>, addClassPath)</span><br><span class=\"line\">                .build().run(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种方式：（未验证）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.YamlPropertiesFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 入口类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(scanBasePackages = &quot;com&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SpringApplicationBuilder(WebApplication.class).properties(<span class=\"string\">&quot;spring.config.name:application-additional-location&quot;</span>, getAdditionalLocation()).build().run(args);</span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSpringApplication.run(WebApplication.class, args);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> \t\t* war 启动</span></span><br><span class=\"line\"><span class=\"comment\"> \t\t*/</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sources(WebApplication.class).properties(<span class=\"string\">&quot;spring.config.name:application-additional-location&quot;</span>, getAdditionalLocation());</span><br><span class=\"line\"><span class=\"comment\">//        return builder.sources(WebApplication.class);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getAdditionalLocation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//\t\t如果file: 与resource目录相同优先使用file:</span></span><br><span class=\"line\">        String addClassPath = <span class=\"string\">&quot;spring.config.additional-location:&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;file:./config/,file:./,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;classpath:/config/,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;classpath:/,&quot;</span>;</span><br><span class=\"line\">        ResourceLoader resourceLoader = <span class=\"keyword\">new</span> DefaultResourceLoader();</span><br><span class=\"line\">        Resource inputFile = resourceLoader.getResource(<span class=\"string\">&quot;classpath:bootstrap.yml&quot;</span>);</span><br><span class=\"line\">        YamlPropertiesFactoryBean yamlPropertiesFactoryBean = <span class=\"keyword\">new</span> YamlPropertiesFactoryBean();</span><br><span class=\"line\">        yamlPropertiesFactoryBean.setResources(inputFile);</span><br><span class=\"line\">        yamlPropertiesFactoryBean.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (yamlPropertiesFactoryBean.getObject().containsKey(<span class=\"string\">&quot;spring.config.additional-location&quot;</span>)) &#123;</span><br><span class=\"line\">            addClassPath = addClassPath.concat(yamlPropertiesFactoryBean.getObject().get(<span class=\"string\">&quot;spring.config.additional-location&quot;</span>).toString());</span><br><span class=\"line\">            System.out.println(addClassPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addClassPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["springboot"],"tags":["java","springboot"]},{"title":"SpringBoot 配置返回前端时间戳和接收时间戳自动转为LocalDateTime","url":"/2021/05/17/java/spring/springboot/springboo-base/springboot-date-config/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E8%83%8C%E6%99%AF\">背景</a></li>\n<li><a href=\"#springboot%E9%85%8D%E7%BD%AE%E6%8E%A5%E6%94%B6%E5%89%8D%E7%AB%AF%E6%97%B6%E9%97%B4%E6%88%B3%E8%87%AA%E5%8A%A8%E8%BD%AClocaldatetime\">SpringBoot配置接收前端时间戳自动转LocalDateTime</a></li>\n<li><a href=\"#%E9%99%84%E5%AE%8C%E6%95%B4%E7%9A%84jacksoncustomizerconfig%E9%85%8D%E7%BD%AE\">附：完整的JacksonCustomizerConfig配置</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"背景\">背景</span></h1><p>在项目开发当中，前后端使用什么样的时间格式，是一个值得关注的问题。如果都各自使用自己的格式，那么很不好统一。</p>\n<span id=\"more\"></span>\n\n<p>确定时间格式<br>1.确定后端返回前端时间格式<br>前端一般来说对于时间的处理是富有变化的。有的地方可能使用 “2020-11-29 11:15:25” 这样的格式，也可能使用 “2020/11/29 11:15” 的格式，或者只需要显示到分，不需要显示到秒。如果是这样的话，后端返回给前端字符串类型的时间格式是不友好的，前端不好做到兼容性。</p>\n<p>对于时间的兼容性，后端可以给前端返回时间戳，时间戳可以做到任意转化前端想要的格式（前端可以提供对应的JS工具类）。</p>\n<p>2.确定后端接收前端的时间格式<br>后端可以接受前端传类似于 “2020-11-29 11:15:25” 这样格式的时间，但还是上述说的问题，不好统一，所以不妨后端也接受前端传时间戳的时间格式。</p>\n<p>3.关于时间戳的选择<br>时间戳无非常使用的就两种，10位秒级的时间戳和13位的毫秒级的时间戳。<br>10位秒级的时间戳往往要经过乘1000或除1000操作，而且未来我们可能会遇到需要毫秒级的精度需求，所以我们不妨确定前后端统一使用13位毫秒级时间戳进行交互。</p>\n<p>4.关于后端Java使用日期数据类型的确定<br>数据库我们常用的时间格式是DateTime，我们暂时也以此为例。<br>可以使用java.util.Date，也可以使用java.sql.TimeStamp，但是学过java8新特性的应该都知道，Java8新特性的时间戳有很多的优点（相对于老的那套时间，尤其是好用程度和高并发问题）。<br>所以后端我们确定使用LocalDateTime来映射数据库的DateTime的数据类型（使用Java8的时间格式来映射数据库的时间日期数据类型）。</p>\n<p>SpringBoot配置LocalDateTime自动返回前端时间戳<br>如果是java.util.Date，配置统一返回时间戳就比较容易了。<br>直接在yml配置即可。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jackson:</span></span><br><span class=\"line\">    <span class=\"attr\">time-zone:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">serialization:</span></span><br><span class=\"line\">      <span class=\"comment\"># Date返回前端转时间戳 但不能解决LocalDateTime转时间戳（JacksonCustomizerConfig类解决）</span></span><br><span class=\"line\">      <span class=\"attr\">write-dates-as-timestamps:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>但是此配置对LocalDateTime不生效。</p>\n<p>我们可以使用重写SpringBoot默认内置的Jackson的序列化来解决这个问题。</p>\n<p>里面使用的工具类LocalDateTimeUtil来自于HuTool，可参考：<a href=\"https://hutool.cn/docs/#/\">https://hutool.cn/docs/#/</a></p>\n<p>可直接通过maven引入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jackson全局配置java8 LocalDateTime的序列化 全局配置时间返回格式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JacksonCustomizerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:适配自定义序列化和反序列化策略，返回前端指定数据类型的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"title\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder -&gt; &#123;</span><br><span class=\"line\">            builder.serializerByType(LocalDateTime.class, <span class=\"keyword\">new</span> LocalDateTimeSerializer());</span><br><span class=\"line\">            builder.deserializerByType(LocalDateTime.class, <span class=\"keyword\">new</span> LocalDateTimeDeserializer());</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:序列化</span></span><br><span class=\"line\"><span class=\"comment\">     * LocalDateTime序列化为毫秒级时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalDateTimeSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonSerializer</span>&lt;<span class=\"title\">LocalDateTime</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(LocalDateTime value, JsonGenerator gen, SerializerProvider serializers)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> timestamp = LocalDateTimeUtil.toEpochMilli(value);</span><br><span class=\"line\">                gen.writeNumber(timestamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:反序列化</span></span><br><span class=\"line\"><span class=\"comment\">     * 毫秒级时间戳序列化为LocalDateTime</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalDateTimeDeserializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonDeserializer</span>&lt;<span class=\"title\">LocalDateTime</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> LocalDateTime <span class=\"title\">deserialize</span><span class=\"params\">(JsonParser p, DeserializationContext deserializationContext)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> timestamp = p.getValueAsLong();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timestamp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> LocalDateTimeUtil.of(timestamp, ZoneOffset.of(<span class=\"string\">&quot;+8&quot;</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"springboot配置接收前端时间戳自动转localdatetime\">SpringBoot配置接收前端时间戳自动转LocalDateTime</span></h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jackson全局配置java8 LocalDateTime的序列化 全局配置时间返回格式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JacksonCustomizerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:LocalDateTime转换器，用于转换RequestParam和PathVariable参数</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收毫秒级时间戳字符串——&gt;LocalDateTime</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Converter&lt;String, LocalDateTime&gt; <span class=\"title\">localDateTimeConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Converter&lt;String, LocalDateTime&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> LocalDateTime <span class=\"title\">convert</span><span class=\"params\">(String source)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//毫秒级时间戳转LocalDateTime</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> LocalDateTimeUtil.of(Long.parseLong(source), ZoneOffset.of(<span class=\"string\">&quot;+8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:java.util.Date转换器</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收毫秒级时间戳字符串——&gt;Date</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Converter&lt;String, Date&gt; <span class=\"title\">dateConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Converter&lt;String, Date&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">convert</span><span class=\"params\">(String source)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> longTimeStamp = <span class=\"keyword\">new</span> Long(source);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date(longTimeStamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用时注意事项：</p>\n<p>如果在接口（Controller）中方法的参数类型是LocalDateTime需要加@RequestParam注解，否则会有问题。<br>至于原因，通过dubug研究因为对其进行了数据类型判断，认为LocalDateTime不是简单的数据类型（如果有兴趣可以研究一下）。<br>如果接口的参数类型是JavaBean，里边有属性时LocalDateTime，那么不用做额外处理。<br>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;测试后端直接接受时间戳&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/timestamp&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@AnonymousAccess</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity&lt;Object&gt; <span class=\"title\">testLocalDateTime</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> LocalDateTime h)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(h);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(h, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;测试后端接收JavaBean的时间戳&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/timestamp2&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@AnonymousAccess</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity&lt;Object&gt; <span class=\"title\">testLocalDateTime2</span><span class=\"params\">(QueryLocalDateTime queryLocalDateTime)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    System.out.println(queryLocalDateTime);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(queryLocalDateTime, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * description: LocalDateTime测试实体</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryLocalDateTime</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime endTime;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>PS：以上只做了对Java8时间中的LocalDateTime的适配，如果想要适配LocalDate或者适配LocalTime，可自行配置，原理都相同。</em></p>\n<h1><span id=\"附完整的jacksoncustomizerconfig配置\">附：完整的JacksonCustomizerConfig配置</span></h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jackson全局配置java8 LocalDateTime的序列化 全局配置时间返回格式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JacksonCustomizerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:适配自定义序列化和反序列化策略</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"title\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder -&gt; &#123;</span><br><span class=\"line\">            builder.serializerByType(LocalDateTime.class, <span class=\"keyword\">new</span> LocalDateTimeSerializer());</span><br><span class=\"line\">            builder.deserializerByType(LocalDateTime.class, <span class=\"keyword\">new</span> LocalDateTimeDeserializer());</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:序列化</span></span><br><span class=\"line\"><span class=\"comment\">     * LocalDateTime序列化为毫秒级时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalDateTimeSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonSerializer</span>&lt;<span class=\"title\">LocalDateTime</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(LocalDateTime value, JsonGenerator gen, SerializerProvider serializers)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> timestamp = LocalDateTimeUtil.toEpochMilli(value);</span><br><span class=\"line\">                gen.writeNumber(timestamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:反序列化</span></span><br><span class=\"line\"><span class=\"comment\">     * 毫秒级时间戳序列化为LocalDateTime</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalDateTimeDeserializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonDeserializer</span>&lt;<span class=\"title\">LocalDateTime</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> LocalDateTime <span class=\"title\">deserialize</span><span class=\"params\">(JsonParser p, DeserializationContext deserializationContext)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> timestamp = p.getValueAsLong();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timestamp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> LocalDateTimeUtil.of(timestamp, ZoneOffset.of(<span class=\"string\">&quot;+8&quot;</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:LocalDateTime转换器，用于转换RequestParam和PathVariable参数</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收毫秒级时间戳字符串——&gt;LocalDateTime</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Converter&lt;String, LocalDateTime&gt; <span class=\"title\">localDateTimeConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Converter&lt;String, LocalDateTime&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> LocalDateTime <span class=\"title\">convert</span><span class=\"params\">(String source)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//毫秒级时间戳转LocalDateTime</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> LocalDateTimeUtil.of(Long.parseLong(source), ZoneOffset.of(<span class=\"string\">&quot;+8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description:java.util.Date转换器</span></span><br><span class=\"line\"><span class=\"comment\">     * 接收毫秒级时间戳字符串——&gt;Date</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Converter&lt;String, Date&gt; <span class=\"title\">dateConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Converter&lt;String, Date&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">convert</span><span class=\"params\">(String source)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> longTimeStamp = <span class=\"keyword\">new</span> Long(source);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date(longTimeStamp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["springboot"],"tags":["java","springboot"]},{"title":"SpringBoot Profile多环境配置","url":"/2021/06/17/java/spring/springboot/springboo-base/springboot-profile/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E8%83%8C%E6%99%AF\">背景</a></li>\n<li><a href=\"#%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F\">多环境配置文件格式</a><ul>\n<li><a href=\"#%E6%96%B9%E5%BC%8F%E4%B8%80\">方式一</a></li>\n<li><a href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C\">方式二</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%BF%80%E6%B4%BB%E6%96%B9%E5%BC%8F\">激活方式</a><ul>\n<li><a href=\"#%E6%96%B9%E5%BC%8F%E4%B8%80-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%BF%80%E6%B4%BB\">方式一、配置文件激活</a></li>\n<li><a href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BF%80%E6%B4%BB\">方式二、命令行激活</a></li>\n<li><a href=\"#%E6%96%B9%E5%BC%8F%E4%B8%89-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0%E6%BF%80%E6%B4%BB\">方式三、虚拟机参数激活</a></li>\n<li><a href=\"#%E6%96%B9%E5%BC%8F%E5%9B%9B-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E6%BF%80%E6%B4%BB\">方式四、注解方式激活</a></li>\n<li><a href=\"#maven-profile%E6%89%93%E5%8C%85%E6%8C%87%E5%AE%9A%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2\">Maven Profile打包指定环境及多环境切换</a></li>\n<li><a href=\"#%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2%E5%8F%82%E8%80%83\">多环境切换参考</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"背景\">背景</span></h1><p>在实际的项目开发中，一个项目通常会存在多个环境，例如，开发环境、测试环境和生产环境等。不同环境的配置也不尽相同，例如开发环境使用的是开发数据库，测试环境使用的是测试数据库，而生产环境使用的是线上的正式数据库。</p>\n<p>Profile 为在不同环境下使用不同的配置提供了支持，可以通过激活、指定参数等方式快速切换环境。</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"多环境配置文件格式\">多环境配置文件格式</span></h1><h2><span id=\"方式一\">方式一</span></h2><p>多配置文件</p>\n<p>application.properties：主配置文件</p>\n<p>application-{profile}<br>注：{proflie}对应具体的环境标识</p>\n<p>例如：</p>\n<p>开发环境：dev<br>测试环境: test<br>生产环境：prod</p>\n<p>分别创建的文件是</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">application-dev.properties</span>      <span class=\"string\">//该文件内容是 server.port=8081</span></span><br><span class=\"line\"><span class=\"meta\">application-test.properties</span>     <span class=\"string\">//该文件内容是 server.port=8082</span></span><br><span class=\"line\"><span class=\"meta\">application-prod.properties</span>     <span class=\"string\">//该文件内容是 server.port=8083</span></span><br></pre></td></tr></table></figure>\n\n<p>如果需要不同配置文件放入不同的目录，则参考<a href=\"/Users/winking/resource/workfile/project_file/hexo/source/_posts/java/spring/springboot/springboo-base/springboot-configfile-path.md\">sprigboot-cofigfile-path</a>，对配置文件路径进行配置。</p>\n<h2><span id=\"方式二\">方式二</span></h2><p>文档块模式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">my:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#development environment</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8160</span></span><br><span class=\"line\"><span class=\"attr\">my:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ricky</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#test environment</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8180</span></span><br><span class=\"line\"><span class=\"attr\">my:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#production environment</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8190</span></span><br><span class=\"line\"><span class=\"attr\">my:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prod</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"激活方式\">激活方式</span></h1><h2><span id=\"方式一-配置文件激活\">方式一、配置文件激活</span></h2><p>application.properties,</p>\n<p>yaml文件类似</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring</span> <span class=\"string\">profiles.active=dev</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：如果spring.profiles.active没有指定值，那么只会使用没有指定spring.profiles文件的值，也就是只会加载通用的配置。</strong></p>\n<h2><span id=\"方式二-命令行激活\">方式二、命令行激活</span></h2><p>如果是部署到服务器的话,我们正常打成jar包，启动时通过 <code>--spring.profiles.active=xxx</code> 来控制加载哪个环境的配置，完整命令如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 表示使用测试环境的配置</span></span><br><span class=\"line\">java -jar xxx.jar --spring.profiles.active=<span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 表示使用生产环境的配置</span></span><br><span class=\"line\">java -jar xxx.jar --spring.profiles.active=prod </span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"方式三-虚拟机参数激活\">方式三、虚拟机参数激活</span></h2><p>可以在 Spring Boot 项目运行时，指定虚拟机参数来激活指定的 Profile。</p>\n<p>以 helloworld 为例，将该项目打包成 JAR 文件后，打开命令行窗口跳转到 JAR 所在目录，执行以下命令，激活生产环境（prod）Profile。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -Dspring.profiles.active=prod -jar helloworld-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>以上命令中，-Dspring.profiles.active=prod 为激活生产环境（prod）Profile 的虚拟机参数。</p>\n<h2><span id=\"方式四-注解方式激活\">方式四、注解方式激活</span></h2><p>@Profile:作用于类，通过value属性指定环境配置（等同于Profile文件名称中的profile值）</p>\n<p>创建DevDBConnector.class文件<br>然后输入代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>   <span class=\"comment\">//让这个类能够被springboot扫描到，并生成实例存到容器中。</span></span><br><span class=\"line\"><span class=\"meta\">@Profile(value=&quot;dev&quot;)</span>   <span class=\"comment\">//指定多环境配置类的标识</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevDBConnector</span> <span class=\"keyword\">implements</span> <span class=\"title\">DBConnector</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;数据库配置环境--dev&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"maven-profile打包指定环境及多环境切换\">Maven Profile打包指定环境及多环境切换</span></h2><p>如果使用的是构建工具是Maven，也可以通过Maven的profile特性来实现多环境配置打包。</p>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--开发环境--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">build.profile.id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">build.profile.id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--测试环境--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">build.profile.id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">build.profile.id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--生产环境--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">build.profile.id</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">build.profile.id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources.$&#123;build.profile.id&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">classifier</span>&gt;</span>exec<span class=\"tag\">&lt;/<span class=\"name\">classifier</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过执行 <code>mvn clean package -P $&#123;profile&#125;</code> 来指定使用哪个profile。</p>\n<p>切换：</p>\n<img src=\"/2021/06/17/java/spring/springboot/springboo-base/springboot-profile/image-20220518191822242.png\" alt=\"image-20220518191822242\" style=\"zoom:50%;\">\n\n<h2><span id=\"多环境切换参考\">多环境切换参考</span></h2><p>pom文件里面进行配置 profile和build</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 环境 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--默认激活配置--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--当前环境--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">profile.name</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">profile.name</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos配置中心地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">config.server-addr</span>&gt;</span>127.0.0.1:8848<span class=\"tag\">&lt;/<span class=\"name\">config.server-addr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">config.namespace</span>&gt;</span>DEV<span class=\"tag\">&lt;/<span class=\"name\">config.namespace</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos服务发现地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">discovery.server-addr</span>&gt;</span>127.0.0.1:8848<span class=\"tag\">&lt;/<span class=\"name\">discovery.server-addr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">discovery.namespace</span>&gt;</span>DEV<span class=\"tag\">&lt;/<span class=\"name\">discovery.namespace</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--当前环境--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">profile.name</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">profile.name</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos配置中心地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">config.server-addr</span>&gt;</span>127.0.0.1:8848<span class=\"tag\">&lt;/<span class=\"name\">config.server-addr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">config.namespace</span>&gt;</span>TEST<span class=\"tag\">&lt;/<span class=\"name\">config.namespace</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos服务发现地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">discovery.server-addr</span>&gt;</span>127.0.0.1:8848<span class=\"tag\">&lt;/<span class=\"name\">discovery.server-addr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">discovery.namespace</span>&gt;</span>TEST<span class=\"tag\">&lt;/<span class=\"name\">discovery.namespace</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--当前环境--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">profile.name</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">profile.name</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos配置中心地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">config.server-addr</span>&gt;</span>127.0.0.1:8848<span class=\"tag\">&lt;/<span class=\"name\">config.server-addr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">config.namespace</span>&gt;</span>PROD<span class=\"tag\">&lt;/<span class=\"name\">config.namespace</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--Nacos服务发现地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">discovery.server-addr</span>&gt;</span>127.0.0.1:8848<span class=\"tag\">&lt;/<span class=\"name\">discovery.server-addr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">discovery.namespace</span>&gt;</span>PROD<span class=\"tag\">&lt;/<span class=\"name\">discovery.namespace</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 处理文件时替换文件中的变量 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 打包时排除文件，可自行添加test.yml --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span>application.yml<span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span>application-dev.yml<span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span>application-test.yml<span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 打包时所包含得文件 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>application.yml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>application-$&#123;profiles&#125;.yml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["springboot"],"tags":["java","springboot"]},{"title":"SpringBoot配置文件密码加密","url":"/2021/07/17/java/spring/springboot/springboo-base/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/","content":"<h1><span id=\"前言\">前言</span></h1><p>在日常开发中，可能很随意把数据库密码直接明文暴露在配置文件中，在开发环境可以这么做，但是在生产环境，是相当不建议这么做，毕竟安全无小事，谁也不知道哪天密码就莫名其妙泄露了。springboot项目中如何对数据库密码进行加密</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"方案一使用druid数据库连接池对数据库密码加密\">方案一：使用druid数据库连接池对数据库密码加密</span></h1><p>##pom.xml引入druid包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;druid.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"利用comalibabadruidfilterconfigconfigtools生成公私钥\">利用com.alibaba.druid.filter.config.ConfigTools生成公私钥</span></h2><p><strong>ps：</strong> 生成的方式有两种，一种利用命令行生成，一种直接写个工具类生成。本文示例直接采用工具类生成</p>\n<p>工具类代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * alibaba druid加解密规则：</span></span><br><span class=\"line\"><span class=\"comment\"> * 明文密码+私钥(privateKey)加密=加密密码</span></span><br><span class=\"line\"><span class=\"comment\"> * 加密密码+公钥(publicKey)解密=明文密码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidEncryptorUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String privateKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String publicKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String[] keyPair = ConfigTools.genKeyPair(<span class=\"number\">512</span>);</span><br><span class=\"line\">            privateKey = keyPair[<span class=\"number\">0</span>];</span><br><span class=\"line\">            System.out.println(String.format(<span class=\"string\">&quot;privateKey--&gt;%s&quot;</span>,privateKey));</span><br><span class=\"line\">            publicKey = keyPair[<span class=\"number\">1</span>];</span><br><span class=\"line\">            System.out.println(String.format(<span class=\"string\">&quot;publicKey--&gt;%s&quot;</span>,publicKey));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 明文加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> plaintext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encode</span><span class=\"params\">(String plaintext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;明文字符串：&quot;</span> + plaintext);</span><br><span class=\"line\">        String ciphertext = ConfigTools.encrypt(privateKey,plaintext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密后字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ciphertext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ciphertext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decode</span><span class=\"params\">(String ciphertext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\">        String plaintext = ConfigTools.decrypt(publicKey,ciphertext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;解密后的字符串：&quot;</span> + plaintext);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> plaintext;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"修改数据库的配置文件内容信息\">修改数据库的配置文件内容信息</span></h2><p><strong>a 、</strong> 修改密码</p>\n<p>把密码替换成用DruidEncryptorUtils这个工具类生成的密码</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">password: <span class=\"built_in\">$</span>&#123;DATASOURCE<span class=\"built_in\">_</span>PWD:HB5FmUeAI1U81YJrT/T6awImFg1/Az5o8imy765WkVJouOubC2H80jqmZrr8L9zWKuzS/8aGzuQ4YySAkhywnA==&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>b、</strong> filter开启config</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">filter:</span></span><br><span class=\"line\">   <span class=\"attr\">config:</span></span><br><span class=\"line\">     <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>c、配置connectionProperties属性</p>\n<p><strong>ps：</strong><br>spring.datasource.publickey为工具类生成的公钥</p>\n<p><strong>附录：</strong> 完整数据库配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">        <span class=\"attr\">driverClassName:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">$&#123;DATASOURCE_URL:jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;DATASOURCE_USERNAME:root&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;DATASOURCE_PWD:HB5FmUeAI1U81YJrT/T6awImFg1/Az5o8imy765WkVJouOubC2H80jqmZrr8L9zWKuzS/8aGzuQ4YySAkhywnA==&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">publickey:</span> <span class=\"string\">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIvP9xF4RCM4oFiu47NZY15iqNOAB9K2Ml9fiTLa05CWaXK7uFwBImR7xltZM1frl6ahWAXJB6a/FSjtJkTZUJECAwEAAQ==</span></span><br><span class=\"line\">        <span class=\"attr\">druid:</span></span><br><span class=\"line\">            <span class=\"comment\"># 初始连接数</span></span><br><span class=\"line\">            <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"comment\"># 最小连接池数量</span></span><br><span class=\"line\">            <span class=\"attr\">minIdle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"comment\"># 最大连接池数量</span></span><br><span class=\"line\">            <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置获取连接等待超时的时间</span></span><br><span class=\"line\">            <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置一个连接在池中最大生存的时间，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">maxEvictableIdleTimeMillis:</span> <span class=\"number\">900000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置检测连接是否有效</span></span><br><span class=\"line\">            <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">            <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"attr\">webStatFilter:</span></span><br><span class=\"line\">                <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">statViewServlet:</span></span><br><span class=\"line\">                <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"comment\"># 设置白名单，不填则允许所有访问</span></span><br><span class=\"line\">                <span class=\"attr\">allow:</span></span><br><span class=\"line\">                <span class=\"attr\">url-pattern:</span> <span class=\"string\">/druid/*</span></span><br><span class=\"line\">                <span class=\"comment\"># 控制台管理用户名和密码</span></span><br><span class=\"line\">                <span class=\"attr\">login-username:</span></span><br><span class=\"line\">                <span class=\"attr\">login-password:</span></span><br><span class=\"line\">            <span class=\"attr\">filter:</span></span><br><span class=\"line\">                <span class=\"attr\">stat:</span></span><br><span class=\"line\">                    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                    <span class=\"comment\"># 慢SQL记录</span></span><br><span class=\"line\">                    <span class=\"attr\">log-slow-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                    <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">                    <span class=\"attr\">merge-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"attr\">wall:</span></span><br><span class=\"line\">                    <span class=\"attr\">config:</span></span><br><span class=\"line\">                        <span class=\"attr\">multi-statement-allow:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"attr\">config:</span></span><br><span class=\"line\">                    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">connection-properties:</span> <span class=\"string\">config.decrypt=true;config.decrypt.key=$&#123;spring.datasource.publickey&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"方案二使用jasypt对数据库密码加密\">方案二：使用jasypt对数据库密码加密</span></h1><h2><span id=\"pomxml引入jasypt包\">pom.xml引入jasypt包</span></h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.ulisesbocchio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jasypt.verison&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"利用jasypt提供的工具类对明文密码进行加密\">利用jasypt提供的工具类对明文密码进行加密</span></h2><p>加密工具类如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JasyptEncryptorUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String salt = <span class=\"string\">&quot;lybgeek&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BasicTextEncryptor basicTextEncryptor = <span class=\"keyword\">new</span> BasicTextEncryptor();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        basicTextEncryptor.setPassword(salt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">JasyptEncryptorUtils</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 明文加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> plaintext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encode</span><span class=\"params\">(String plaintext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;明文字符串：&quot;</span> + plaintext);</span><br><span class=\"line\">        String ciphertext = basicTextEncryptor.encrypt(plaintext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密后字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ciphertext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ciphertext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decode</span><span class=\"params\">(String ciphertext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\">        ciphertext = <span class=\"string\">&quot;ENC(&quot;</span> + ciphertext + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (PropertyValueEncryptionUtils.isEncryptedValue(ciphertext))&#123;</span><br><span class=\"line\">            String plaintext = PropertyValueEncryptionUtils.decrypt(ciphertext,basicTextEncryptor);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;解密后的字符串：&quot;</span> + plaintext);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> plaintext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;解密失败&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"修改数据库的配置文件内容信息\">修改数据库的配置文件内容信息</span></h2><p><strong>a、</strong> 用ENC包裹用JasyptEncryptorUtils 生成的加密串</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">password: <span class=\"built_in\">$</span>&#123;DATASOURCE<span class=\"built_in\">_</span>PWD:ENC(P8m43qmzqN4c07DCTPey4Q==)&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>b、</strong> 配置密钥和指定加解密算法</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">jasypt:</span><br><span class=\"line\">    encryptor:</span><br><span class=\"line\">        password: lybgeek</span><br><span class=\"line\">        algorithm: PBEWithMD5AndDES</span><br><span class=\"line\">        iv-generator-classname: org.jasypt.iv.NoIvGenerator</span><br></pre></td></tr></table></figure>\n\n<p>因为工具类使用的是加解密的工具类是BasicTextEncryptor，其对应配置加解密就是PBEWithMD5AndDES和<br>org.jasypt.iv.NoIvGenerator</p>\n<p><strong>ps：</strong> 在生产环境中，建议使用如下方式配置密钥，避免密钥泄露</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar -Djasypt.encryptor.password=lybgeek</span><br></pre></td></tr></table></figure>\n\n<p><strong>附录：</strong> 完整数据库配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">        <span class=\"attr\">driverClassName:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">$&#123;DATASOURCE_URL:ENC(kT/gwazwzaFNEp7OCbsgCQN7PHRohaTKJNdGVgLsW2cH67zqBVEq7mN0BTIXAeF4/Fvv4l7myLFx0y6ap4umod7C2VWgyRU5UQtKmdwzQN3hxVxktIkrFPn9DM6+YahM0xP+ppO9HaWqA2ral0ejBCvmor3WScJNHCAhI9kHjYc=)&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;DATASOURCE_USERNAME:ENC(rEQLlqM5nphqnsuPj3MlJw==)&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;DATASOURCE_PWD:ENC(P8m43qmzqN4c07DCTPey4Q==)&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">druid:</span></span><br><span class=\"line\">            <span class=\"comment\"># 初始连接数</span></span><br><span class=\"line\">            <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"comment\"># 最小连接池数量</span></span><br><span class=\"line\">            <span class=\"attr\">minIdle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"comment\"># 最大连接池数量</span></span><br><span class=\"line\">            <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置获取连接等待超时的时间</span></span><br><span class=\"line\">            <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置一个连接在池中最大生存的时间，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">maxEvictableIdleTimeMillis:</span> <span class=\"number\">900000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置检测连接是否有效</span></span><br><span class=\"line\">            <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">            <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"attr\">webStatFilter:</span></span><br><span class=\"line\">                <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">statViewServlet:</span></span><br><span class=\"line\">                <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"comment\"># 设置白名单，不填则允许所有访问</span></span><br><span class=\"line\">                <span class=\"attr\">allow:</span></span><br><span class=\"line\">                <span class=\"attr\">url-pattern:</span> <span class=\"string\">/druid/*</span></span><br><span class=\"line\">                <span class=\"comment\"># 控制台管理用户名和密码</span></span><br><span class=\"line\">                <span class=\"attr\">login-username:</span></span><br><span class=\"line\">                <span class=\"attr\">login-password:</span></span><br><span class=\"line\">            <span class=\"attr\">filter:</span></span><br><span class=\"line\">                <span class=\"attr\">stat:</span></span><br><span class=\"line\">                    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                    <span class=\"comment\"># 慢SQL记录</span></span><br><span class=\"line\">                    <span class=\"attr\">log-slow-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                    <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">                    <span class=\"attr\">merge-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"attr\">wall:</span></span><br><span class=\"line\">                    <span class=\"attr\">config:</span></span><br><span class=\"line\">                        <span class=\"attr\">multi-statement-allow:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">jasypt:</span></span><br><span class=\"line\">    <span class=\"attr\">encryptor:</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">lybgeek</span></span><br><span class=\"line\">        <span class=\"attr\">algorithm:</span> <span class=\"string\">PBEWithMD5AndDES</span></span><br><span class=\"line\">        <span class=\"attr\">iv-generator-classname:</span> <span class=\"string\">org.jasypt.iv.NoIvGenerator</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"方案三自定义实现\">方案三：自定义实现</span></h1><p><strong>实现原理：</strong> 利用spring后置处理器修改DataSource</p>\n<h2><span id=\"自定义加解密工具类\">自定义加解密工具类</span></h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用hutool封装的加解密工具，以AES对称加密算法为例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EncryptorUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String secretKey;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        secretKey = Hex.encodeHexString(SecureUtil.generateKey(SymmetricAlgorithm.AES.getValue()).getEncoded());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;secretKey--&gt;&quot;</span> + secretKey);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------------------------------------------------------------------------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 明文加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> plaintext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encode</span><span class=\"params\">(String plaintext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;明文字符串：&quot;</span> + plaintext);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] key = Hex.decodeHex(secretKey.toCharArray());</span><br><span class=\"line\">        String ciphertext =  SecureUtil.aes(key).encryptHex(plaintext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密后字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ciphertext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ciphertext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decode</span><span class=\"params\">(String ciphertext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] key = Hex.decodeHex(secretKey.toCharArray());</span><br><span class=\"line\">        String plaintext = SecureUtil.aes(key).decryptStr(ciphertext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;解密后的字符串：&quot;</span> + plaintext);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> plaintext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 明文加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> plaintext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encode</span><span class=\"params\">(String secretKey,String plaintext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;明文字符串：&quot;</span> + plaintext);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] key = Hex.decodeHex(secretKey.toCharArray());</span><br><span class=\"line\">        String ciphertext =  SecureUtil.aes(key).encryptHex(plaintext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密后字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ciphertext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ciphertext</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decode</span><span class=\"params\">(String secretKey,String ciphertext)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加密字符串：&quot;</span> + ciphertext);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] key = Hex.decodeHex(secretKey.toCharArray());</span><br><span class=\"line\">        String plaintext = SecureUtil.aes(key).decryptStr(ciphertext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;解密后的字符串：&quot;</span> + plaintext);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> plaintext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"编写后置处理器\">编写后置处理器</span></h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidDataSourceEncyptBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CustomEncryptProperties customEncryptProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSourceProperties dataSourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DruidDataSourceEncyptBeanPostProcessor</span><span class=\"params\">(CustomEncryptProperties customEncryptProperties, DataSourceProperties dataSourceProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customEncryptProperties = customEncryptProperties;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataSourceProperties = dataSourceProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bean <span class=\"keyword\">instanceof</span> DruidDataSource)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(customEncryptProperties.isEnabled())&#123;</span><br><span class=\"line\">                DruidDataSource druidDataSource = (DruidDataSource)bean;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;--------------------------------------------------------------------------------------&quot;</span>);</span><br><span class=\"line\">                String username = dataSourceProperties.getUsername();</span><br><span class=\"line\">                druidDataSource.setUsername(EncryptorUtils.decode(customEncryptProperties.getSecretKey(),username));</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;--------------------------------------------------------------------------------------&quot;</span>);</span><br><span class=\"line\">                String password = dataSourceProperties.getPassword();</span><br><span class=\"line\">                druidDataSource.setPassword(EncryptorUtils.decode(customEncryptProperties.getSecretKey(),password));</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;--------------------------------------------------------------------------------------&quot;</span>);</span><br><span class=\"line\">                String url = dataSourceProperties.getUrl();</span><br><span class=\"line\">                druidDataSource.setUrl(EncryptorUtils.decode(customEncryptProperties.getSecretKey(),url));</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;--------------------------------------------------------------------------------------&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"修改数据库的配置文件内容信息\">修改数据库的配置文件内容信息</span></h2><p><strong>a 、</strong> 修改密码</p>\n<p>把密码替换成用自定义加密工具类生成的加密密码</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">password: <span class=\"built_in\">$</span>&#123;DATASOURCE<span class=\"built_in\">_</span>PWD:fb31cdd78a5fa2c43f530b849f1135e7&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>b 、</strong> 指定密钥和开启加密功能</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom:</span></span><br><span class=\"line\">    <span class=\"attr\">encrypt:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">secret-key:</span> <span class=\"string\">2f8ba810011e0973728afa3f28a0ecb6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ps：</strong> 同理secret-key最好也不要直接暴露在配置文件中，可以用<br>-Dcustom.encrypt.secret-key指定</p>\n<p><strong>附录：</strong> 完整数据库配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">        <span class=\"attr\">driverClassName:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">$&#123;DATASOURCE_URL:dcb268cf3a2626381d2bc5c96f94fb3d7f99352e0e392362cb818a321b0ca61f3a8dad3aeb084242b745c61a1d3dc244ed1484bf745c858c44560dde10e60e90ac65f77ce2926676df7af6b35aefd2bb984ff9a868f1f9052ee9cae5572fa015b66a602f32df39fb1bbc36e04cc0f148e4d610a3e5d54f2eb7c57e4729c9d7b4&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;DATASOURCE_USERNAME:61db3bf3c6d3fe3ce87549c1af1e9061&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;DATASOURCE_PWD:fb31cdd78a5fa2c43f530b849f1135e7&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">druid:</span></span><br><span class=\"line\">            <span class=\"comment\"># 初始连接数</span></span><br><span class=\"line\">            <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"comment\"># 最小连接池数量</span></span><br><span class=\"line\">            <span class=\"attr\">minIdle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"comment\"># 最大连接池数量</span></span><br><span class=\"line\">            <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置获取连接等待超时的时间</span></span><br><span class=\"line\">            <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置一个连接在池中最大生存的时间，单位是毫秒</span></span><br><span class=\"line\">            <span class=\"attr\">maxEvictableIdleTimeMillis:</span> <span class=\"number\">900000</span></span><br><span class=\"line\">            <span class=\"comment\"># 配置检测连接是否有效</span></span><br><span class=\"line\">            <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">            <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"attr\">webStatFilter:</span></span><br><span class=\"line\">                <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">statViewServlet:</span></span><br><span class=\"line\">                <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"comment\"># 设置白名单，不填则允许所有访问</span></span><br><span class=\"line\">                <span class=\"attr\">allow:</span></span><br><span class=\"line\">                <span class=\"attr\">url-pattern:</span> <span class=\"string\">/druid/*</span></span><br><span class=\"line\">                <span class=\"comment\"># 控制台管理用户名和密码</span></span><br><span class=\"line\">                <span class=\"attr\">login-username:</span></span><br><span class=\"line\">                <span class=\"attr\">login-password:</span></span><br><span class=\"line\">            <span class=\"attr\">filter:</span></span><br><span class=\"line\">                <span class=\"attr\">stat:</span></span><br><span class=\"line\">                    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                    <span class=\"comment\"># 慢SQL记录</span></span><br><span class=\"line\">                    <span class=\"attr\">log-slow-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                    <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">                    <span class=\"attr\">merge-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"attr\">wall:</span></span><br><span class=\"line\">                    <span class=\"attr\">config:</span></span><br><span class=\"line\">                        <span class=\"attr\">multi-statement-allow:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">custom:</span></span><br><span class=\"line\">    <span class=\"attr\">encrypt:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">secret-key:</span> <span class=\"string\">2f8ba810011e0973728afa3f28a0ecb6</span></span><br></pre></td></tr></table></figure>\n\n","categories":["springboot"],"tags":["java","springboot"]},{"title":"Mac系统中的.DS_Store","url":"/2021/02/17/os/Mac/Mac-DS_Store/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#ds_store%E6%98%AF%E4%BB%80%E4%B9%88\">.DS_Store是什么？</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\">删除文件：</a></li>\n<li><a href=\"#%E7%A6%81%E6%AD%A2%E7%94%9F%E6%88%90\">禁止生成：</a></li>\n<li><a href=\"#%E6%81%A2%E5%A4%8D%E7%94%9F%E6%88%90\">恢复生成：</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2><span id=\"ds_store是什么\">.DS_Store是什么？</span></h2><p>.DS_Store是Mac系统中产生的一个隐藏文件，记录文件或目录的一些自定义属性，如果我们有什么特殊的定制，完全是没用的。</p>\n<h2><span id=\"删除文件\">删除文件：</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">&#x27;*.DS_Store&#x27;</span> -<span class=\"built_in\">type</span> f -delete</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"禁止生成\">禁止生成：</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"恢复生成\">恢复生成：</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</span><br></pre></td></tr></table></figure>\n","categories":["os"],"tags":["os","mac"]},{"title":"Docker-compose安装SonarQube","url":"/2022/03/17/devops/tools/SonarQube/docker-install-sonarqube/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#docker-compose%E5%AE%89%E8%A3%85sonarqube\">Docker-compose安装SonarQube</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"docker-compose安装sonarqube\">Docker-compose安装SonarQube</span></h1><p>创建存储卷</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&gt; docker volume create --name sonarqube_data</span><br><span class=\"line\">$&gt; docker volume create --name sonarqube_logs</span><br><span class=\"line\">$&gt; docker volume create --name sonarqube_extensions</span><br><span class=\"line\">$&gt; docker volume create --name portainer_data</span><br><span class=\"line\">$&gt; docker volume create --name postgresql</span><br><span class=\"line\">$&gt; docker volume create --name postgresql_data</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>创建网络：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network create sonarnet</span><br></pre></td></tr></table></figure>\n\n<p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube:</span> <span class=\"comment\">#服务名称</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">sonarqube</span> <span class=\"comment\"># 相当于run 的 --name</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">sonarqube:lts-community</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9001:9000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarnet</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonar.jdbc.username=sonar</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonar.jdbc.password=123456</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonar.jdbc.url=jdbc:postgresql://postgres:5432/sonarqube</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SONARQUBE_JDBC_USERNAME=sonar</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SONARQUBE_JDBC_PASSWORD=123456</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"comment\"># - /home/sonar/sonarqube/extensions:/opt/sonarqube/extensions</span></span><br><span class=\"line\">      <span class=\"comment\"># - /home/sonar/sonarqube/logs:/opt/sonarqube/logs</span></span><br><span class=\"line\">      <span class=\"comment\"># - /home/sonar/sonarqube/data:/opt/sonarqube/data</span></span><br><span class=\"line\">      <span class=\"comment\"># - /home/sonar/sonarqube/conf:/opt/sonarqube/conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_data:/opt/sonarqube/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_extensions:/opt/sonarqube/extensions</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_logs:/opt/sonarqube/logs</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">postgres</span> <span class=\"comment\"># 相当于run 的 --name</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:14.3</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">5432</span><span class=\"string\">:5432</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarnet</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ES_JAVA_POTS=&quot;-Xms128m</span> <span class=\"string\">-Xmx128m&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_USER=sonar</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_PASSWORD=123456</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_DB=sonarqube</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"comment\"># - /home/sonar/postgres/postgresql:/var/lib/postgresql</span></span><br><span class=\"line\">      <span class=\"comment\"># - /home/sonar/postgres/data:/var/lib/postgresql/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">postgresql:/var/lib/postgresql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">postgresql_data:/var/lib/postgresql/data</span></span><br><span class=\"line\">  <span class=\"comment\"># 容器管理工具，可以不部署</span></span><br><span class=\"line\">  <span class=\"attr\">potainer:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">potainer</span> <span class=\"comment\"># 相当于run 的 --name</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">portainer/portainer</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">portainer</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">portainer_data:/data</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9000:9000&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">portainer_data:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_data:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_extensions:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_logs:</span></span><br><span class=\"line\">  <span class=\"attr\">postgresql:</span></span><br><span class=\"line\">  <span class=\"attr\">postgresql_data:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarnet:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"literal\">true</span>   <span class=\"comment\">#使用外部指定网桥  注意:网桥必须存在</span></span><br></pre></td></tr></table></figure>\n\n<p>启动后访问：localhost:9000</p>\n","categories":["devops"],"tags":["devops","sonarqube"]},{"title":"IDEA使用SonarQube","url":"/2022/03/17/devops/tools/SonarQube/idea-use-sonarqube/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#idea%E4%BD%BF%E7%94%A8sonarqube\">IDEA使用SonarQube</a><ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6\">安装插件</a></li>\n<li><a href=\"#sonarqube%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\">Sonarqube创建项目</a></li>\n<li><a href=\"#%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE%E6%9C%AA%E9%AA%8C%E8%AF%81\">构建工具配置（未验证）</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"idea使用sonarqube\">IDEA使用SonarQube</span></h1><h2><span id=\"安装插件\">安装插件</span></h2><p>从 File-&gt;Settings-&gt;Plugins 搜索 sonar</p>\n<p>在Settings-&gt;Tools 中找到 SonarLint，如下图：</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2022/03/17/devops/tools/SonarQube/idea-use-sonarqube/image-20220602032021061.png\" alt=\"image-20220602032021061\"></p>\n<p><img src=\"/2022/03/17/devops/tools/SonarQube/idea-use-sonarqube/image-20220602032115095.png\" alt=\"image-20220602032115095\"></p>\n<p>填写连接名称，选择连接的sonarqube服务器</p>\n<p>例如：<a href=\"http://localhost:9001/\">http://localhost:9001</a></p>\n<p>点击next</p>\n<p><img src=\"/2022/03/17/devops/tools/SonarQube/idea-use-sonarqube/image-20220602032327306.png\" alt=\"image-20220602032327306\"></p>\n<p>点击Create Token会跳转到sonarqube服务器页面，在页面中生成token回写到这里。</p>\n<p>点击next完成配置。</p>\n<h2><span id=\"sonarqube创建项目\">Sonarqube创建项目</span></h2><p><img src=\"/2022/03/17/devops/tools/SonarQube/idea-use-sonarqube/image-20220606173939087.png\" alt=\"image-20220606173939087\"></p>\n<p>创建完成后可以获取maven等构建工具的命令，使用该命令进行代码质量检查。也可以在构建文件中进行配置，下面详细介绍。</p>\n<p>idea配置服务</p>\n<p><img src=\"/2022/03/17/devops/tools/SonarQube/idea-use-sonarqube/image-20220606174202076.png\" alt=\"image-20220606174202076\"></p>\n<h2><span id=\"构建工具配置未验证\">构建工具配置（未验证）</span></h2><p>在工程pom.xml中添加配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.sonarsource.scanner.maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sonar-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.0.1398<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>sonar<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">sonar.host.url</span>&gt;</span>http://sonar ip 地址:9000<span class=\"tag\">&lt;/<span class=\"name\">sonar.host.url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行工程代码检测</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn sonar:sonar</span><br></pre></td></tr></table></figure>\n\n<p>通过配置文件执行:</p>\n<p>在工程中的pom.xml同目录添加 sonar-project.properties 配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录执行CMD命令： mvn sonar:sonar</span></span><br><span class=\"line\"><span class=\"comment\"># must be unique in a given SonarQube instance</span></span><br><span class=\"line\">sonar.projectKey=payroll-flow-platform</span><br><span class=\"line\"><span class=\"comment\"># this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.</span></span><br><span class=\"line\">sonar.projectName=payroll-flow-platform</span><br><span class=\"line\">sonar.projectVersion=1.0.0</span><br><span class=\"line\"><span class=\"comment\"># Path is relative to the sonar-project.properties file. Replace &quot;\\&quot; by &quot;/&quot; on Windows.</span></span><br><span class=\"line\"><span class=\"comment\"># This property is optional if sonar.modules is set. </span></span><br><span class=\"line\">sonar.sources=./</span><br><span class=\"line\">sonar.java.sources=**/src</span><br><span class=\"line\">sonar.java.binaries=**/target/classes</span><br><span class=\"line\">sonar.exclusions=**/*Test.java,**/Test*.java, **/*.js, **/*.htm*, **/*.css, **/target/**, **/resources/**, **/.settings/**</span><br><span class=\"line\"><span class=\"comment\"># Encoding of the source code. Default is default system encoding</span></span><br><span class=\"line\">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>右键-&gt;如下图：</p>\n<p><img src=\"/2022/03/17/devops/tools/SonarQube/idea-use-sonarqube/image-20220606174801853.png\" alt=\"image-20220606174801853\"></p>\n<p>在 <a href=\"http://sonarip/?%E5%9C%B0%E5%9D%80:9000/projects\">http://sonarip?地址:9000/projects</a> 中即可查看到检测结果。</p>\n","categories":["devops"],"tags":["devops","sonarqube","IDEA"]},{"title":"Linux删除文件实现回收站功能","url":"/2022/03/05/os/Linux/common/Linux-Recycle-Bin/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%9C%A8%E5%AE%B6%E7%9B%AE%E5%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%A8%E6%9D%A5%E4%BF%9D%E5%AD%98%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6\">在家目录创建一个文件夹用来保存删除的文件</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9bashrc%E6%96%87%E4%BB%B6\">修改.bashrc文件</a></li>\n<li><a href=\"#%E5%9C%A8bashrc%E6%96%87%E4%BB%B6%E5%90%8E%E9%9D%A2%E6%B7%BB%E5%8A%A0%E4%B8%8B%E9%9D%A2%E8%BF%99%E4%BA%9B\">在.bashrc文件后面添加下面这些</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8Csource%E5%91%BD%E4%BB%A4%E7%94%9F%E6%95%88\">执行source命令生效</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8\">使用</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"在家目录创建一个文件夹用来保存删除的文件\">在家目录创建一个文件夹用来保存删除的文件</span></h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.Deanrash</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1><span id=\"修改bashrc文件\">修改.bashrc文件</span></h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"在bashrc文件后面添加下面这些\">在.bashrc文件后面添加下面这些</span></h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> rm=deanrash        </span><br><span class=\"line\"><span class=\"built_in\">alias</span> rl=<span class=\"string\">&#x27;ls ~/.Deanrash&#x27;</span>  </span><br><span class=\"line\"><span class=\"built_in\">alias</span> ur=undelfile  </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">undelfile</span></span>()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  mv -i ~/.Deanrash/<span class=\"variable\">$@</span> ./  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">deanrash</span></span>()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  mv <span class=\"variable\">$@</span> ~/.Deanrash/  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">cleardeanrash</span></span>()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">&quot;Clear deanrash?[n]&quot;</span> confirm  </span><br><span class=\"line\">    [ <span class=\"variable\">$confirm</span> == <span class=\"string\">&#x27;y&#x27;</span> ] || [ <span class=\"variable\">$confirm</span> == <span class=\"string\">&#x27;Y&#x27;</span> ]  &amp;&amp; /usr/bin/rm -rf ~/.Deanrash/*  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"执行source命令生效\">执行source命令生效</span></h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"使用\">使用</span></h1><p>现在可以使用rm（删除）,ur（撤销），rl（列出回收站），cleardeanrash（清空回收站）命令了。</p>\n<p>删除一个文件夹，helloworld下面的文件均被移到回收站中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm helloworld</span><br></pre></td></tr></table></figure>\n\n<p>删除一个文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm abc.txt</span><br></pre></td></tr></table></figure>\n\n<p> 撤销abc.txt</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ur abc.txt</span><br></pre></td></tr></table></figure>\n\n<p> 清空回收站</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleardeanrash</span><br></pre></td></tr></table></figure>\n","categories":["os"],"tags":["os","linux"]},{"title":"mysql基础监控","url":"/2022/03/02/db-resource/mysql/mysql-base/mysql-base-monitor/","content":"<h1><span id=\"简介\">简介</span></h1><p>    本次文章完全使用mysql自带的show命令实现获取，从connects、buffercache、lock、SQL、statement、Database throughputs、serverconfig7大方面全面获取监控数据。</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"监控参数配置\">监控参数配置</span></h1><h1><span id=\"连接数connects\">连接数（Connects）</span></h1><ul>\n<li>最大使用连接数：show status like ‘Max_used_connections’</li>\n<li>当前打开的连接数：show status like ‘Threads_connected’</li>\n</ul>\n<h1><span id=\"缓存buffercache\">缓存（bufferCache）</span></h1><ul>\n<li>未从缓冲池读取的次数：show status like ‘Innodb_buffer_pool_reads’</li>\n<li>从缓冲池读取的次数：show status like ‘Innodb_buffer_pool_read_requests’</li>\n<li>缓冲池的总页数：show status like ‘Innodb_buffer_pool_pages_total’</li>\n<li>缓冲池空闲的页数：show status like ‘Innodb_buffer_pool_pages_free’</li>\n<li>缓存命中率计算：（1-Innodb_buffer_pool_reads/Innodb_buffer_pool_read_requests）*100%</li>\n<li>缓存池使用率为：((Innodb_buffer_pool_pages_total-Innodb_buffer_pool_pages_free）/Innodb_buffer_pool_pages_total）*100%</li>\n</ul>\n<h1><span id=\"锁lock\">锁（lock）</span></h1><ul>\n<li>锁等待个数：show status like ‘Innodb_row_lock_waits’</li>\n<li>平均每次锁等待时间：show status like ‘Innodb_row_lock_time_avg’</li>\n<li>查看是否存在表锁：show open TABLES where in_use&gt;0；有数据代表存在锁表，空为无表锁</li>\n</ul>\n<p>备注：锁等待统计得数量为累加数据，每次获取得时候可以跟之前得数据进行相减，得到当前统计得数据</p>\n<h1><span id=\"sql\">SQL</span></h1><ul>\n<li>查看mysql开关是否打开：show variables like ‘slow_query_log’，ON为开启状态，如果为OFF，set global slow_query_log=1 进行开启</li>\n<li>查看mysql阈值：show variables like ‘long_query_time’，根据页面传递阈值参数，修改阈值 set global long_query_time=0.1</li>\n<li>查看mysql慢sql目录：show variables like ‘slow_query_log_file’</li>\n<li>格式化慢sql日志：mysqldumpslow -s at -t 10 /export/data/mysql/log/slow.log<br>注：此语句通过jdbc执行不了，属于命令行执行。意思为：显示出耗时最长的10个SQL语句执行信息，10可以修改为TOP个数。显示的信息为：执行次数、平均执行时间、SQL语句</li>\n</ul>\n<p>备注：当mysqldumpslow命令执行失败时，将慢日志同步到本地进行格式化处理。</p>\n<h1><span id=\"statement\">statement</span></h1><ul>\n<li>insert数量：show status like ‘Com_insert’</li>\n<li>delete数量：show status like ‘Com_delete’</li>\n<li>update数量：show status like ‘Com_update’</li>\n<li>select数量：show status like ‘Com_select’</li>\n</ul>\n<h1><span id=\"吞吐database-throughputs\">吞吐（Database throughputs）</span></h1><ul>\n<li>发送吞吐量：show status like ‘Bytes_sent’</li>\n<li>接收吞吐量：show status like ‘Bytes_received’</li>\n<li>总吞吐量：Bytes_sent+Bytes_received</li>\n</ul>\n<h1><span id=\"数据库参数serverconfig\">数据库参数（serverconfig）</span></h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"慢sql\">慢SQL</span></h1><p>慢SQL指的是MySQL慢查询，具体指运行时间超过long_query_time值的SQL。<br>我们常听MySQL中有二进制日志binlog、中继日志relaylog、重做回滚日志redolog、undolog等。针对慢查询，还有一种慢查询日志slowlog，用来记录在MySQL中响应时间超过阀值的语句。慢SQL对实际生产业务影响是致命的，所以测试人员在性能测试过程中，对数据库SQL语句执行情况实施监控，给开发提供准确的性能优化意见显得尤为重要。那怎么使用Mysql数据库提供的慢查询日志来监控SQL语句执行情况，找到消耗较高的SQL语句，以下详细说明一下慢查询日志的使用步骤：</p>\n<ul>\n<li>确保打开慢SQL开关slow_query_log<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;slow_query_log&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>如果没有开启慢sql,则通过如下方式进行开启：</p>\n<h2><span id=\"开启慢查询\">开启慢查询</span></h2><p><strong>方式一:修改配置文件</strong></p>\n<p>Windows：Windows 的配置文件为 my.ini，一般在 MySQL 的安装目录下或者 c:\\Windows 下。</p>\n<p>Linux：Linux 的配置文件为 my.cnf ，一般在 /etc 下</p>\n<p>在 my.ini 增加几行:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[mysqlld]</span> <span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">long_query_time</span>=<span class=\"string\">2 </span></span><br><span class=\"line\"><span class=\"comment\">#5.0、5.1等版本配置如下选项 </span></span><br><span class=\"line\"><span class=\"meta\">log-slow-queries</span>=<span class=\"string\">&quot;mysql_slow_query.log&quot; </span></span><br><span class=\"line\"><span class=\"comment\">#5.5及以上版本配置如下选项 </span></span><br><span class=\"line\"><span class=\"meta\">slow-query-log</span>=<span class=\"string\">On </span></span><br><span class=\"line\"><span class=\"attr\">slow_query_log_file</span>=<span class=\"string\">&quot;mysql_slow_query.log&quot; </span></span><br><span class=\"line\"><span class=\"meta\">log-query-not-using-indexes</span> <span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>第一句使用来定义查过多少秒的查询算是慢查询，我这里定义的是2秒</p>\n<p>第二句使用来定义慢查询日志的路径（因为是windows，所以不牵涉权限问题）</p>\n<p>第三句就是记录下没有使用索引的query</p>\n<p>第二步：查看关于慢查询的状态</p>\n<p><strong>方式二:通过MySQL数据库开启慢查询</strong></p>\n<p>    上文的配置需要重启mysql server进程mysqld才会生效。但是很多时候，尤其是产品运营环境，不希望每次修改都需要重新启动mysql服务器，也希望能在某些特定时间记 录。MySQL5.1给我们提供了更为灵活的运行时控制，使得你不必重新启动mysql服务器，也能选择性地记录或者不记录某些slow queries。</p>\n<p>    MySQL5.1中，提供了全局变量<code>slow_query_log</code>、<code>slow_query_log_file</code>可以灵活地控制enable/disable慢查询。同时可以通过<code>long_query_time</code>设置时间</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"operator\">/</span><span class=\"operator\">/</span>启用slow query记录</span><br><span class=\"line\">#注意:设置了slow_query_log全局变量, log_slow_queries也会隐性地跟着改变</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> slow_query_log<span class=\"operator\">=</span><span class=\"keyword\">ON</span></span><br></pre></td></tr></table></figure>\n\n<p>不幸运的是,在MySQL5.0并没有提供类似的全局变量来灵活控制，但是我们可以通过将long_query_time设置得足够大来避免记录某些查询语句。比如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 单位为秒</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> long_query_time <span class=\"operator\">=</span> <span class=\"number\">3600</span>;</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> log_querise_not_using_indexes <span class=\"operator\">=</span> <span class=\"keyword\">ON</span>;</span><br></pre></td></tr></table></figure>\n\n<p>MySQL5.1+后可以在运行时改变日记行为，将日志记录到数据库表中。只要将mysql全局变量log_output设置为 TABLE即可。MySQL会将日志分别记录到表mysql.gengera_log和mysql.slow_log二张表中。但是，我们推荐将日志记录 在日记文件中。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> ‘log_output<span class=\"string\">&#x27;\\G</span></span><br><span class=\"line\"><span class=\"string\">Variable_name: log_output</span></span><br><span class=\"line\"><span class=\"string\">Value: FILE</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt;set global log_output=&#x27;</span><span class=\"keyword\">table</span><span class=\"string\">&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>验证慢查询是否开启</strong></p>\n<p>执行如下SQL语句来查看mysql慢查询的状态</p>\n<p>执行结果会把是否开启慢查询、慢查询的秒数、慢查询日志等信息打印在屏幕上。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*查看慢查询时间 */</span> </span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> &quot;long_query_time&quot;;默认<span class=\"number\">10</span>s </span><br><span class=\"line\"><span class=\"comment\">/*查看慢查询配置情况 */</span> </span><br><span class=\"line\"><span class=\"keyword\">show</span> status <span class=\"keyword\">like</span> &quot;%slow_queries%&quot;; </span><br><span class=\"line\"><span class=\"comment\">/*查看慢查询日志路径 */</span> </span><br><span class=\"line\"> <span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> &quot;%slow%&quot;; </span><br></pre></td></tr></table></figure>\n\n<p><strong>执行一次慢查询操作</strong></p>\n<p>其实想要执行一次有实际意义的慢查询比较困难，因为在自己测试的时候，就算查询有20万条数据的海量表，也只需要0.几秒。可以通过如下语句代替：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> SLEEP(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看慢查询的数量</strong></p>\n<p>通过如下sql语句，来查看一共执行过几次慢查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> status <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>mysql日志的配置：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">注意：这些日文件在mysql重启的时候才会生成</span> <span class=\"string\"></span></span><br><span class=\"line\"><span class=\"comment\">#记录所有sql语句 </span></span><br><span class=\"line\"><span class=\"attr\">log</span>=<span class=\"string\">E:/mysqllog/mysql.log </span></span><br><span class=\"line\"><span class=\"comment\">#记录数据库启动关闭信息，以及运行过程中产生的错误信息 </span></span><br><span class=\"line\"><span class=\"meta\">log-error</span>=<span class=\"string\">E:/mysqllog/myerror.log </span></span><br><span class=\"line\"><span class=\"comment\"># 记录除select语句之外的所有sql语句到日志中，可以用来恢复数据文件 </span></span><br><span class=\"line\"><span class=\"meta\">log-bin</span>=<span class=\"string\">E:/mysqllog/bin </span></span><br><span class=\"line\"><span class=\"comment\">#记录查询慢的sql语句 </span></span><br><span class=\"line\"><span class=\"meta\">log-slow-queries</span>=<span class=\"string\">E:/mysqllog/slow.log  </span></span><br><span class=\"line\"><span class=\"comment\">#慢查询时间 </span></span><br><span class=\"line\"><span class=\"attr\">long_query_time</span>=<span class=\"string\">2 </span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"分析慢查询日志\">分析慢查询日志</span></h2><p><strong>方式一:通过工具分析</strong></p>\n<p>MySQL自带了mysqldumpslow工具用来分析slow query日志，除此之外，还有一些好用的开源工具。比如MyProfi(下载地址:<a href=\"http://sourceforge.net/projects/myprofi/)%E3%80%81mysql-log-filter%EF%BC%8C%E5%BD%93%E7%84%B6%E8%BF%98%E6%9C%89mysqlsla\">http://sourceforge.net/projects/myprofi/)、mysql-log-filter，当然还有mysqlsla</a></p>\n<p>以下是mysqldumpslow常用参数说明，详细的可应用mysqldumpslow -help查询。</p>\n<ul>\n<li>-s，是表示按照何种方式排序，c、t、l、r分别是按照记录次数、时间、查询时间、返回的记录数来排序（从大到小），ac、at、al、ar表示相应的倒叙。</li>\n<li>-t，是top n的意思，即为返回前面多少条数据。</li>\n<li>-g，后边可以写一个正则匹配模式，大小写不敏感。</li>\n</ul>\n<p>接下来就是用mysql自带的慢查询工具mysqldumpslow分析了（mysql的bin目录下），我这里的日志文件名字是host-slow.log。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 列出记录次数最多的<span class=\"number\">10</span>个<span class=\"keyword\">sql</span>语句</span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s c <span class=\"operator\">-</span>t <span class=\"number\">10</span> host<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出返回记录集最多的<span class=\"number\">10</span>个<span class=\"keyword\">sql</span>语句</span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s r <span class=\"operator\">-</span>t <span class=\"number\">10</span> host<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 按照时间返回前<span class=\"number\">10</span>条里面含有左连接的<span class=\"keyword\">sql</span>语句</span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s t <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">-</span>g &quot;left join&quot; host<span class=\"operator\">-</span>slow.log</span><br></pre></td></tr></table></figure>\n\n<p>使用mysqldumpslow命令可以非常明确的得到各种我们需要的查询语句，对MySQL查询语句的监控、分析、优化起到非常大的帮助。</p>\n<p><strong>mysqldumpslow的分析结果详解：</strong></p>\n<ul>\n<li>Count：表示该类型的语句执行次数，上图中表示select语句执行了2次。</li>\n<li>Time：表示该类型的语句执行的平均时间（总计时间）</li>\n<li>Lock：锁时间0s。</li>\n<li>Rows：单次返回的结果数是1000条记录，2次总共返回2000条记录。</li>\n</ul>\n<p>通过这个工具就可以查询出来哪些sql语句是慢SQL，从而反馈研发进行优化，比如加索引，该应用的实现方式等。</p>\n<p><strong>方式二:直接分析mysql慢查询日志</strong></p>\n<p>日志部分内容如下:</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> Time: 121017 17:38:54 </span><br><span class=\"line\"><span class=\"params\">#</span> User@Host: root[root] @ localhost [127.0.0.1] </span><br><span class=\"line\"><span class=\"params\">#</span> Query<span class=\"built_in\">_</span>time: 3.794217 Lock<span class=\"built_in\">_</span>time: 0.000000 Rows<span class=\"built_in\">_</span>sent: 1 Rows<span class=\"built_in\">_</span>examined: 4194304 </span><br><span class=\"line\">SET timestamp=1350466734; </span><br><span class=\"line\">select * from wei where text=&#x27;orange&#x27;; </span><br><span class=\"line\"><span class=\"params\">#</span> Time: 121017 17:46:22 </span><br><span class=\"line\"><span class=\"params\">#</span> User@Host: root[root] @ localhost [127.0.0.1] </span><br><span class=\"line\"><span class=\"params\">#</span> Query<span class=\"built_in\">_</span>time: 3.819219 Lock<span class=\"built_in\">_</span>time: 0.000000 Rows<span class=\"built_in\">_</span>sent: 0 Rows<span class=\"built_in\">_</span>examined: 4194304 </span><br><span class=\"line\">SET timestamp=1350467182; </span><br><span class=\"line\">select * from wei where text=&#x27;xishizhaohua&#x27;; </span><br></pre></td></tr></table></figure>\n\n<p>其实定位到了慢查询语句就已经完成了一大不了，执行explain或者desc命令查看慢查询语句，如下图：</p>\n<p><img src=\"/2022/03/02/db-resource/mysql/mysql-base/mysql-base-monitor/71439.png\" alt=\"img\"></p>\n<p>问题很明显，解决方式也很明显，建索引了。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">create</span> index text_index <span class=\"keyword\">on</span> wei(text);  </span><br><span class=\"line\">Query OK, <span class=\"number\">4194304</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">1</span> min <span class=\"number\">58.07</span> sec)  </span><br><span class=\"line\">Records: <span class=\"number\">4194304</span> Duplicates: <span class=\"number\">0</span> Warnings: <span class=\"number\">0</span> </span><br></pre></td></tr></table></figure>\n\n<p>然后在执行查询操作，用时明显少了很多。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> wei <span class=\"keyword\">where</span> text<span class=\"operator\">=</span><span class=\"string\">&#x27;orange&#x27;</span>; </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">---------+--------+ </span></span><br><span class=\"line\"><span class=\"operator\">|</span> id   <span class=\"operator\">|</span> text  <span class=\"operator\">|</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">---------+--------+ </span></span><br><span class=\"line\"><span class=\"operator\">|</span> <span class=\"number\">4103519</span> <span class=\"operator\">|</span> orange <span class=\"operator\">|</span> </span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">---------+--------+ </span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.33</span> sec) </span><br></pre></td></tr></table></figure>\n\n<p>Slow Query日志，虽然帮助你记录了那些执行过了的SQL语句。但它不是万能的，意义可能没有你想象的那么大。它只告诉了你哪些语句慢，但是为什么慢?具体 原因，还是需要你自己去分析，不断的调试。也许，你只需要换一条更有效的sql语句，也许你只需简单地增加一个索引，但也有可能你需要调整你应用程序的设 计方案。比如，上面那条语句是很明显，它检查了600多万行数据。不幸的是，并不是每条语句都这么明显。也许还有别的原因，比如:</p>\n<ul>\n<li>*锁表了，导致查询处于等态状态。lock_time显示了查询等待锁被翻译的时间</li>\n<li>*数据或索引没有被缓存。常见于第一次启动服务器或者服务器没有调优</li>\n<li>*备份数据库，I/O变慢</li>\n<li>*也许同时运行了其它的查询，减少了当前查询</li>\n</ul>\n<h2><span id=\"常见慢sql排查\">常见慢SQL排查</span></h2><ol>\n<li>不使用子查询<br>SELECT <em><strong>FROM t1 WHERE id (SELECT id FROM t2 WHERE name=’hechunyang’);<br>子查询在MySQL5.5版本里，内部执行计划器是这样执行的：先查外表再匹配内表，而不是先查内表t2，当外表的数据很大时，查询速度会非常慢。在MariaDB10/MySQL5.6版本里，采用join关联方式对其进行了优化，这条SQL会自动转换为 SELECT t1.</strong></em> FROM t1 JOIN t2 ON t1.id = t2.id;<br>但请注意的是：优化只针对SELECT有效，对UPDATE/DELETE子 查询无效， 生产环境尽量应避免使用子查询。</li>\n<li>避免函数索引<br>SELECT <em><strong>FROM t WHERE YEAR(d) &gt;= 2016;<br>由于MySQL不像Oracle那样⽀持函数索引，即使d字段有索引，也会直接全表扫描。应改为 &gt; SELECT</strong></em> FROM t WHERE d &gt;= ‘2016-01-01’;</li>\n<li>用IN来替换OR低效查询<br>慢SELECT <em><strong>FROM t WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30;<br>高效查询 &gt; SELECT</strong></em> FROM t WHERE LOC_IN IN (10,20,30);</li>\n<li>LIKE双百分号无法使用到索引<br>SELECT <em><strong>FROM t WHERE name LIKE ‘%de%’;<br>使用SELECT</strong></em> FROM t WHERE name LIKE ‘de%’;</li>\n<li>分组统计可以禁止排序<br>SELECT goods_id,count(<em><strong>) FROM t GROUP BY goods_id;<br>默认情况下，MySQL对所有GROUP BY col1，col2…的字段进⾏排序。如果查询包括GROUP BY，想要避免排序结果的消耗，则可以指定ORDER BY NULL禁止排序。使用SELECT goods_id,count(</strong></em>) FROM t GROUP BY goods_id ORDER BY NULL;</li>\n<li>禁止不必要的ORDER BY排序<br>SELECT count(1) FROM user u LEFT JOIN user_info i ON u.id = i.user_id WHERE 1 = 1 ORDER BY u.create_time DESC;使用SELECT count(1) FROM user u LEFT JOIN user_info i ON u.id = i.user_id;</li>\n<li></li>\n</ol>\n","categories":["mysql"],"tags":["mysql"]},{"title":"Kafka丢失消息","url":"/2021/07/22/technology-stack/mq/kafka/message-lose/","content":"<h1><span id=\"kafka-为什么会丢消息\">Kafka 为什么会丢消息</span></h1><ul>\n<li>1、如何知道有消息丢失？</li>\n<li>2、哪些环节可能丢消息？</li>\n<li>3、如何确保消息不丢失？</li>\n</ul>\n<p><strong>引入 MQ 消息中间件最直接的目的：系统解耦以及流量控制（削峰填谷）</strong></p>\n<ul>\n<li><strong>系统解耦：</strong> 上下游系统之间的通信相互依赖，利用 MQ 消息队列可以隔离上下游环境变化带来的不稳定因素。</li>\n<li><strong>流量控制：</strong> 超高并发场景中，引入 MQ 可以实现流量 “削峰填谷” 的作用以及服务异步处理，不至于打崩服务。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>引入 MQ 同样带来其他问题：数据一致性。</strong></p>\n<blockquote>\n<p>在分布式系统中，如果两个节点之间存在数据同步，就会带来数据一致性的问题。消息生产端发送消息到 MQ 再到消息消费端需要保证消息不丢失。</p>\n</blockquote>\n<ul>\n<li><img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/3d3a7bbc049f4fd6bbc8ce4e7e1d69db.jpeg\" alt=\"img\"></li>\n</ul>\n<p><strong>所以在使用 MQ 消息队列时，需要考虑这 3 个问题：</strong></p>\n<ul>\n<li>如何知道有消息丢失？</li>\n<li>哪些环节可能丢消息？</li>\n<li>如何确保消息不丢失？</li>\n</ul>\n<h1><span id=\"如何知道有消息丢失\">如何知道有消息丢失？</span></h1><p><strong>如何感知消息是否丢失了？可总结如下：</strong></p>\n<ol>\n<li><strong>他人反馈：</strong> 运营、PM 反馈消息丢失。</li>\n<li><strong>监控报警：</strong> 监控指定指标，即时报警人工调整。Kafka 集群异常、Broker 宕机、Broker 磁盘挂载问题、消费者异常导致消息积压等都会给用户直接感觉是消息丢失了。</li>\n</ol>\n<p><strong>案例：舆情分析中数据采集同步</strong></p>\n<ul>\n<li><p><img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/8a9b9984e5c34e4f8276f0ed72707a5b.jpeg\" alt=\"img\"></p>\n</li>\n<li><p>PM 可自己下发采集调度指令，去采集特定数据。</p>\n</li>\n<li><p>PM 可通过 ES 近实时查询对应数据，若没相应数据可再次下发指令。</p>\n</li>\n</ul>\n<blockquote>\n<p>当感知消息丢失了，那就需要一种机制来检查消息是否丢失。</p>\n</blockquote>\n<h1><span id=\"检索消息\">检索消息</span></h1><p><strong>运维工具有：</strong></p>\n<ol>\n<li><p>查看 Kafka 消费位置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; 基于 Spring Boot + MyBatis Plus + Vue &amp; Element 实现的后台管理系统 + 用户小程序，支持 RBAC 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; * 项目地址：&lt;https://gitee.com/zhijiantianya/ruoyi-vue-pro&gt;</span><br><span class=\"line\">&gt; * 视频教程：&lt;https://doc.iocoder.cn/video/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个topic的message数量</span></span><br><span class=\"line\">$ ./kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic test_topic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 基于 Spring Cloud Alibaba + Gateway + Nacos + RocketMQ + Vue &amp; Element 实现的后台管理系统 + 用户小程序，支持 RBAC 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; * 项目地址：&lt;https://gitee.com/zhijiantianya/yudao-cloud&gt;</span><br><span class=\"line\">&gt; * 视频教程：&lt;https://doc.iocoder.cn/video/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看consumer Group列表</span></span><br><span class=\"line\">$ ./kafka-consumer-groups.sh  --list  --bootstrap-server 192.168.88.108:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 offset 消费情况</span></span><br><span class=\"line\">$ ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group console-consumer-1152 --describe</span><br><span class=\"line\">GROUP                 TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                                           HOST            CLIENT-ID</span><br><span class=\"line\">console-consumer-1152 test_topic      0          -               4               -               consumer-console-consumer-1152-1-2703ea2b-b62d-4cfd-8950-34e8c321b942 /127.0.0.1      consumer-console-consumer-1152-1</span><br></pre></td></tr></table></figure></li>\n<li><p>利用工具：Kafka Tools</p>\n<p><img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/712a15c6b2cf41c6a0aee31d78e396d2.jpeg\" alt=\"img\"></p>\n</li>\n</ol>\n<h1><span id=\"哪些环节可能丢消息\">哪些环节可能丢消息？</span></h1><p>一条消息从生产到消费完成经历 3 个环节：消息生产者、消息中间件、消息消费者。</p>\n<p><img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/85acbf6c50934a2abfb6a686f7f4f493.jpeg\" alt=\"img\"></p>\n<p>哪个环节都有可能出现消息丢失问题。</p>\n<h2><span id=\"生产端\">生产端</span></h2><p><strong>首先要认识到 Kafka 生产端发送消息流程：</strong></p>\n<blockquote>\n<p>调用 send() 方法时，不会立刻把消息发送出去，而是缓存起来，选择恰当时机把缓存里的消息划分成一批数据，通过 Sender 线程按批次发送给服务端 Broker。</p>\n</blockquote>\n<p><img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/a72054cdc9824ee6836961b317dee186.jpeg\" alt=\"img\"></p>\n<p><strong>此环节丢失消息的场景有：</strong> 即导致 Producer 消息没有发送成功</p>\n<ol>\n<li><strong>网络波动：</strong> 生产者与服务端之间的链路不可达，发送超时。现象是：各端状态正常，但消费端就是没有消费消息，就像丢失消息一样。</li>\n<li></li>\n<li>*<strong>解决措施：</strong> *重试 props.put(“retries”, “10”);</li>\n<li><strong>不恰当配置：</strong> 发送消息无 ack 确认; 发送消息失败无回调，无日志。producer.send(new ProducerRecord&lt;&gt;(topic, messageKey, messageStr),<br>new CallBack(){…});</li>\n<li></li>\n<li>*<strong>解决措施：</strong> *设置 acks=1 或者 acks=all。发送消息设置回调。</li>\n</ol>\n<p><strong>回顾下重要的参数：</strong> <strong>acks</strong></p>\n<ul>\n<li>acks=0：不需要等待服务器的确认. 这是 retries 设置无效. 响应里来自服务端的 offset 总是 -1，producer只管发不管发送成功与否。延迟低，容易丢失数据。</li>\n<li>acks=1：表示 leader 写入成功（但是并没有刷新到磁盘）后即向 producer 响应。延迟中等，一旦 leader 副本挂了，就会丢失数据。</li>\n<li>acks=all：等待数据完成副本的复制, 等同于 -1. 假如需要保证消息不丢失, 需要使用该设置. 同时需要设置 unclean.leader.election.enable 为 true, 保证当 ISR 列表为空时, 选择其他存活的副本作为新的 leader.</li>\n</ul>\n<h2><span id=\"服务端\">服务端</span></h2><p><strong>先来了解下 Kafka Broker 写入数据的过程：</strong></p>\n<ol>\n<li><p>Broker 接收到一批数据，会先写入内存 PageCache（OS Cache）中。</p>\n</li>\n<li><p>操作系统会隔段时间把 OS Cache 中数据进行刷盘，这个过程会是 <strong>「异步批量刷盘」</strong> 。</p>\n<img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/e4c910ecd8f943dfb0bd2bbfcc584783.jpeg\" alt=\"img\" style=\"zoom:50%;\">\n\n<p><strong>这里就有个隐患，如果数据写入 PageCache 后 Kafka Broker宕机会怎样？机子宕机/掉电？</strong></p>\n<ul>\n<li><strong>Kafka Broker 宕机：</strong> 消息不会丢失。因为数据已经写入 PageCache，只等待操作系统刷盘即可。</li>\n<li><strong>机子宕机/掉电：</strong> 消息会丢失。因为数据仍在内存里，内存RAM 掉电后就会丢失数据。</li>\n</ul>\n<blockquote>\n<p><strong>解决方案</strong> <strong>：使用带蓄电池后备电源的缓存 cache，防止系统断电异常。</strong></p>\n<p>对比学习 MySQL 的 “双1” 策略，基本不使用这个策略，因为 “双1” 会导致频繁的 I/O 操作，也是最慢的一种。</p>\n<p>对比学习 Redis 的 AOF 策略，默认且推荐的策略：<strong>Everysec(AOF_FSYNC_EVERYSEC) 每一秒钟保存一次（默认）：</strong> 。每个写命令执行完, 只是先把日志写到 AOF 文件的内存缓冲区, 每隔一秒把缓冲区中的内容写入磁盘。</p>\n</blockquote>\n<p><strong>拓展：Kafka 日志刷盘机制</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐采用默认值，即不配置该配置，交由操作系统自行决定何时落盘，以提升性能。</span></span><br><span class=\"line\"><span class=\"comment\"># 针对 broker 配置：</span></span><br><span class=\"line\">log.flush.interval.messages=10000 <span class=\"comment\"># 日志落盘消息条数间隔，即每接收到一定条数消息，即进行log落盘。</span></span><br><span class=\"line\">log.flush.interval.ms=1000        <span class=\"comment\"># 日志落盘时间间隔，单位ms，即每隔一定时间，即进行log落盘。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 针对 topic 配置：</span></span><br><span class=\"line\">flush.messages.flush.ms=1000  <span class=\"comment\"># topic下每1s刷盘</span></span><br><span class=\"line\">flush.messages=1              <span class=\"comment\"># topic下每个消息都落盘</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 Linux 后台线程执行配置</span></span><br><span class=\"line\">$ sysctl -a | grep dirty</span><br><span class=\"line\">vm.dirty_background_bytes = 0</span><br><span class=\"line\">vm.dirty_background_ratio = 10      <span class=\"comment\"># 表示当脏页占总内存的的百分比超过这个值时，后台线程开始刷新脏页。</span></span><br><span class=\"line\">vm.dirty_bytes = 0</span><br><span class=\"line\">vm.dirty_expire_centisecs = 3000    <span class=\"comment\"># 表示脏数据多久会被刷新到磁盘上（30秒）。</span></span><br><span class=\"line\">vm.dirty_ratio = 20</span><br><span class=\"line\">vm.dirty_writeback_centisecs = 500  <span class=\"comment\"># 表示多久唤醒一次刷新脏页的后台线程（５秒）。</span></span><br><span class=\"line\">vm.dirtytime_expire_seconds = 43200</span><br></pre></td></tr></table></figure>\n\n<p><strong>Broker 的可靠性需要依赖其多副本机制：</strong> 一般副本数 3 个（配置参数：replication.factor=3）</p>\n<ul>\n<li><p>Leader Partition 副本：提供对外读写机制。</p>\n</li>\n<li><p>Follower Partition 副本：同步 Leader 数据。</p>\n<img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/974bb622338c44d4b10f1e6237a1009c.jpeg\" alt=\"img\" style=\"zoom:50%;\">\n\n<p><strong>副本之间的数据同步也可能出现问题：数据丢失问题和数据不一致问题。</strong></p>\n<p><strong>解决方案：ISR 和 Epoch 机制</strong></p>\n<ul>\n<li><strong>ISR(In-Sync Replicas) ：</strong> 当 Le``ader 宕机，可以从 ISR 中选择一个 Follower 作为 Leader。</li>\n<li><strong>Epoch 机制：</strong> 解决 Leader 副本高水位更新和 Follower 副本高水位更新在时间上是存在错配问题。<strong>Tips: Kafka 0.11.x 版本才引入 leader epoch 机制解决高水位机制弊端。</strong></li>\n</ul>\n<p><strong>对应需要的配置参数如下：</strong></p>\n<ol>\n<li><strong>acks=-1 或者 acks=all：</strong> 必须所有副本均同步到消息，才能表明消息发送成功。</li>\n<li><strong>replication.factor &gt;= 3：</strong> 副本数至少有 3 个。</li>\n<li><strong>min.insync.replicas &gt; 1：</strong> 代表消息至少写入 2个副本才算发送成功。前提需要 acks=-1。举个栗子：Leader 宕机了，至少要保证 ISR 中有一个 Follower，这样这个Follwer被选举为Leader 且不会丢失数据。公式：replication.factor = min.insync.replicas + 1</li>\n<li><strong>unclean.leader.election.enable=false：</strong> 防止不在 ISR 中的 Follower 被选举为 Leader。<strong>Kafka 0.11.0.0版本开始默认 unclean.leader.election.enable=false</strong></li>\n</ol>\n</li>\n</ul>\n<h2><span id=\"消费端\">消费端</span></h2><p><strong>消费端消息丢失场景有：</strong></p>\n<ol>\n<li><strong>消息堆积：</strong> 几个分区的消息都没消费，就跟丢消息一样。</li>\n<li></li>\n<li><strong>解决措施：</strong> 一般问题都出在消费端，尽量提高客户端的消费速度，消费逻辑另起线程进行处理。</li>\n<li><strong>自动提交：</strong> 消费端拉下一批数据，正在处理中自动提交了 offset，这时候消费端宕机了; 重启后，拉到新一批数据，而上一批数据却没处理完。</li>\n<li></li>\n<li><strong>解决措施：</strong> 取消自动提交 auto.commit = false，改为手动 ack。</li>\n<li><strong>心跳超时，引发 Rebalance：</strong> 客户端心跳超时，触发 Rebalance被踢出消费组。如果只有这一个客户端，那消息就不会被消费了。<strong>同时避免两次 poll 的间隔时间超过阈值：</strong></li>\n<li></li>\n<li>max.poll.records：降低该参数值，建议远远小于 &lt;单个线程每秒消费的条数&gt; * &lt;消费线程的个数&gt; * &lt;max.poll.interval.ms&gt; 的积。</li>\n<li>max.poll.interval.ms: 该值要大于 &lt;max.poll.records&gt; / (&lt;单个线程每秒消费的条数&gt; * &lt;消费线程的个数&gt;) 的值。</li>\n<li><strong>解决措施：</strong> 客户端版本升级至 0.10.2 以上版本。</li>\n</ol>\n<p><strong>案例：凡曾遇到数据同步时，消息中的文本需经过</strong> <strong>NLP 的 NER 分析，再同步到 ES。</strong></p>\n<p><strong>这个过程的主要流程是</strong></p>\n<img src=\"/2021/07/22/technology-stack/mq/kafka/message-lose/b8ca777b0fef4b7fb087290eed3f5541.jpeg\" alt=\"img\" style=\"zoom:50%;\">\n\n<ol>\n<li>数据同步程序从 Kafka 中拉取消息。</li>\n<li>数据同步程序将消息内的文本发送的 NER 进行分析，得到特征数组。</li>\n<li>数据同步程序将消息同步给 ES。</li>\n</ol>\n<p><strong>现象：线上数据同步程序运行一段时间后，消息就不消费了。</strong></p>\n<ul>\n<li><strong>排查日志：</strong> 发现有 Rebalance 日志，怀疑是客户端消费太慢被踢出了消费组。</li>\n<li><strong>本地测试：</strong> 发现运行一段时间也会出现 Rebalance，且 NLP的NER 服务访问 HTTP 500 报错。</li>\n<li><strong>得出结论：</strong> 因NER服务异常，导致数据同步程序消费超时。<strong>且当时客户端版本为 v0.10.1，Consumer 没有独立线程维持心跳，而是把心跳维持与 poll 接口耦合在一起，从而也会造成心跳超时。</strong></li>\n</ul>\n<p><strong>当时解决措施是：</strong></p>\n<ol>\n<li><strong>session.timeout.ms：</strong> 设置为 25s，当时没有升级客户端版本，怕带来其他问题。</li>\n<li><strong>熔断机制：</strong> 增加 Hystrix，超过 3 次服务调用异常就熔断，保护客户端正常消费数据。</li>\n</ol>\n</li>\n</ol>\n<h1><span id=\"如何确保消息不丢失\">如何确保消息不丢失</span></h1><ol>\n<li>熟悉消息从发送到消费的每个阶段</li>\n<li>监控报警 Kafka 集群</li>\n<li>熟悉方案 “MQ 可靠消息投递”</li>\n</ol>\n<p><strong>总结</strong></p>\n<ol>\n<li><strong>生产端：</strong></li>\n</ol>\n<ul>\n<li>设置重试：props.put(“retries”, “10”);</li>\n<li>设置 acks=all</li>\n<li>设置回调：producer.send(msg, new CallBack(){…});</li>\n</ul>\n<p><strong>2.Broker：</strong></p>\n<ul>\n<li>内存：使用带蓄电池后备电源的缓存 cache。</li>\n<li>Kafka 版本 0.11.x 以上：支持 Epoch 机制。</li>\n<li><strong>replication.factor &gt;= 3：</strong> 副本数至少有 3 个。</li>\n<li><strong>min.insync.replicas &gt; 1：</strong> 代表消息至少写入 2个副本才算发送成功。前提需要 acks=-1。</li>\n<li><strong>unclean.leader.election.enable=false：</strong> 防止不在 ISR 中的 Follower 被选举为 Leader。</li>\n</ul>\n<p><strong>3.消费端</strong></p>\n<ul>\n<li>客户端版本升级至 0.10.2 以上版本。</li>\n<li>取消自动提交 auto.commit = false，改为手动 ack。</li>\n<li>尽量提高客户端的消费速度，消费逻辑另起线程进行处理</li>\n</ul>\n","categories":["mq"],"tags":["mq","kafka"]},{"title":"CentOS7巡检脚本","url":"/2022/03/06/os/Linux/centos/general-script/server-check-script/","content":"<h1><span id=\"能一键运行的实用巡检脚本tmpchecksh\">能一键运行的实用巡检脚本（/tmp/check.sh）：</span></h1><span id=\"more\"></span>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############################################################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> File Name: /tmp/check.sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Version: V1.0</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Author: dahai.wang</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Organization: China.SiChuan.ChengDu</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Created Time : 2022-09-11</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Description: Linux Check Script.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############################################################</span></span></span><br><span class=\"line\">export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">[ $(id -u) -gt 0 ] &amp;&amp; echo &quot;请用root用户执行此脚本！&quot; &amp;&amp; exit 1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">uploadHostDailyCheckApi=<span class=\"string\">&quot;http://10.0.0.1:8080/api/uploadHostDailyCheck&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">uploadHostDailyCheckReportApi=<span class=\"string\">&quot;http://10.0.0.1:8080/api/uploadHostDailyCheckReport&quot;</span></span></span><br><span class=\"line\">centosVersion=$(awk &#x27;&#123;print $(NF-1)&#125;&#x27; /etc/redhat-release)</span><br><span class=\"line\">VERSION=`date +%F`</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">日志相关</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">PROGPATH=`<span class=\"built_in\">echo</span> <span class=\"variable\">$0</span> | sed -e <span class=\"string\">&#x27;s,[\\\\/][^\\\\/][^\\\\/]*$,,&#x27;</span>`</span></span><br><span class=\"line\">PROGPATH=&#x27;/tmp&#x27;</span><br><span class=\"line\">[ -f $PROGPATH ] &amp;&amp; PROGPATH=&quot;.&quot;</span><br><span class=\"line\">LOGPATH=&quot;$PROGPATH/log&quot;</span><br><span class=\"line\">[ -e $LOGPATH ] || mkdir $LOGPATH</span><br><span class=\"line\">RESULTFILE=&quot;$LOGPATH/HostDailyCheck-`hostname`-`date +%Y%m%d`.txt&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">定义报表的全局变量</span></span><br><span class=\"line\">report_DateTime=&quot;&quot;  </span><br><span class=\"line\">report_Hostname=&quot;&quot;   </span><br><span class=\"line\">report_OSRelease=&quot;&quot;    </span><br><span class=\"line\">report_Kernel=&quot;&quot;   </span><br><span class=\"line\">report_Language=&quot;&quot;   </span><br><span class=\"line\">report_LastReboot=&quot;&quot;   </span><br><span class=\"line\">report_Uptime=&quot;&quot;   </span><br><span class=\"line\">report_CPUs=&quot;&quot;  </span><br><span class=\"line\">report_CPUType=&quot;&quot;  </span><br><span class=\"line\">report_Arch=&quot;&quot;   </span><br><span class=\"line\">report_MemTotal=&quot;&quot;    </span><br><span class=\"line\">report_MemFree=&quot;&quot;   </span><br><span class=\"line\">report_MemUsedPercent=&quot;&quot;   </span><br><span class=\"line\">report_DiskTotal=&quot;&quot;    </span><br><span class=\"line\">report_DiskFree=&quot;&quot;    </span><br><span class=\"line\">report_DiskUsedPercent=&quot;&quot;    </span><br><span class=\"line\">report_InodeTotal=&quot;&quot;   </span><br><span class=\"line\">report_InodeFree=&quot;&quot; </span><br><span class=\"line\">report_InodeUsedPercent=&quot;&quot;  </span><br><span class=\"line\">report_IP=&quot;&quot;  </span><br><span class=\"line\">report_MAC=&quot;&quot;   </span><br><span class=\"line\">report_Gateway=&quot;&quot;   </span><br><span class=\"line\">report_DNS=&quot;&quot;   </span><br><span class=\"line\">report_Listen=&quot;&quot;   </span><br><span class=\"line\">report_Selinux=&quot;&quot;  </span><br><span class=\"line\">report_Firewall=&quot;&quot;   </span><br><span class=\"line\">report_USERs=&quot;&quot;   </span><br><span class=\"line\">report_USEREmptyPassword=&quot;&quot;  </span><br><span class=\"line\">report_USERTheSameUID=&quot;&quot;      </span><br><span class=\"line\">report_PasswordExpiry=&quot;&quot;    </span><br><span class=\"line\">report_RootUser=&quot;&quot;   </span><br><span class=\"line\">report_Sudoers=&quot;&quot;   </span><br><span class=\"line\">report_SSHAuthorized=&quot;&quot;   </span><br><span class=\"line\">report_SSHDProtocolVersion=&quot;&quot;    </span><br><span class=\"line\">report_SSHDPermitRootLogin=&quot;&quot;   </span><br><span class=\"line\">report_DefunctProsess=&quot;&quot;    </span><br><span class=\"line\">report_SelfInitiatedService=&quot;&quot;   </span><br><span class=\"line\">report_SelfInitiatedProgram=&quot;&quot;   </span><br><span class=\"line\">report_RuningService=&quot;&quot;           </span><br><span class=\"line\">report_Crontab=&quot;&quot;    </span><br><span class=\"line\">report_Syslog=&quot;&quot;   </span><br><span class=\"line\">report_SNMP=&quot;&quot;    </span><br><span class=\"line\">report_NTP=&quot;&quot;    </span><br><span class=\"line\">report_JDK=&quot;&quot;   </span><br><span class=\"line\">function version()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;系统巡检脚本：Version $VERSION&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getCpuStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************CPU检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">Physical_CPUs=$(grep &quot;physical id&quot; /proc/cpuinfo| sort | uniq | wc -l)</span><br><span class=\"line\">Virt_CPUs=$(grep &quot;processor&quot; /proc/cpuinfo | wc -l)</span><br><span class=\"line\">CPU_Kernels=$(grep &quot;cores&quot; /proc/cpuinfo|uniq| awk -F &#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class=\"line\">CPU_Type=$(grep &quot;model name&quot; /proc/cpuinfo | awk -F &#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | sort | uniq)</span><br><span class=\"line\">CPU_Arch=$(uname -m)</span><br><span class=\"line\">echo &quot;物理CPU个数:$Physical_CPUs&quot;</span><br><span class=\"line\">echo &quot;逻辑CPU个数:$Virt_CPUs&quot;</span><br><span class=\"line\">echo &quot;每CPU核心数:$CPU_Kernels&quot;</span><br><span class=\"line\">echo &quot;    CPU型号:$CPU_Type&quot;</span><br><span class=\"line\">echo &quot;    CPU架构:$CPU_Arch&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_CPUs=$Virt_CPUs </span><br><span class=\"line\">report_CPUType=$CPU_Type </span><br><span class=\"line\">report_Arch=$CPU_Arch   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getMemStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo  -e &quot;\\033[33m*******************************************************内存检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">if [[ $centosVersion &lt; 7 ]];then</span><br><span class=\"line\">free -mo</span><br><span class=\"line\">else</span><br><span class=\"line\">free -h</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">MemTotal=$(grep MemTotal /proc/meminfo| awk &#x27;&#123;print $2&#125;&#x27;)  #KB</span><br><span class=\"line\">MemFree=$(grep MemFree /proc/meminfo| awk &#x27;&#123;print $2&#125;&#x27;)    #KB</span><br><span class=\"line\">let MemUsed=MemTotal-MemFree</span><br><span class=\"line\">MemPercent=$(awk &quot;BEGIN &#123;if($MemTotal==0)&#123;printf 100&#125;else&#123;printf \\&quot;%.2f\\&quot;,$MemUsed*100/$MemTotal&#125;&#125;&quot;)</span><br><span class=\"line\">report_MemTotal=&quot;$((MemTotal/1024))&quot;&quot;MB&quot;      </span><br><span class=\"line\">report_MemFree=&quot;$((MemFree/1024))&quot;&quot;MB&quot;       </span><br><span class=\"line\">report_MemUsedPercent=&quot;$(awk &quot;BEGIN &#123;if($MemTotal==0)&#123;printf 100&#125;else&#123;printf \\&quot;%.2f\\&quot;,$MemUsed*100/$MemTotal&#125;&#125;&quot;)&quot;&quot;%&quot;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getDiskStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************磁盘检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">df -hiP | sed &#x27;s/Mounted on/Mounted/&#x27;&gt; /tmp/inode</span><br><span class=\"line\">df -hTP | sed &#x27;s/Mounted on/Mounted/&#x27;&gt; /tmp/disk </span><br><span class=\"line\">join /tmp/disk /tmp/inode | awk &#x27;&#123;print $1,$2,&quot;|&quot;,$3,$4,$5,$6,&quot;|&quot;,$8,$9,$10,$11,&quot;|&quot;,$12&#125;&#x27;| column -t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">diskdata=$(df -TP | sed &#x27;1d&#x27; | awk &#x27;$2!=&quot;tmpfs&quot;&#123;print&#125;&#x27;) #KB</span><br><span class=\"line\">disktotal=$(echo &quot;$diskdata&quot; | awk &#x27;&#123;total+=$3&#125;END&#123;print total&#125;&#x27;) #KB</span><br><span class=\"line\">diskused=$(echo &quot;$diskdata&quot; | awk &#x27;&#123;total+=$4&#125;END&#123;print total&#125;&#x27;)  #KB</span><br><span class=\"line\">diskfree=$((disktotal-diskused)) #KB</span><br><span class=\"line\">diskusedpercent=$(echo $disktotal $diskused | awk &#x27;&#123;if($1==0)&#123;printf 100&#125;else&#123;printf &quot;%.2f&quot;,$2*100/$1&#125;&#125;&#x27;) </span><br><span class=\"line\">inodedata=$(df -iTP | sed &#x27;1d&#x27; | awk &#x27;$2!=&quot;tmpfs&quot;&#123;print&#125;&#x27;)</span><br><span class=\"line\">inodetotal=$(echo &quot;$inodedata&quot; | awk &#x27;&#123;total+=$3&#125;END&#123;print total&#125;&#x27;)</span><br><span class=\"line\">inodeused=$(echo &quot;$inodedata&quot; | awk &#x27;&#123;total+=$4&#125;END&#123;print total&#125;&#x27;)</span><br><span class=\"line\">inodefree=$((inodetotal-inodeused))</span><br><span class=\"line\">inodeusedpercent=$(echo $inodetotal $inodeused | awk &#x27;&#123;if($1==0)&#123;printf 100&#125;else&#123;printf &quot;%.2f&quot;,$2*100/$1&#125;&#125;&#x27;)</span><br><span class=\"line\">report_DiskTotal=$((disktotal/1024/1024))&quot;GB&quot; </span><br><span class=\"line\">report_DiskFree=$((diskfree/1024/1024))&quot;GB&quot;   </span><br><span class=\"line\">report_DiskUsedPercent=&quot;$diskusedpercent&quot;&quot;%&quot;   </span><br><span class=\"line\">report_InodeTotal=$((inodetotal/1000))&quot;K&quot;     </span><br><span class=\"line\">report_InodeFree=$((inodefree/1000))&quot;K&quot;       </span><br><span class=\"line\">report_InodeUsedPercent=&quot;$inodeusedpercent&quot;&quot;%&quot; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getSystemStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************系统检查 *******************************************************\\033[0m&quot;</span><br><span class=\"line\">if [ -e /etc/sysconfig/i18n ];then</span><br><span class=\"line\">default_LANG=&quot;$(grep &quot;LANG=&quot; /etc/sysconfig/i18n | grep -v &quot;^#&quot; | awk -F &#x27;&quot;&#x27; &#x27;&#123;print $2&#125;&#x27;)&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">default_LANG=$LANG</span><br><span class=\"line\">fi</span><br><span class=\"line\">export LANG=&quot;en_US.UTF-8&quot;</span><br><span class=\"line\">Release=$(cat /etc/redhat-release 2&gt;/dev/null)</span><br><span class=\"line\">Kernel=$(uname -r)</span><br><span class=\"line\">OS=$(uname -o)</span><br><span class=\"line\">Hostname=$(uname -n)</span><br><span class=\"line\">SELinux=$(/usr/sbin/sestatus | grep &quot;SELinux status: &quot; | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class=\"line\">LastReboot=$(who -b | awk &#x27;&#123;print $3,$4&#125;&#x27;)</span><br><span class=\"line\">uptime=$(uptime | sed &#x27;s/.*up \\([^,]*\\), .*/\\1/&#x27;)</span><br><span class=\"line\">echo &quot;     系统：$OS&quot;</span><br><span class=\"line\">echo &quot; 发行版本：$Release&quot;</span><br><span class=\"line\">echo &quot;     内核：$Kernel&quot;</span><br><span class=\"line\">echo &quot;   主机名：$Hostname&quot;</span><br><span class=\"line\">echo &quot;  SELinux：$SELinux&quot;</span><br><span class=\"line\">echo &quot;语言/编码：$default_LANG&quot;</span><br><span class=\"line\">echo &quot; 当前时间：$(date +&#x27;%F %T&#x27;)&quot;</span><br><span class=\"line\">echo &quot; 最后启动：$LastReboot&quot;</span><br><span class=\"line\">echo &quot; 运行时间：$uptime&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_DateTime=$(date +&quot;%F %T&quot;)  </span><br><span class=\"line\">report_Hostname=&quot;$Hostname&quot;     </span><br><span class=\"line\">report_OSRelease=&quot;$Release&quot;       </span><br><span class=\"line\">report_Kernel=&quot;$Kernel&quot;           </span><br><span class=\"line\">report_Language=&quot;$default_LANG&quot;   </span><br><span class=\"line\">report_LastReboot=&quot;$LastReboot&quot;   </span><br><span class=\"line\">report_Uptime=&quot;$uptime&quot;          </span><br><span class=\"line\">report_Selinux=&quot;$SELinux&quot;</span><br><span class=\"line\">export LANG=&quot;$default_LANG&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getServiceStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************服务检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">if [[ $centosVersion &gt; 7 ]];then</span><br><span class=\"line\">conf=$(systemctl list-unit-files --type=service --state=enabled --no-pager | grep &quot;enabled&quot;)</span><br><span class=\"line\">process=$(systemctl list-units --type=service --state=running --no-pager | grep &quot;.service&quot;)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_SelfInitiatedService=&quot;$(echo &quot;$conf&quot; | wc -l)&quot;     </span><br><span class=\"line\">report_RuningService=&quot;$(echo &quot;$process&quot; | wc -l)&quot;         </span><br><span class=\"line\">else</span><br><span class=\"line\">conf=$(/sbin/chkconfig | grep -E &quot;:on|:启用&quot;)</span><br><span class=\"line\">process=$(/sbin/service --status-all 2&gt;/dev/null | grep -E &quot;is running|正在运行&quot;)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_SelfInitiatedService=&quot;$(echo &quot;$conf&quot; | wc -l)&quot;      </span><br><span class=\"line\">report_RuningService=&quot;$(echo &quot;$process&quot; | wc -l)&quot;          </span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;服务配置&quot;</span><br><span class=\"line\">echo &quot;--------&quot;</span><br><span class=\"line\">echo &quot;$conf&quot;  | column -t</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;正在运行的服务&quot;</span><br><span class=\"line\">echo &quot;--------------&quot;</span><br><span class=\"line\">echo &quot;$process&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getAutoStartStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************自启动检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">conf=$(grep -v &quot;^#&quot; /etc/rc.d/rc.local| sed &#x27;/^$/d&#x27;)</span><br><span class=\"line\">echo &quot;$conf&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_SelfInitiatedProgram=&quot;$(echo $conf | wc -l)&quot;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getLoginStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************登录检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">last | head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getNetworkStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************网络检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">if [[ $centosVersion &lt; 7 ]];then</span><br><span class=\"line\">/sbin/ifconfig -a | grep -v packets | grep -v collisions | grep -v inet6</span><br><span class=\"line\">else</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ip a</span></span><br><span class=\"line\">for i in $(ip link | grep BROADCAST | awk -F: &#x27;&#123;print $2&#125;&#x27;);do ip add show $i | grep -E &quot;BROADCAST|global&quot;| awk &#x27;&#123;print $2&#125;&#x27; | tr &#x27;\\n&#x27; &#x27; &#x27; ;echo &quot;&quot; ;done</span><br><span class=\"line\">fi</span><br><span class=\"line\">GATEWAY=$(ip route | grep default | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class=\"line\">DNS=$(grep nameserver /etc/resolv.conf| grep -v &quot;#&quot; | awk &#x27;&#123;print $2&#125;&#x27; | tr &#x27;\\n&#x27; &#x27;,&#x27; | sed &#x27;s/,$//&#x27;)</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;网关：$GATEWAY &quot;</span><br><span class=\"line\">echo &quot;DNS：$DNS&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">IP=$(ip -f inet addr | grep -v 127.0.0.1 |  grep inet | awk &#x27;&#123;print $NF,$2&#125;&#x27; | tr &#x27;\\n&#x27; &#x27;,&#x27; | sed &#x27;s/,$//&#x27;)</span><br><span class=\"line\">MAC=$(ip link | grep -v &quot;LOOPBACK\\|loopback&quot; | awk &#x27;&#123;print $2&#125;&#x27; | sed &#x27;N;s/\\n//&#x27; | tr &#x27;\\n&#x27; &#x27;,&#x27; | sed &#x27;s/,$//&#x27;)</span><br><span class=\"line\">report_IP=&quot;$IP&quot;         </span><br><span class=\"line\">report_MAC=$MAC          </span><br><span class=\"line\">report_Gateway=&quot;$GATEWAY&quot; </span><br><span class=\"line\">report_DNS=&quot;$DNS&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">ping -c 4 www.baidu.com &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">if [ $? -eq 0 ];then</span><br><span class=\"line\">echo &quot;网络连接：正常&quot; </span><br><span class=\"line\">else</span><br><span class=\"line\">echo &quot;网络连接：异常&quot;</span><br><span class=\"line\">fi </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getListenStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo  -e &quot;\\033[33m*******************************************************监听检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">TCPListen=$(ss -ntul | column -t)</span><br><span class=\"line\">echo &quot;$TCPListen&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_Listen=&quot;$(echo &quot;$TCPListen&quot;| sed &#x27;1d&#x27; | awk &#x27;/tcp/ &#123;print $5&#125;&#x27; | awk -F: &#x27;&#123;print $NF&#125;&#x27; | sort | uniq | wc -l)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getCronStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************计划任务检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">Crontab=0</span><br><span class=\"line\">for shell in $(grep -v &quot;/sbin/nologin&quot; /etc/shells);do</span><br><span class=\"line\">for user in $(grep &quot;$shell&quot; /etc/passwd| awk -F: &#x27;&#123;print $1&#125;&#x27;);do</span><br><span class=\"line\">crontab -l -u $user &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">status=$?</span><br><span class=\"line\">if [ $status -eq 0 ];then</span><br><span class=\"line\">echo &quot;$user&quot;</span><br><span class=\"line\">echo &quot;--------&quot;</span><br><span class=\"line\">crontab -l -u $user</span><br><span class=\"line\">let Crontab=Crontab+$(crontab -l -u $user | wc -l)</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">计划任务</span></span><br><span class=\"line\">find /etc/cron* -type f | xargs -i ls -l &#123;&#125; | column  -t</span><br><span class=\"line\">let Crontab=Crontab+$(find /etc/cron* -type f | wc -l)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_Crontab=&quot;$Crontab&quot;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getHowLongAgo()&#123;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 计算一个时间戳离现在有多久了</span></span><br><span class=\"line\">datetime=&quot;$*&quot;</span><br><span class=\"line\">[ -z &quot;$datetime&quot; ] &amp;&amp; echo `stat /etc/passwd|awk &quot;NR==6&quot;`</span><br><span class=\"line\">Timestamp=$(date +%s -d &quot;$datetime&quot;)  </span><br><span class=\"line\">Now_Timestamp=$(date +%s)</span><br><span class=\"line\">Difference_Timestamp=$(($Now_Timestamp-$Timestamp))</span><br><span class=\"line\">days=0;hours=0;minutes=0;</span><br><span class=\"line\">sec_in_day=$((60*60*24));</span><br><span class=\"line\">sec_in_hour=$((60*60));</span><br><span class=\"line\">sec_in_minute=60</span><br><span class=\"line\">while (( $(($Difference_Timestamp-$sec_in_day)) &gt; 1 ))</span><br><span class=\"line\">do</span><br><span class=\"line\">let Difference_Timestamp=Difference_Timestamp-sec_in_day</span><br><span class=\"line\">let days++</span><br><span class=\"line\">done</span><br><span class=\"line\">while (( $(($Difference_Timestamp-$sec_in_hour)) &gt; 1 ))</span><br><span class=\"line\">do</span><br><span class=\"line\">let Difference_Timestamp=Difference_Timestamp-sec_in_hour</span><br><span class=\"line\">let hours++</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;$days 天 $hours 小时前&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getUserLastLogin()&#123;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取用户最近一次登录的时间，含年份</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 很遗憾last命令不支持显示年份，只有<span class=\"string\">&quot;last -t YYYYMMDDHHMMSS&quot;</span>表示某个时间之间的登录，我</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 们只能用最笨的方法了，对比今天之前和今年元旦之前（或者去年之前和前年之前……）某个用户</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 登录次数，如果登录统计次数有变化，则说明最近一次登录是今年。</span></span><br><span class=\"line\">username=$1</span><br><span class=\"line\">: $&#123;username:=&quot;`whoami`&quot;&#125;</span><br><span class=\"line\">thisYear=$(date +%Y)</span><br><span class=\"line\">oldesYear=$(last | tail -n1 | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class=\"line\">while(( $thisYear &gt;= $oldesYear));do</span><br><span class=\"line\">loginBeforeToday=$(last $username | grep $username | wc -l)</span><br><span class=\"line\">loginBeforeNewYearsDayOfThisYear=$(last $username -t $thisYear&quot;0101000000&quot; | grep $username | wc -l)</span><br><span class=\"line\">if [ $loginBeforeToday -eq 0 ];then</span><br><span class=\"line\">echo &quot;从未登录过&quot;</span><br><span class=\"line\">break</span><br><span class=\"line\">elif [ $loginBeforeToday -gt $loginBeforeNewYearsDayOfThisYear ];then</span><br><span class=\"line\">lastDateTime=$(last -i $username | head -n1 | awk &#x27;&#123;for(i=4;i&lt;(NF-2);i++)printf&quot;%s &quot;,$i&#125;&#x27;)&quot; $thisYear&quot; </span><br><span class=\"line\">lastDateTime=$(date &quot;+%Y-%m-%d %H:%M:%S&quot; -d &quot;$lastDateTime&quot;)</span><br><span class=\"line\">echo &quot;$lastDateTime&quot;</span><br><span class=\"line\">break</span><br><span class=\"line\">else</span><br><span class=\"line\">thisYear=$((thisYear-1))</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getUserStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************用户检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">/etc/passwd 最后修改时间</span></span><br><span class=\"line\">pwdfile=&quot;$(cat /etc/passwd)&quot;</span><br><span class=\"line\">Modify=$(stat /etc/passwd | grep Modify | tr &#x27;.&#x27; &#x27; &#x27; | awk &#x27;&#123;print $2,$3&#125;&#x27;)</span><br><span class=\"line\">echo &quot;/etc/passwd: $Modify ($(getHowLongAgo $Modify))&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;特权用户&quot;</span><br><span class=\"line\">echo &quot;--------&quot;</span><br><span class=\"line\">RootUser=&quot;&quot;</span><br><span class=\"line\">for user in $(echo &quot;$pwdfile&quot; | awk -F: &#x27;&#123;print $1&#125;&#x27;);do</span><br><span class=\"line\">if [ $(id -u $user) -eq 0 ];then</span><br><span class=\"line\">echo &quot;$user&quot;</span><br><span class=\"line\">RootUser=&quot;$RootUser,$user&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;用户列表&quot;</span><br><span class=\"line\">echo &quot;--------&quot;</span><br><span class=\"line\">USERs=0</span><br><span class=\"line\">echo &quot;$(</span><br><span class=\"line\">echo &quot;用户名 UID GID HOME SHELL 最后一次登录&quot;</span><br><span class=\"line\">for shell in $(grep -v &quot;/sbin/nologin&quot; /etc/shells);do</span><br><span class=\"line\">for username in $(grep &quot;$shell&quot; /etc/passwd| awk -F: &#x27;&#123;print $1&#125;&#x27;);do</span><br><span class=\"line\">userLastLogin=&quot;$(getUserLastLogin $username)&quot;</span><br><span class=\"line\">echo &quot;$pwdfile&quot; | grep -w &quot;$username&quot; |grep -w &quot;$shell&quot;| awk -F: -v lastlogin=&quot;$(echo &quot;$userLastLogin&quot; | tr &#x27; &#x27; &#x27;_&#x27;)&quot; &#x27;&#123;print $1,$3,$4,$6,$7,lastlogin&#125;&#x27;</span><br><span class=\"line\">done</span><br><span class=\"line\">let USERs=USERs+$(echo &quot;$pwdfile&quot; | grep &quot;$shell&quot;| wc -l)</span><br><span class=\"line\">done</span><br><span class=\"line\">)&quot; | column -t</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;空密码用户&quot;</span><br><span class=\"line\">echo &quot;----------&quot;</span><br><span class=\"line\">USEREmptyPassword=&quot;&quot;</span><br><span class=\"line\">for shell in $(grep -v &quot;/sbin/nologin&quot; /etc/shells);do</span><br><span class=\"line\">for user in $(echo &quot;$pwdfile&quot; | grep &quot;$shell&quot; | cut -d: -f1);do</span><br><span class=\"line\">r=$(awk -F: &#x27;$2==&quot;!!&quot;&#123;print $1&#125;&#x27; /etc/shadow | grep -w $user)</span><br><span class=\"line\">if [ ! -z $r ];then</span><br><span class=\"line\">echo $r</span><br><span class=\"line\">USEREmptyPassword=&quot;$USEREmptyPassword,&quot;$r</span><br><span class=\"line\">fi</span><br><span class=\"line\">done    </span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;相同ID的用户&quot;</span><br><span class=\"line\">echo &quot;------------&quot;</span><br><span class=\"line\">USERTheSameUID=&quot;&quot;</span><br><span class=\"line\">UIDs=$(cut -d: -f3 /etc/passwd | sort | uniq -c | awk &#x27;$1&gt;1&#123;print $2&#125;&#x27;)</span><br><span class=\"line\">for uid in $UIDs;do</span><br><span class=\"line\">echo -n &quot;$uid&quot;;</span><br><span class=\"line\">USERTheSameUID=&quot;$uid&quot;</span><br><span class=\"line\">r=$(awk -F: &#x27;ORS=&quot;&quot;;$3==&#x27;&quot;$uid&quot;&#x27;&#123;print &quot;:&quot;,$1&#125;&#x27; /etc/passwd)</span><br><span class=\"line\">echo &quot;$r&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">USERTheSameUID=&quot;$USERTheSameUID $r,&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_USERs=&quot;$USERs&quot;  </span><br><span class=\"line\">report_USEREmptyPassword=$(echo $USEREmptyPassword | sed &#x27;s/^,//&#x27;) </span><br><span class=\"line\">report_USERTheSameUID=$(echo $USERTheSameUID | sed &#x27;s/,$//&#x27;) </span><br><span class=\"line\">report_RootUser=$(echo $RootUser | sed &#x27;s/^,//&#x27;)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getPasswordStatus &#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************密码检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">pwdfile=&quot;$(cat /etc/passwd)&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;密码过期检查&quot;</span><br><span class=\"line\">echo &quot;------------&quot;</span><br><span class=\"line\">result=&quot;&quot;</span><br><span class=\"line\">for shell in $(grep -v &quot;/sbin/nologin&quot; /etc/shells);do</span><br><span class=\"line\">for user in $(echo &quot;$pwdfile&quot; | grep &quot;$shell&quot; | cut -d: -f1);do</span><br><span class=\"line\">get_expiry_date=$(/usr/bin/chage -l $user | grep &#x27;Password expires&#x27; | cut -d: -f2)</span><br><span class=\"line\">if [[ $get_expiry_date = &#x27; never&#x27; || $get_expiry_date = &#x27;never&#x27; ]];then</span><br><span class=\"line\">printf &quot;%-15s 永不过期\\n&quot; $user</span><br><span class=\"line\">result=&quot;$result,$user:never&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">password_expiry_date=$(date -d &quot;$get_expiry_date&quot; &quot;+%s&quot;)</span><br><span class=\"line\">current_date=$(date &quot;+%s&quot;)</span><br><span class=\"line\">diff=$(($password_expiry_date-$current_date))</span><br><span class=\"line\">let DAYS=$(($diff/(60*60*24)))</span><br><span class=\"line\">printf &quot;%-15s %s天后过期\\n&quot; $user $DAYS</span><br><span class=\"line\">result=&quot;$result,$user:$DAYS days&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br><span class=\"line\">done</span><br><span class=\"line\">report_PasswordExpiry=$(echo $result | sed &#x27;s/^,//&#x27;)</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;密码策略检查&quot;</span><br><span class=\"line\">echo &quot;------------&quot;</span><br><span class=\"line\">grep -v &quot;#&quot; /etc/login.defs | grep -E &quot;PASS_MAX_DAYS|PASS_MIN_DAYS|PASS_MIN_LEN|PASS_WARN_AGE&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getSudoersStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************Sudoers检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">conf=$(grep -v &quot;^#&quot; /etc/sudoers| grep -v &quot;^Defaults&quot; | sed &#x27;/^$/d&#x27;)</span><br><span class=\"line\">echo &quot;$conf&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报表信息</span></span><br><span class=\"line\">report_Sudoers=&quot;$(echo $conf | wc -l)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getInstalledStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************软件检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">rpm -qa --last | head | column -t </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getProcessStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************进程检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">if [ $(ps -ef | grep defunct | grep -v grep | wc -l) -ge 1 ];then</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;僵尸进程&quot;;</span><br><span class=\"line\">echo &quot;--------&quot;</span><br><span class=\"line\">ps -ef | head -n1</span><br><span class=\"line\">ps -ef | grep defunct | grep -v grep</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;内存占用TOP10&quot;</span><br><span class=\"line\">echo &quot;-------------&quot;</span><br><span class=\"line\">echo -e &quot;PID %MEM RSS COMMAND</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">(ps aux | awk <span class=\"string\">&#x27;&#123;print $2, $4, $6, $11&#125;&#x27;</span> | sort -k3rn | head -n 10 )<span class=\"string\">&quot;| column -t</span></span> </span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;CPU占用TOP10&quot;</span><br><span class=\"line\">echo &quot;------------&quot;</span><br><span class=\"line\">top b -n1 | head -17 | tail -11</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">报表信息</span></span></span><br><span class=\"line\">report_DefunctProsess=&quot;$(ps -ef | grep defunct | grep -v grep|wc -l)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getJDKStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************JDK检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">java -version 2&gt;/dev/null</span><br><span class=\"line\">if [ $? -eq 0 ];then</span><br><span class=\"line\">java -version 2&gt;&amp;1</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;JAVA_HOME=\\&quot;$JAVA_HOME\\&quot;&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">报表信息</span></span></span><br><span class=\"line\">report_JDK=&quot;$(java -version 2&gt;&amp;1 | grep version | awk &#x27;&#123;print $1,$3&#125;&#x27; | tr -d &#x27;&quot;&#x27;)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getSyslogStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************syslog检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">echo &quot;服务状态：$(getState rsyslog)&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;/etc/rsyslog.conf&quot;</span><br><span class=\"line\">echo &quot;-----------------&quot;</span><br><span class=\"line\">cat /etc/rsyslog.conf 2&gt;/dev/null | grep -v &quot;^#&quot; | grep -v &quot;^\\\\$&quot; | sed &#x27;/^$/d&#x27;  | column -t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">报表信息</span></span></span><br><span class=\"line\">report_Syslog=&quot;$(getState rsyslog)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getFirewallStatus()&#123;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m******************************************************* 防火墙检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">防火墙状态，策略等</span></span></span><br><span class=\"line\">if [[ $centosVersion = 7 ]];then</span><br><span class=\"line\">systemctl status firewalld &gt;/dev/null  2&gt;&amp;1</span><br><span class=\"line\">status=$?</span><br><span class=\"line\">if [ $status -eq 0 ];then</span><br><span class=\"line\">s=&quot;active&quot;</span><br><span class=\"line\">elif [ $status -eq 3 ];then</span><br><span class=\"line\">s=&quot;inactive&quot;</span><br><span class=\"line\">elif [ $status -eq 4 ];then</span><br><span class=\"line\">s=&quot;permission denied&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">s=&quot;unknown&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">else</span><br><span class=\"line\">s=&quot;$(getState iptables)&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;firewalld: $s&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;/etc/sysconfig/firewalld&quot;</span><br><span class=\"line\">echo &quot;-----------------------&quot;</span><br><span class=\"line\">cat /etc/sysconfig/firewalld 2&gt;/dev/null</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">报表信息</span></span></span><br><span class=\"line\">report_Firewall=&quot;$s&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getSNMPStatus()&#123;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">SNMP服务状态，配置等</span></span></span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************SNMP检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">status=&quot;$(getState snmpd)&quot;</span><br><span class=\"line\">echo &quot;服务状态：$status&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">if [ -e /etc/snmp/snmpd.conf ];then</span><br><span class=\"line\">echo &quot;/etc/snmp/snmpd.conf&quot;</span><br><span class=\"line\">echo &quot;--------------------&quot;</span><br><span class=\"line\">cat /etc/snmp/snmpd.conf 2&gt;/dev/null | grep -v &quot;^#&quot; | sed &#x27;/^$/d&#x27;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">报表信息</span></span></span><br><span class=\"line\">report_SNMP=&quot;$(getState snmpd)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getState()&#123;</span><br><span class=\"line\">if [[ $centosVersion &lt; 7 ]];then</span><br><span class=\"line\">if [ -e &quot;/etc/init.d/$1&quot; ];then</span><br><span class=\"line\">if [ `/etc/init.d/$1 status 2&gt;/dev/null | grep -E &quot;is running|正在运行&quot; | wc -l` -ge 1 ];then</span><br><span class=\"line\">r=&quot;active&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\"> r=&quot;inactive&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">else</span><br><span class=\"line\">r=&quot;unknown&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">else</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">CentOS 7+</span></span></span><br><span class=\"line\">r=&quot;$(systemctl is-active $1 2&gt;&amp;1)&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;$r&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getSSHStatus()&#123;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">SSHD服务状态，配置,受信任主机等</span></span></span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************SSH检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">检查受信任主机</span></span></span><br><span class=\"line\">pwdfile=&quot;$(cat /etc/passwd)&quot;</span><br><span class=\"line\">echo &quot;服务状态：$(getState sshd)&quot;</span><br><span class=\"line\">Protocol_Version=$(cat /etc/ssh/sshd_config | grep Protocol | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class=\"line\">echo &quot;SSH协议版本：$Protocol_Version&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;信任主机&quot;</span><br><span class=\"line\">echo &quot;--------&quot;</span><br><span class=\"line\">authorized=0</span><br><span class=\"line\">for user in $(echo &quot;$pwdfile&quot; | grep /bin/bash | awk -F: &#x27;&#123;print $1&#125;&#x27;);do</span><br><span class=\"line\">authorize_file=$(echo &quot;$pwdfile&quot; | grep -w $user | awk -F: &#x27;&#123;printf $6&quot;/.ssh/authorized_keys&quot;&#125;&#x27;)</span><br><span class=\"line\">authorized_host=$(cat $authorize_file 2&gt;/dev/null | awk &#x27;&#123;print $3&#125;&#x27; | tr &#x27;\\n&#x27; &#x27;,&#x27; | sed &#x27;s/,$//&#x27;)</span><br><span class=\"line\">if [ ! -z $authorized_host ];then</span><br><span class=\"line\">echo &quot;$user 授权 \\&quot;$authorized_host\\&quot; 无密码访问&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">let authorized=authorized+$(cat $authorize_file 2&gt;/dev/null | awk &#x27;&#123;print $3&#125;&#x27;|wc -l)</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;是否允许ROOT远程登录&quot;</span><br><span class=\"line\">echo &quot;--------------------&quot;</span><br><span class=\"line\">config=$(cat /etc/ssh/sshd_config | grep PermitRootLogin)</span><br><span class=\"line\">firstChar=$&#123;config:0:1&#125;</span><br><span class=\"line\">if [ $firstChar == &quot;#&quot; ];then</span><br><span class=\"line\">PermitRootLogin=&quot;yes&quot; </span><br><span class=\"line\">else</span><br><span class=\"line\">PermitRootLogin=$(echo $config | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;PermitRootLogin $PermitRootLogin&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;/etc/ssh/sshd_config&quot;</span><br><span class=\"line\">echo &quot;--------------------&quot;</span><br><span class=\"line\">cat /etc/ssh/sshd_config | grep -v &quot;^#&quot; | sed &#x27;/^$/d&#x27;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">报表信息</span></span></span><br><span class=\"line\">report_SSHAuthorized=&quot;$authorized&quot;   </span><br><span class=\"line\">report_SSHDProtocolVersion=&quot;$Protocol_Version&quot;   </span><br><span class=\"line\">report_SSHDPermitRootLogin=&quot;$PermitRootLogin&quot;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getNTPStatus()&#123;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">NTP服务状态，当前时间，配置等</span></span></span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo -e &quot;\\033[33m*******************************************************NTP检查*******************************************************\\033[0m&quot;</span><br><span class=\"line\">if [ -e /etc/ntp.conf ];then</span><br><span class=\"line\">echo &quot;服务状态：$(getState ntpd)&quot;</span><br><span class=\"line\">echo &quot;&quot;</span><br><span class=\"line\">echo &quot;/etc/ntp.conf&quot;</span><br><span class=\"line\">cat /etc/ntp.conf 2&gt;/dev/null | grep -v &quot;^#&quot; | sed &#x27;/^$/d&#x27;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">报表信息</span></span></span><br><span class=\"line\">report_NTP=&quot;$(getState ntpd)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function uploadHostDailyCheckReport()&#123;</span><br><span class=\"line\">json=&quot;&#123;</span><br><span class=\"line\">\\&quot;DateTime\\&quot;:\\&quot;$report_DateTime\\&quot;,</span><br><span class=\"line\">\\&quot;Hostname\\&quot;:\\&quot;$report_Hostname\\&quot;,</span><br><span class=\"line\">\\&quot;OSRelease\\&quot;:\\&quot;$report_OSRelease\\&quot;,</span><br><span class=\"line\">\\&quot;Kernel\\&quot;:\\&quot;$report_Kernel\\&quot;,</span><br><span class=\"line\">\\&quot;Language\\&quot;:\\&quot;$report_Language\\&quot;,</span><br><span class=\"line\">\\&quot;LastReboot\\&quot;:\\&quot;$report_LastReboot\\&quot;,</span><br><span class=\"line\">\\&quot;Uptime\\&quot;:\\&quot;$report_Uptime\\&quot;,</span><br><span class=\"line\">\\&quot;CPUs\\&quot;:\\&quot;$report_CPUs\\&quot;,</span><br><span class=\"line\">\\&quot;CPUType\\&quot;:\\&quot;$report_CPUType\\&quot;,</span><br><span class=\"line\">\\&quot;Arch\\&quot;:\\&quot;$report_Arch\\&quot;,</span><br><span class=\"line\">\\&quot;MemTotal\\&quot;:\\&quot;$report_MemTotal\\&quot;,</span><br><span class=\"line\">\\&quot;MemFree\\&quot;:\\&quot;$report_MemFree\\&quot;,</span><br><span class=\"line\">\\&quot;MemUsedPercent\\&quot;:\\&quot;$report_MemUsedPercent\\&quot;,</span><br><span class=\"line\">\\&quot;DiskTotal\\&quot;:\\&quot;$report_DiskTotal\\&quot;,</span><br><span class=\"line\">\\&quot;DiskFree\\&quot;:\\&quot;$report_DiskFree\\&quot;,</span><br><span class=\"line\">\\&quot;DiskUsedPercent\\&quot;:\\&quot;$report_DiskUsedPercent\\&quot;,</span><br><span class=\"line\">\\&quot;InodeTotal\\&quot;:\\&quot;$report_InodeTotal\\&quot;,</span><br><span class=\"line\">\\&quot;InodeFree\\&quot;:\\&quot;$report_InodeFree\\&quot;,</span><br><span class=\"line\">\\&quot;InodeUsedPercent\\&quot;:\\&quot;$report_InodeUsedPercent\\&quot;,</span><br><span class=\"line\">\\&quot;IP\\&quot;:\\&quot;$report_IP\\&quot;,</span><br><span class=\"line\">\\&quot;MAC\\&quot;:\\&quot;$report_MAC\\&quot;,</span><br><span class=\"line\">\\&quot;Gateway\\&quot;:\\&quot;$report_Gateway\\&quot;,</span><br><span class=\"line\">\\&quot;DNS\\&quot;:\\&quot;$report_DNS\\&quot;,</span><br><span class=\"line\">\\&quot;Listen\\&quot;:\\&quot;$report_Listen\\&quot;,</span><br><span class=\"line\">\\&quot;Selinux\\&quot;:\\&quot;$report_Selinux\\&quot;,</span><br><span class=\"line\">\\&quot;Firewall\\&quot;:\\&quot;$report_Firewall\\&quot;,</span><br><span class=\"line\">\\&quot;USERs\\&quot;:\\&quot;$report_USERs\\&quot;,</span><br><span class=\"line\">\\&quot;USEREmptyPassword\\&quot;:\\&quot;$report_USEREmptyPassword\\&quot;,</span><br><span class=\"line\">\\&quot;USERTheSameUID\\&quot;:\\&quot;$report_USERTheSameUID\\&quot;,</span><br><span class=\"line\">\\&quot;PasswordExpiry\\&quot;:\\&quot;$report_PasswordExpiry\\&quot;,</span><br><span class=\"line\">\\&quot;RootUser\\&quot;:\\&quot;$report_RootUser\\&quot;,</span><br><span class=\"line\">\\&quot;Sudoers\\&quot;:\\&quot;$report_Sudoers\\&quot;,</span><br><span class=\"line\">\\&quot;SSHAuthorized\\&quot;:\\&quot;$report_SSHAuthorized\\&quot;,</span><br><span class=\"line\">\\&quot;SSHDProtocolVersion\\&quot;:\\&quot;$report_SSHDProtocolVersion\\&quot;,</span><br><span class=\"line\">\\&quot;SSHDPermitRootLogin\\&quot;:\\&quot;$report_SSHDPermitRootLogin\\&quot;,</span><br><span class=\"line\">\\&quot;DefunctProsess\\&quot;:\\&quot;$report_DefunctProsess\\&quot;,</span><br><span class=\"line\">\\&quot;SelfInitiatedService\\&quot;:\\&quot;$report_SelfInitiatedService\\&quot;,</span><br><span class=\"line\">\\&quot;SelfInitiatedProgram\\&quot;:\\&quot;$report_SelfInitiatedProgram\\&quot;,</span><br><span class=\"line\">\\&quot;RuningService\\&quot;:\\&quot;$report_RuningService\\&quot;,</span><br><span class=\"line\">\\&quot;Crontab\\&quot;:\\&quot;$report_Crontab\\&quot;,</span><br><span class=\"line\">\\&quot;Syslog\\&quot;:\\&quot;$report_Syslog\\&quot;,</span><br><span class=\"line\">\\&quot;SNMP\\&quot;:\\&quot;$report_SNMP\\&quot;,</span><br><span class=\"line\">\\&quot;NTP\\&quot;:\\&quot;$report_NTP\\&quot;,</span><br><span class=\"line\">\\&quot;JDK\\&quot;:\\&quot;$report_JDK\\&quot;</span><br><span class=\"line\">&#125;&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">echo &quot;</span><span class=\"variable\">$json</span><span class=\"string\">&quot;</span></span> </span><br><span class=\"line\">curl -l -H &quot;Content-type: application/json&quot; -X POST -d &quot;$json&quot; &quot;$uploadHostDailyCheckReportApi&quot; 2&gt;/dev/null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function check()&#123;</span><br><span class=\"line\">version</span><br><span class=\"line\">getSystemStatus</span><br><span class=\"line\">getCpuStatus</span><br><span class=\"line\">getMemStatus</span><br><span class=\"line\">getDiskStatus</span><br><span class=\"line\">getNetworkStatus</span><br><span class=\"line\">getListenStatus</span><br><span class=\"line\">getProcessStatus</span><br><span class=\"line\">getServiceStatus</span><br><span class=\"line\">getAutoStartStatus</span><br><span class=\"line\">getLoginStatus</span><br><span class=\"line\">getCronStatus</span><br><span class=\"line\">getUserStatus</span><br><span class=\"line\">getPasswordStatus</span><br><span class=\"line\">getSudoersStatus</span><br><span class=\"line\">getJDKStatus</span><br><span class=\"line\">getFirewallStatus</span><br><span class=\"line\">getSSHStatus</span><br><span class=\"line\">getSyslogStatus</span><br><span class=\"line\">getSNMPStatus</span><br><span class=\"line\">getNTPStatus</span><br><span class=\"line\">getInstalledStatus</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">执行检查并保存检查结果</span></span></span><br><span class=\"line\">check &gt; $RESULTFILE</span><br><span class=\"line\">echo -e &quot;\\033[44;37m 检查结果存放在：$RESULTFILE \\033[0m&quot;#上传检查结果的文件#curl -F &quot;filename=@$RESULTFILE&quot; &quot;$uploadHostDailyCheckApi&quot; 2&gt;/dev/nullGI</span><br></pre></td></tr></table></figure>","categories":["os"],"tags":["os","linux"]},{"title":"搭建LDAP服务器详细流程","url":"/2021/09/15/tools/LDAP-build/","content":"<h1><span id=\"搭建ldap服务器详细流程\">搭建LDAP服务器详细流程</span></h1><h1><span id=\"简介\">简介</span></h1><p>LDAP（轻量级目录访问协议，Lightweight Directory Access Protocol)是实现提供被称为目录服务的信息服务。目录服务是一种特殊的数据库系统，其专门针对读取，浏览和搜索操作进行了特定的优化。目录一般用来包含描述性的，基于属性的信息并支持精细复杂的过滤能力。目录一般不支持通用数据库针对大量更新操作操作需要的复杂的事务管理或回卷策略。而目录服务的更新则一般都非常简单。这种目录可以存储包括个人信息、web链结、jpeg图像等各种信息。为了访问存储在目录中的信息，就需要使用运行在TCP/IP 之上的访问协议—LDAP。</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"安装软件\">安装软件</span></h1> <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y openldap openldap-clients openldap-servers vim</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"配置openldap-server\">配置openldap server</span></h2><p>将下述配置文件中的 Manager 和 my-domain 更换成自己的命名</p>\n<ol>\n<li><p><strong>配置 /etc/openldap/slapd.d/cn=config/olcDatabase={1}monitor.ldif</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/openldap/slapd.d/cn=config/olcDatabase=&#123;1&#125;monitor.ldif</span><br></pre></td></tr></table></figure>\n\n<p>将下述内容</p>\n<p><img src=\"/2021/09/15/tools/LDAP-build/ea3dbd9d2d5e488ab478daab447abd0a.png\" alt=\"在这里插入图片描述\"></p>\n<p>替换为：</p>\n<p><img src=\"/2021/09/15/tools/LDAP-build/f44a9407458445398c8cb0b7a2f2a15c.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><strong>配置 /etc/openldap/slapd.d/cn=config/olcDatabase={2}hdb.ldif</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/openldap/slapd.d/cn=config/olcDatabase=&#123;2&#125;hdb.ldif</span><br></pre></td></tr></table></figure>\n\n<p>将 下述内容</p>\n<img src=\"/2021/09/15/tools/LDAP-build/image-20220924155432168.png\" alt=\"image-20220924155432168\" style=\"zoom:50%;\">\n\n<p>进行替换，并在最后一行添加认证密码123123: <code>olcRootPW: 123123</code></p>\n<p><img src=\"/2021/09/15/tools/LDAP-build/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGk5qKm6aOeMTIz,size_18,color_FFFFFF,t_70,g_se,x_16.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><strong>拷贝DB文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"><span class=\"comment\"># 修改该文件的权限</span></span><br><span class=\"line\">chown -R ldap:ldap /var/lib/ldap/</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试配置文件是否正确</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">slaptest -u</span><br></pre></td></tr></table></figure>\n\n<p>如果出现下图样式表示成功，可以忽略error，只要出现 succeeded 即表示成功。</p>\n<p><img src=\"/2021/09/15/tools/LDAP-build/5c5fdb7639aa489990aef36f2bb825d1.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><strong>启动服务</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start slapd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> slapd</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>添加scheme表</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -D <span class=\"string\">&quot;cn=config&quot;</span> -f /etc/openldap/schema/nis.ldif</span><br><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -D <span class=\"string\">&quot;cn=config&quot;</span> -f /etc/openldap/schema/cosine.ldif</span><br><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif</span><br><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif</span><br><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2><span id=\"创建baseldif文件\">创建base.ldif文件</span></h2><ol>\n<li><p><strong>创建 base.ldif 文件</strong></p>\n</li>\n<li><p><strong>拷贝如下内容到创建的 base.ldif 文件</strong></p>\n<p>其中的 codesweet 和前面的步骤统一，如果一开始你是设置其他名称，则此处的 codesweet 更换成你的名称，保持统一即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dn: dc=codesweet,dc=com</span><br><span class=\"line\">\tobjectClass: dcObject</span><br><span class=\"line\">\tobjectClass: organization</span><br><span class=\"line\">\to: codesweet.com</span><br><span class=\"line\">\tdc: codesweet</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdn: ou=users,dc=codesweet,dc=com</span><br><span class=\"line\">\tobjectClass: organizationalUnit</span><br><span class=\"line\">\tobjectClass: top</span><br><span class=\"line\">\tou: users</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdn: ou=groups,dc=codesweet,dc=com</span><br><span class=\"line\">\tobjectClass: organizationalUnit</span><br><span class=\"line\">\tobjectClass: top</span><br><span class=\"line\">\tou: groups</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>建立最基础的目录结构</strong></p>\n</li>\n<li><p>ldapadd -x -W -D “cn=admin,dc=dianxin,dc=com” -f base.ldif </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ldapadd -x -W -D <span class=\"string\">&quot;cn=admin,dc=dianxin,dc=com&quot;</span> -f base.ldif</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>配置 ldap.conf</strong></p>\n<p>将 <code>BASE</code> 和 <code>URL</code> 的注释去除，更换为下述，<code>BASE</code> 中的第一个 dc 更换为 codesweet，<code>URL</code> 中的IP 地址更换为你的云服务器的公网 IP。</p>\n<p><img src=\"/2021/09/15/tools/LDAP-build/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGk5qKm6aOeMTIz,size_20,color_FFFFFF,t_70,g_se,x_16.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n<h2><span id=\"管理用户与组\">管理用户与组</span></h2><ol>\n<li><p><strong>安装依赖包 <code>sharutils</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install sharutils</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>手动安装资源包 <code>Ldapscripts</code></strong></p>\n<p>将文章起始处下载的资源包 Ldapscripts 上传到 ECS 的根路径中，然后进行解压并手动安装到根路径中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar zxf ldapscripts-2.0.8.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span>  ldapscripts-2.0.8</span><br><span class=\"line\">make install PREFIX=/</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>配置 <code>dapscripts</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/ldapscripts/ldapscripts.conf</span><br></pre></td></tr></table></figure>\n\n<p>a. 更换公网IP，将 SERVER=”ldap://localhost” 改成 SERVER=”ldap://121.51.39.239”<br>b. 将 SUFFIX=”dc=example,dc=com” 改成 SUFFIX=”dc=codesweet,dc=com”<br>c. 将 BINDDN=”cn=Manager,dc=example,dc=com” 改成 BINDDN=”cn=admin,dc=codesweet,dc=com”<br>d. 去掉 #ICONVCHAR=”ISO-8859-15” 的注释</p>\n</li>\n<li><p><strong>修改 <code>/etc/ldapscripts/ldapscripts.passwd</code> 文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;echo -n &#x27;123456&#x27; &gt; /etc/ldapscripts/ldapscripts.passwd&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"管理groupuser\">管理group，user</span></h2><p>这一节可以忽略，这是介绍如何在终端中配置ldap中的用户和组的，后面可以在web中创建。</p>\n<p>创建group</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ldapaddgroup openstack </span><br></pre></td></tr></table></figure>\n\n<p>创建用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ldapadduser user1 openstack</span><br></pre></td></tr></table></figure>\n\n<p>设置用户密码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ldapsetpasswd user1 </span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1><span id=\"安装phpldapadmin\">安装phpldapadmin</span></h1><p>前面章节已经将ldap本地环境安装好，下面安装 web 界面 <code>phpldapadmin</code>。</p>\n<ol>\n<li><p><strong>安装 <code>phpldapadmin</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y phpldapadmin</span><br></pre></td></tr></table></figure>\n\n<p>yum安装时，会自动安装apache和php的依赖。注意： phpldapadmin很多没更新了，只支持php5，如果你服务器的环境是php7，则会有问题，页面会有各种报错。 可以使用<code>php -v</code>来查看php版本。</p>\n</li>\n<li><p><strong>修改apache的phpldapadmin配置文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/httpd/conf.d/phpldapadmin.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改 <ifmodule mod_authz_core.c> 中的内容，放开外网访问，这里只改了 2.4 版本的配置，因为 centos7 默认安装的 apache 为 2.4 版本。所以只需要改 2.4 版本的配置就可以了. 如果不知道自己apache版本，执行 rpm -qa|grep httpd 查看 apache 版本。</ifmodule></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod<span class=\"built_in\">_</span>authz<span class=\"built_in\">_</span>core.c&gt;</span><br><span class=\"line\">    <span class=\"params\">#</span> Apache 2.4</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\">  &lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>修改配置用DN登录ldap</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/phpldapadmin/config.php</span><br></pre></td></tr></table></figure>\n\n<p>a. 398行，默认是使用uid进行登录，我这里改为dn，也就是用户名</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$servers</span>-&gt;setValue(<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"string\">&#x27;attr&#x27;</span>,<span class=\"string\">&#x27;dn&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>b. 460行，关闭匿名登录，否则任何人都可以直接匿名登录查看所有人的信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$servers</span>-&gt;setValue(<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"string\">&#x27;anon_bind&#x27;</span>,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>c. 519行，设置用户属性的唯一性，这里我将cn,sn加上了，以确保用户名的唯一性</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$servers</span>-&gt;setValue(<span class=\"string\">&#x27;unique&#x27;</span>,<span class=\"string\">&#x27;attrs&#x27;</span>,array(<span class=\"string\">&#x27;mail&#x27;</span>,<span class=\"string\">&#x27;uid&#x27;</span>,<span class=\"string\">&#x27;uidNumber&#x27;</span>,<span class=\"string\">&#x27;cn&#x27;</span>,<span class=\"string\">&#x27;sn&#x27;</span>));</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动apache</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start httpd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> httpd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2><span id=\"web-端登录ldap\">web 端登录LDAP</span></h2><ol>\n<li><p>启动了apache服务后，采用dn登录方式登录 web 端LDAP。</p>\n</li>\n<li><p>在浏览器上访问: <a href=\"http://121.51.39.239/ldapadmin%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8%E4%B8%8A%E9%9D%A2%E5%AE%9A%E4%B9%89%E7%9A%84%E7%94%A8%E6%88%B7%EF%BC%8C%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E5%A6%82%E4%B8%8B\">http://121.51.39.239/ldapadmin，然后使用上面定义的用户，进行登录，如下</a></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">账户：cn=admin,dc=codesweet,dc=com </span><br><span class=\"line\">密码：123123</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/09/15/tools/LDAP-build/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGk5qKm6aOeMTIz,size_18,color_FFFFFF,t_70,g_se,x_16-20220924161522403.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>点击认证后，则成功登录:</p>\n<p><img src=\"/2021/09/15/tools/LDAP-build/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGk5qKm6aOeMTIz,size_20,color_FFFFFF,t_70,g_se,x_16-20220924161544289.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n","categories":["tools"],"tags":["LDAP"]},{"title":"微服务设计、拆分原则","url":"/2021/07/26/Architecture/Microservice/Microservice-split-principle/","content":"<h1><span id=\"akf拆分原则\">AKF拆分原则</span></h1><p>业界对于可扩展系统架构设计有一个朴素的理念：通过加机器就可以解决容量和可用性问题。</p>\n<p>　　这一理念在云计算概念疯狂流行的今天，得到了广泛的认可，对于一个规模迅速增长的系统而言，容量和性能问题当然是首当其冲的。但随着时间的向前，系统规模的增长，除了面对性能与容量的问题外，还要面对功能与模块数量上的增长带来的系统复杂性问题以及业务的变化带来的提供差异化服务的问题。</p>\n<p>　　然而许多系统在架构设计时为充分考虑这些问题，导致系统重构成为常态，而影响业务交付能力，还浪费人力财力。对此《可扩展艺术》一书提出了一个系统可扩展模型–AKF可扩展立方（Scalability Cube）。</p>\n<p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/201960ca9cec5f39d2de41aba1b520c5.jpeg\" alt=\"img\"></p>\n<h3><span id=\"y轴功能关注应用中功能划分基于不同的业务拆分\">Y轴（功能）关注应用中功能划分，基于不同的业务拆分</span></h3><p>　　Y轴扩展会将庞大的整体应用拆分为多个服务，每个服务实现一组相关的功能，如订单管理、客户管理等。在工程上常见的方案是服务化架构（SOA），比如对于一个电子商务平台，我们可以拆分成不同的服务，组成类似下面的架构：</p>\n<p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/format,png.png\" alt=\"img\"></p>\n<p>但通过上图可以发现，当服务数量增多时，服务调用关系变得复杂，为系统添加一个新功能，要调用的服务数变得不可控，由此引发了服务管理上的混乱，所以一般情况下，需要采用服务注册的机制形成服务网关来进行服务治理</p>\n<p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/format,png-20220919120444586.png\" alt=\"img\"></p>\n<h3><span id=\"x轴水平扩展关注水平扩展也就是加速器解决问题\">X轴（水平扩展）关注水平扩展，也就是“加速器解决问题”</span></h3><p>　　X轴扩展与我们前面朴素理念是一致的，通过绝对平等的复制服务与数据，以解决容量与可用性的问题，其实就是将<a href=\"https://so.csdn.net/so/search?q=%E5%BE%AE%E6%9C%8D%E5%8A%A1&spm=1001.2101.3001.7020\">微服务</a>运行多个实例，做集群加负载均衡的模式。</p>\n<p>　　为了提升单个服务的可用性与容量，对每一个服务进行X轴扩展划分。</p>\n<p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/format,png-20220919120504513.png\" alt=\"img\"></p>\n<h3><span id=\"z轴数据分区关注服务与数据的优先级划分如按地域划分\">Z轴（数据分区）关注服务与数据的优先级划分，如按地域划分</span></h3><p>　　Z轴扩展通常是指基于请求者或用户独特的需求，进行系统划分，并使得划分出来的子系统相互隔离但又是完整的。以生产汽车的工厂来举例：福特公司为了发展在中国的业务，或者利用中国的廉价劳动力，在中国建立一个完整的子工厂，与美国工厂一样，负责完整的汽车生产。这就是一种Z 轴扩展。</p>\n<p>工程领域常见的Z轴扩展有以下两种方案</p>\n<p>1，单元化架构</p>\n<p>　　在分布式服务设计领域，一个单元Cell就是满足某个分区所有业务操作的自包含闭环。如上面我们说到的Y轴扩展的SOA架构。客户端对服务端节点的选择一般是随机的，但是，如果在此上加Z轴扩展，那服务节点的选择将不再是随机的，而是每个单元自成一体。</p>\n<p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/format,png-20220919120524241.png\" alt=\"img\"></p>\n<p>2，数据分区</p>\n<p>　　为了性能数据安全上的考虑，我们将一个完整的数据集按一定维度划分出不同的子集。一个分区（Shard），就是整体数据集的一个子集。比如用尾号来划分用户，那同样尾号的那部分用户就可以认为是同一个分区，数据分区一般包括以下几种数据划分形式：</p>\n<p>　　数据类型：如业务类型</p>\n<p>　　数据范围：如时间段、用户ID</p>\n<p>　　数据热度：如用户活跃度、商品热度</p>\n<p>　　按读写分：如商品描述、商品库存</p>\n<h1><span id=\"前后端分离原则\">前后端分离原则</span></h1><p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/format,png-20220919120605378.png\" alt=\"img\"></p>\n<p>何为前后端分离？前后端本来不就是分离的吗？这要从jsp开始讲起。分工精细化从来都是蛋糕做大的原则，多个领域工程师最好在不需要接触其他领域知识的情况下合作，才能使效率越来越高，维护也会变得简单。jsp的模板技术融合了html和java代码，使得传统MVC开发中的前后端如胶似漆，前端做好页面，后端转成模板，发现问题再找前端，前端又看不懂java代码，前后端分离的目的就是打破这尴尬的局面，我们需要的是一个全能的团队，而不是一个个全能的人。</p>\n<p>　　前后端分离原则，简单的将就是前端和后端的代码分离，我们推荐的模式是最好采用物理分离的方式部署，进一步促使更彻底的分离。如果继续使用服务端模板技术，如jsp，把java、js、css、html都堆到一个页面里，稍微复杂一点的页面就无法维护了。</p>\n<p>这种前后端分离有几个好处：</p>\n<p>1，前后端技术分离，可以由各自的专家来对各自的领域进行优化，这样前端的用户体验会更好。</p>\n<p>2，分离模式下，前后端交互界面更清晰，就剩下接口模型，后端接口简介明了，更易于维护。</p>\n<p>3，前端多渠道继承场景更容易实现，后端服务无需变更，采用统一的数据和模型，可以支持多个前端，例如：微信h5前端、PC前端、安卓前端、IOS前端</p>\n<h1><span id=\"无状态服务\">无状态服务</span></h1><p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/format,png-20220919120628512.png\" alt=\"img\"></p>\n<p>对于无状态服务，首先说一下什么是状态：如果一个数据需要被多个服务共享，才能完成一笔交易，那么这个数据被称为状态。进而依赖这个状态的服务被称为有状态的服务，反之成为无状态服务。</p>\n<p>　　这个无状态服务原则并不是说在微服务架构里不允许存在状态，表达的真实意思就是要把有状态的业务服务改变为无状态的计算类服务，那么状态数据也就相应的迁移到对应的“有状态数据服务”中。</p>\n<p>　　场景说明：例如我们从前在本地内存中建立的数据缓存、Session缓存，到现在微服务架构中就应该把数据迁移到分布式缓存中存储，让业务服务变成一个无状态的计算节点。迁移后，就可以做到按需动态伸缩，微服务应用在运行时动态增删节点，就不再需要考虑缓存数据如何同步的问题。</p>\n<h1><span id=\"restful通讯风格\">RestFul通讯风格</span></h1><p><img src=\"/2021/07/26/Architecture/Microservice/Microservice-split-principle/format,png-20220919120649142.png\" alt=\"img\"></p>\n<p>这里介绍一个“无状态通讯原则”-Restful通讯风格，它有许多优点：</p>\n<p>1，无状态协议HTTP，具备先天优势，扩展能力强，例如安全加密有成熟的https。</p>\n<p>2，JSON报文序列化，轻量简单，人与机均可读，学习成本低，搜索引擎友好。</p>\n<p>3，语言无关，各大热门语言都提供成熟的Restful API框架，相对一些其他RPC框架生态更加完善。</p>\n","categories":["微服务"],"tags":["微服务"]},{"title":"Flyway使用","url":"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/","content":"<h1><span id=\"flyway是什么\">Flyway是什么</span></h1><p>官网：<a href=\"https://flywaydb.org/\">https://flywaydb.org</a></p>\n<p>Version control for your database</p>\n<p>简单地说，flyway是一个能对数据库变更做版本控制的工具。</p>\n<h1><span id=\"为什么要用flyway\">为什么要用Flyway</span></h1><p>在多人开发的项目中，我们都习惯了使用SVN或者Git来对代码做版本控制，主要的目的就是为了解决多人开发代码冲突和版本回退的问题。</p>\n<span id=\"more\"></span>\n\n<p>其实，数据库的变更也需要版本控制，在日常开发中，我们经常会遇到下面的问题：</p>\n<ol>\n<li>自己写的SQL忘了在所有环境执行；</li>\n<li>别人写的SQL我们不能确定是否都在所有环境执行过了；</li>\n<li>有人修改了已经执行过的SQL，期望再次执行；</li>\n<li>需要新增环境做数据迁移；</li>\n<li>每次发版需要手动控制先发DB版本，再发布应用版本；</li>\n<li>其它场景…</li>\n</ol>\n<p>有了flyway，这些问题都能得到很好的解决。</p>\n<h1><span id=\"使用flyway\">使用Flyway</span></h1><h2><span id=\"准备数据库\">准备数据库</span></h2><p>首先，我们需要准备好一个空的数据库。（数据库的安装和账密配置此处忽略）</p>\n<p>此处以mysql为例，在本地电脑上新建一个空的数据库，名称叫做flyway，我们通过dbeaver看到的样子如下：</p>\n<p><img src=\"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/405-6760625.png\" alt=\"img\"></p>\n<h2><span id=\"与springboot工程集成\">与SpringBoot工程集成</span></h2><p>在start.spring.io上新建一个SpringBoot工程，要求能连上自己本地新建的mysql数据库flyway，这个步骤也比较简单，就不再细讲。</p>\n<p>但要注意的是，application.properties中数据库的配置务必配置正确，下述步骤中系统启动时，flyway需要凭借这些配置连接到数据库。这里贴一份：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># db config</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/flyway?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"引入flyway的核心依赖包\">引入flyway的核心依赖包</span></h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flywaydb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flyway-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其次，在src/main/resources目录下面新建db.migration文件夹，默认情况下，该目录下的.sql文件就算是需要被flyway做版本控制的数据库SQL语句。</p>\n<p>但是此处的SQL语句命名需要遵从一定的规范，否则运行的时候flyway会报错。命名规则主要有两种：</p>\n<ol>\n<li>仅需要被执行一次的SQL命名以大写的”V”开头，后面跟上”0~9”数字的组合,数字之间可以用“.”或者下划线”_”分割开，然后再以两个下划线分割，其后跟文件名称，最后以.sql结尾。比如，<code>V2.1.5__create_user_ddl.sql</code>、<code>V4.1_2__add_user_dml.sql</code>。</li>\n<li>可重复运行的SQL，则以大写的“R”开头，后面再以两个下划线分割，其后跟文件名称，最后以.sql结尾。。比如，<code>R__truncate_user_dml.sql</code>。</li>\n</ol>\n<p>其中，V开头的SQL执行优先级要比R开头的SQL优先级高。</p>\n<p>如下，我们准备了三个脚本，分别为：</p>\n<ol>\n<li><code>V1__create_user.sql</code>，其中代码如下，目的是建立一张user表，且只执行一次。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `<span class=\"keyword\">USER</span>`(</span><br><span class=\"line\">    `USER_ID`          <span class=\"type\">INT</span>(<span class=\"number\">11</span>)           <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`USER_NAME`        <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>)      <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户姓名&#x27;</span>,</span><br><span class=\"line\">`AGE`              <span class=\"type\">INT</span>(<span class=\"number\">3</span>)            <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;年龄&#x27;</span>,</span><br><span class=\"line\">`CREATED_TIME`     datetime          <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">`CREATED_BY`       <span class=\"type\">varchar</span>(<span class=\"number\">100</span>)      <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;UNKNOWN&#x27;</span>,</span><br><span class=\"line\">`UPDATED_TIME`     datetime          <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span>,</span><br><span class=\"line\">`UPDATED_BY`       <span class=\"type\">varchar</span>(<span class=\"number\">100</span>)      <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;UNKNOWN&#x27;</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`USER_ID`)</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>V2__add_user.sql</code>，其中代码如下，目的是往user表中插入一条数据，且只执行一次。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `<span class=\"keyword\">user</span>`(user_name,age) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;lisi&#x27;</span>,<span class=\"number\">33</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p><code>R__add_unknown_user.sql</code>，其中代码如下，目的是每次启动倘若有变化，则往user表中插入一条数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> `<span class=\"keyword\">user</span>`(user_name,age) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;unknown&#x27;</span>,<span class=\"number\">33</span>);</span><br></pre></td></tr></table></figure>\n\n<p>与之相对应的目录截图如下：</p>\n<p><img src=\"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/485-6760816.png\" alt=\"img\"></p>\n</li>\n</ol>\n<p>其中2.1.6、2.1.7和every的文件夹不会影响flyway对SQL的识别和运行，可以自行取名和分类。</p>\n<p>到这一步，flyway的默认配置已经足够我们开始运行了。此时，我们启动SpringBoot的主程序，如果以上步骤没有配置错误的话，运行截图如下：</p>\n<p><img src=\"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/1200-6760838.png\" alt=\"img\"></p>\n<p>此时，我们刷新数据库，可以看到flyway的历史记录表已经生成并插入了三个版本的记录：</p>\n<p><img src=\"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/1200-20210720140057261-6760858.png\" alt=\"img\"></p>\n<p>而且，user表也已经创建好了并插入了两条数据：</p>\n<p><img src=\"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/1200-20210720140112098-6760873.png\" alt=\"img\"></p>\n<p>我们不改变任何东西，再次执行主程序，日志如下：</p>\n<p><img src=\"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/1200-20210720140125508-6760886.png\" alt=\"img\"></p>\n<p>两张数据库表中的内容也毫无任何变化。</p>\n<p>可是，如果我们修改<code>V2__add_user.sql</code>中的内容，再次执行的话，就会报错，提示信息如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Migration checksum mismatch <span class=\"keyword\">for</span> migration version 2</span><br></pre></td></tr></table></figure>\n\n<p>如果我们修改了<code>R__add_unknown_user.sql</code>，再次执行的话，该脚本就会再次得到执行，并且flyway的历史记录表中也会增加本次执行的记录。</p>\n<h2><span id=\"maven插件的使用\">maven插件的使用</span></h2><p>以上步骤中，每次想要migration都需要运行整个springboot项目，并且只能执行migrate一种命令，其实flyway还是有很多其它命令的。maven插件给了我们不需要启动项目就能执行flyway各种命令的机会。</p>\n<p>在pom中引入flyway的插件，同时配置好对应的数据库连接。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flywaydb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flyway-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>jdbc:mysql://localhost:3306/flyway?useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=utf8<span class=\"symbol\">&amp;amp;</span>serverTimezone=GMT<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">driver</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">driver</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后更新maven插件列表，就可以看到flyway的全部命令了。</p>\n<p><img src=\"/2021/07/20/db-resource/db-tools/flyway/Flyway%E4%BD%BF%E7%94%A8/641-6760946.png\" alt=\"img\"></p>\n<p>此时，我们双击执行上图中的flyway:migrate的效果和启动整个工程执行migrate的效果是一样的。</p>\n<p>其它命令的作用如下列出，各位可自行实验体会：</p>\n<ol>\n<li><p>baseline</p>\n<p>对已经存在数据库Schema结构的数据库一种解决方案。实现在非空数据库新建MetaData表，并把Migrations应用到该数据库；也可以在已有表结构的数据库中实现添加Metadata表。</p>\n</li>\n<li><p>clean</p>\n<p>清除掉对应数据库Schema中所有的对象，包括表结构，视图，存储过程等，clean操作在dev 和 test阶段很好用，但在生产环境务必禁用。</p>\n</li>\n<li><p>info</p>\n<p>用于打印所有的Migrations的详细和状态信息，也是通过MetaData和Migrations完成的，可以快速定位当前的数据库版本。</p>\n</li>\n<li><p>repair</p>\n<p>repair操作能够修复metaData表，该操作在metadata出现错误时很有用。</p>\n</li>\n<li><p>undo</p>\n<p>撤销操作，社区版不支持。</p>\n</li>\n<li><p>validate</p>\n<p>验证已经apply的Migrations是否有变更，默认开启的，原理是对比MetaData表与本地Migrations的checkNum值，如果值相同则验证通过，否则失败。</p>\n</li>\n</ol>\n<h2><span id=\"flyway补充知识\">flyway补充知识</span></h2><ol>\n<li>flyway执行migrate必须在空白的数据库上进行，否则报错；</li>\n<li>对于已经有数据的数据库，必须先baseline，然后才能migrate；</li>\n<li>clean操作是删除数据库的所有内容，包括baseline之前的内容；</li>\n<li>尽量不要修改已经执行过的SQL，即便是R开头的可反复执行的SQL，它们会不利于数据迁移；</li>\n</ol>\n<h1><span id=\"总结\">总结</span></h1><p>在进行了如上的实验后，相信我们都已经掌握了flyway的初步使用，当需要做数据迁移的时候，更换一个新的空白数据库，执行下migrate命令，所有的数据库更改都可以一步到位地迁移过去，真的是太方便了。</p>\n<h1><span id=\"附录\">附录</span></h1><p>flyway的配置清单：</p>\n<p><strong>最新配置请参考官网配置：<a href=\"https://flywaydb.org/documentation/configuration/configfile\">https://flywaydb.org/documentation/configuration/configfile</a></strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">flyway.baseline-description对执行迁移时基准版本的描述.</span><br><span class=\"line\">flyway.baseline-on-migrate当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认<span class=\"literal\">false</span>.</span><br><span class=\"line\">flyway.baseline-version开始执行基准迁移时对现有的schema的版本打标签，默认值为<span class=\"number\">1.</span></span><br><span class=\"line\">flyway.check-location检查迁移脚本的位置是否存在，默认<span class=\"literal\">false</span>.</span><br><span class=\"line\">flyway.clean-on-validation-error当发现校验错误时是否自动调用clean，默认<span class=\"literal\">false</span>.</span><br><span class=\"line\">flyway.enabled是否开启flywary，默认<span class=\"literal\">true</span>.</span><br><span class=\"line\">flyway.encoding设置迁移时的编码，默认UTF<span class=\"number\">-8.</span></span><br><span class=\"line\">flyway.ignore-failed-future-migration当读取元数据表时是否忽略错误的迁移，默认<span class=\"literal\">false</span>.</span><br><span class=\"line\">flyway.init-sqls当初始化好连接时要执行的SQL.</span><br><span class=\"line\">flyway.locations迁移脚本的位置，默认db/migration.</span><br><span class=\"line\">flyway.out-of-order是否允许无序的迁移，默认<span class=\"literal\">false</span>.</span><br><span class=\"line\">flyway.password目标数据库的密码.</span><br><span class=\"line\">flyway.placeholder-prefix设置每个placeholder的前缀，默认$&#123;.</span><br><span class=\"line\">flyway.placeholder-replacementplaceholders是否要被替换，默认true.</span><br><span class=\"line\">flyway.placeholder-suffix设置每个placeholder的后缀，默认&#125;.</span><br><span class=\"line\">flyway.placeholders.[placeholder name]设置placeholder的value</span><br><span class=\"line\">flyway.schemas设定需要flywary迁移的schema，大小写敏感，默认为连接默认的schema.</span><br><span class=\"line\">flyway.sql-migration-prefix迁移文件的前缀，默认为V.</span><br><span class=\"line\">flyway.sql-migration-separator迁移脚本的文件名分隔符，默认__</span><br><span class=\"line\">flyway.sql-migration-suffix迁移脚本的后缀，默认为.sql</span><br><span class=\"line\">flyway.tableflyway使用的元数据表名，默认为schema_version</span><br><span class=\"line\">flyway.target迁移时使用的目标版本，默认为latest version</span><br><span class=\"line\">flyway.url迁移时使用的JDBC URL，如果没有指定的话，将使用配置的主数据源</span><br><span class=\"line\">flyway.user迁移数据库的用户名</span><br><span class=\"line\">flyway.validate-on-migrate迁移时是否校验，默认为<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n","categories":["db-tools"],"tags":["dbtools"]},{"title":"Dubbo的SPI机制","url":"/2021/07/17/technology-stack/Dubbo/DubboSPI/","content":"<h1><span id=\"dubbo的spi机制\">Dubbo的SPI机制</span></h1><p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70.png\" alt=\"在这里插入图片描述\"></p>\n<p>在<a href=\"https://so.csdn.net/so/search?q=Dubbo&spm=1001.2101.3001.7020\">Dubbo</a>中，SPI贯穿整个Dubbo的核心，所以理解Dubbo中的SPI对于理解Dubbo的原理有着至关重要的作用。在Spring中，我们知道SpringFactoriesLoader这个类，它也是一种SPI机制。</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"java-spi\">Java SPI</span></h1><p>在了解Dubbo的SPI机制之前，我们先了解下Java提供的SPI (service provider interface) 机制，SPI是JDK内置的一种服务提供发现机制。目前市面上很多框架都用它来做服务的扩展发现。简单的说，它是一种动态替换发现的机制。</p>\n<p>举个简单的例子，我们想在运行时动态给它添加实现，你只需要添加一个实现，然后把新的实现描述给JDK知道就行了。大家耳熟能详的如JDBC，日志框架都有用到。</p>\n<h2><span id=\"实现-spi-需要遵循的标准\">实现 SPI 需要遵循的标准</span></h2><p>我们如何去实现一个标准的 SPI 发现机制呢？其实很简单，只需要满足以下提交就行了 ：</p>\n<p>需要在 classpath 下创建一个目录，该目录命名必须是：META-INF/service<br>在该目录下创建一个 properties 文件，该文件需要满足以下几个条件 ：<br>2.1 文件名必须是扩展的接口的全路径名称<br>2.2 文件内部描述的是该扩展接口的所有实现类<br>2.3 文件的编码格式是 UTF-8<br>通过 java.util.ServiceLoader 的加载机制来发现</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/20190819080541929.png\" alt=\"在这里插入图片描述\"></p>\n<h2><span id=\"spi-的实际应用\">SPI 的实际应用</span></h2><p>SPI 在很多地方有应用，可能大家都没有关注，最常用的就是 JDBC 驱动，我们来看看是怎么应用的。</p>\n<p>JDK 本身提供了数据访问的 api。在 java.sql 这个包里面 ，我们在连接数据库的时候，一定需要用到 java.sql.Driver 这个接口对吧。然后我好奇的去看了下 java.sql.Driver 的源码，发现 Driver 并没有实现，而是提供了一套标准的 api 接口。大家有兴趣可以去看看，因为我们在实际应用中用的比较多的是 mysql，所以我去 mysql 的包里面看到一个如下的目录结构</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122033503780.png\" alt=\"在这里插入图片描述\"></p>\n<p>这个文件里面写的就是 mysql 的驱动实现。我恍然大悟，原来通过 SPI 机制把 java.sql.Driver 和 mysql 的驱动做了集成。这样 就达到了各个数据库厂商自己去实现数据库连接，jdk 本身不关心你怎么实现。</p>\n<h2><span id=\"spi-的缺点\">SPI 的缺点</span></h2><p>JDK 标准的 SPI 会一次性加载实例化扩展点的所有实现，什么意思呢？就是如果你在 META-INF/service 下的文件里面加了 N 个实现类，那么 JDK 启动的时候都会一次性全部加载。那么如果有的扩展点实现初始化很耗时或者如果有些实现类并没有用到， 那么会很浪费资源<br>如果扩展点加载失败，会导致调用方报错，而且这个错误很难定位到是这个原因</p>\n<h2><span id=\"dubbo中的spi机制\">Dubbo中的SPI机制</span></h2><p>Dubbo也用了SPI思想，不过没有用JDK的SPI机制，是自己实现的一套SPI机制。在Dubbo的源码中，很多地方会存在下面这样的三种代码，分别是自适应扩展点、指定名称的扩展点、激活扩展点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ExtensionLoader.getExtensionLoader(xxx.class).getAdaptiveExtension();</span><br><span class=\"line\">ExtensionLoader.getExtensionLoader(xxx.class).getExtension(name);</span><br><span class=\"line\">ExtensionLoader.getExtensionLoader(xxx.class).getActivateExtension(url, key);</span><br></pre></td></tr></table></figure>\n\n<p>比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span><br></pre></td></tr></table></figure>\n\n<p>Protocol接口，在运行的时候dubbo会判断一下应该选用这个Protocol接口的哪个实现类来实例化对象。</p>\n<p>它会去找你配置的Protocol，将你配置的Protocol实现类加载到JVM中来，然后实例化对象，就用你配置的那个Protocol实现类就可以了。</p>\n<p>上面那行代码就是dubbo里面大量使用的，就是对很多组件，都是保留一个接口和多个实现，然后在系统运行的时候动态的根据配置去找到对应的实现类。如果你没有配置，那就走默认的实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SPI(&quot;dubbo&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Protocol</span> </span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefaultPort</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Adaptive</span>  </span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Adaptive</span>  </span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">refer</span><span class=\"params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"keyword\">throws</span> RpcException</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>在dubbo自己的jar中，在META-INF/dubbo/internal/org.apache.dubbo.rpc.Protocol文件中：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">filter</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper</span></span><br><span class=\"line\"><span class=\"attr\">listener</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper</span></span><br><span class=\"line\"><span class=\"attr\">mock</span>=<span class=\"string\">org.apache.dubbo.rpc.support.MockProtocol</span></span><br><span class=\"line\"><span class=\"attr\">dubbo</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol</span></span><br><span class=\"line\"><span class=\"attr\">injvm</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol</span></span><br><span class=\"line\"><span class=\"attr\">rmi</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.rmi.RmiProtocol</span></span><br><span class=\"line\"><span class=\"attr\">hessian</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.hessian.HessianProtocol</span></span><br><span class=\"line\"><span class=\"attr\">http</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.http.HttpProtocol</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">org.apache.dubbo.rpc.protocol.webservice.WebServiceProtocol</span></span><br><span class=\"line\"><span class=\"attr\">thrift</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol</span></span><br><span class=\"line\"><span class=\"meta\">native-thrift</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol</span></span><br><span class=\"line\"><span class=\"attr\">memcached</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol</span></span><br><span class=\"line\"><span class=\"attr\">redis</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.redis.RedisProtocol</span></span><br><span class=\"line\"><span class=\"attr\">rest</span>=<span class=\"string\">org.apache.dubbo.rpc.protocol.rest.RestProtocol</span></span><br><span class=\"line\"><span class=\"attr\">xmlrpc</span>=<span class=\"string\">org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol</span></span><br><span class=\"line\"><span class=\"attr\">registry</span>=<span class=\"string\">org.apache.dubbo.registry.integration.RegistryProtocol</span></span><br><span class=\"line\"><span class=\"attr\">qos</span>=<span class=\"string\">org.apache.dubbo.qos.protocol.QosProtocolWrapper</span></span><br></pre></td></tr></table></figure>\n\n<p>所以这就看到了dubbo的SPI机制默认是怎么玩的了，其实就是Protocol接口，@SPI(“dubbo”) 说的是，通过 SPI 机制来提供实现类，实现类是通过 dubbo 作为默认 key 去配置文件里找到的，配置文件名称与接口全限定名一样的，通过 dubbo 作为 key 可以找到默认的实现类就是 org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol</p>\n<p>如果想要动态替换掉默认的实现类，需要使用 @Adaptive 接口，Protocol 接口中，有两个方法加了 @Adaptive 注解，就是说那俩接口会被代理实现。</p>\n<p>比如这个 Protocol 接口搞了俩 @Adaptive 注解标注了方法，在运行的时候会针对 Protocol 生成代理类，这个代理类的那俩方法里面会有代理代码，代理代码会在运行的时候动态根据 url 中的 protocol 来获取那个 key，默认是 dubbo，你也可以自己指定，你如果指定了别的 key，那么就会获取别的实现类的实例了。</p>\n<h1><span id=\"扩展-dubbo-中的组件\">扩展 dubbo 中的组件</span></h1><p>下面来说说怎么自己来扩展dubbo中的组件：<br>新建一个Java class实现Protocol接口，由于我们这里只是演示如何自己扩展Dubbo中的组件，所以这里只实现getDefaultPort方法，其它方法都空着：</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122033847869.png\" alt=\"在这里插入图片描述\"></p>\n<p>在src/main/resources目录下创建META-INF/dubbo文件夹，然后创建文件，名字叫org.apache.dubbo.rpc.Protocol，文件里添加我们自己实现的Protocol接口的实现类，myProtocol是我们自定义协议的key。</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122033907801.png\" alt=\"在这里插入图片描述\"></p>\n<p>在调用处执行如下代码 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        Main.main(args);</span></span><br><span class=\"line\">    \tProtocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(<span class=\"string\">&quot;myProtocol&quot;</span>);</span><br><span class=\"line\">    \tSystem.out.println(protocol.getDefaultPort());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行后可以看到如下结果，证明执行的是我们自定义的Protocol扩展点。<br><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/20190819082926120.png\" alt=\"在这里插入图片描述\"></p>\n<p>总结：总的来说，思路和 SPI 是差不多。都是基于约定的路径下制定配置文件。目的是通过配置的方式轻松实现功能的扩展。</p>\n<p>我们的猜想是，一定有一个地方通过读取指定路径下的所有文件进行 load。然后讲对应的结果保存到一个 map 中，key 对应为 名称，value 对应为实现类。那么这个实现，一定就在 ExtensionLoader 中了。接下来我们就可以基于这个猜想去看看代码的实 现。</p>\n<h2><span id=\"dubbo-的扩展点原理实现\">Dubbo 的扩展点原理实现</span></h2><p>在看Dubbo SPI的实现代码之前，我们先思考一个问题，所谓的扩展点，就是通过指定目录下配置一个对应接口的实现类，然后程序会进行查找和解析，找到对应的扩展点，那么这里就涉及到两个问题：</p>\n<p>怎么解析<br>被加载的类如何存储和使用<br>ExtensionLoader.getExtensionLoader.getExtension<br>我们通过上面的例子可以知道，我们是通过下面这个代码去加载扩展点的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(<span class=\"string\">&quot;myProtocol&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们从这段代码着手，去看看到底做了什么事情，能够通过这样一段代码实现扩展协议的查找和加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">ExtensionLoader&lt;T&gt; <span class=\"title\">getExtensionLoader</span><span class=\"params\">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Extension type == null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!type.isInterface()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Extension type (&quot;</span> + type + <span class=\"string\">&quot;) is not an interface!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!withExtensionAnnotation(type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Extension type (&quot;</span> + type +</span><br><span class=\"line\">                    <span class=\"string\">&quot;) is not an extension, because it is NOT annotated with @&quot;</span> + SPI.class.getSimpleName() + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ExtensionLoader&lt;T&gt; loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loader == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            EXTENSION_LOADERS.putIfAbsent(type, <span class=\"keyword\">new</span> ExtensionLoader&lt;T&gt;(type));</span><br><span class=\"line\">            loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loader;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面代码可以看出， 先会去检查我们想要的扩展点是否已经存在于EXTENSION_LOADERS这个缓存中，如果存在则直接返回，否则新创建一个ExtensionLoader。</p>\n<p>如果当前的 type=ExtensionFactory，那么 objectFactory=null, 否则会创建一个自适应扩展点给到 objectFacotry,目前来说具 体做什么咱们先不关心，现在只要知道objectFactory 在这里赋值了，并且是返回一个 AdaptiveExtension(). 这个暂时不展开，后面再分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getExtension</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Extension name == null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;true&quot;</span>.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDefaultExtension();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Holder&lt;Object&gt; holder = getOrCreateHolder(name);</span><br><span class=\"line\">        Object instance = holder.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (holder) &#123;</span><br><span class=\"line\">                instance = holder.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = createExtension(name);</span><br><span class=\"line\">                    holder.set(instance);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法就是根据一个名字来获得一个对应类的实例，所以我们来猜想一下，回想一下前面咱们配置的自定义协议，name 实际上就是 myProtocol，而返回的实现类应该就是 MyProtocol。</p>\n<p>同样的，先去看缓存中是否已经存在我们想要的扩展点，如果没有则新建一个</p>\n<p>createExtension</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">createExtension</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> findException(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());</span><br><span class=\"line\">                instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            injectExtension(instance);</span><br><span class=\"line\">            Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty(wrapperClasses)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class=\"line\">                    instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Extension instance (name: &quot;</span> + name + <span class=\"string\">&quot;, class: &quot;</span> +</span><br><span class=\"line\">                    type + <span class=\"string\">&quot;) couldn&#x27;t be instantiated: &quot;</span> + t.getMessage(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里会先调用getExtensionClasses()加载指定目录下的所有文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, Class&lt;?&gt;&gt; getExtensionClasses() &#123;</span><br><span class=\"line\">        Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (cachedClasses) &#123;</span><br><span class=\"line\">                classes = cachedClasses.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (classes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    classes = loadExtensionClasses();</span><br><span class=\"line\">                    cachedClasses.set(classes);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> classes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// synchronized in getExtensionClasses</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class=\"line\">        cacheDefaultExtensionName();</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName());</span><br><span class=\"line\">        loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName().replace(<span class=\"string\">&quot;org.apache&quot;</span>, <span class=\"string\">&quot;com.alibaba&quot;</span>));</span><br><span class=\"line\">        loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName());</span><br><span class=\"line\">        loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName().replace(<span class=\"string\">&quot;org.apache&quot;</span>, <span class=\"string\">&quot;com.alibaba&quot;</span>));</span><br><span class=\"line\">        loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName());</span><br><span class=\"line\">        loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName().replace(<span class=\"string\">&quot;org.apache&quot;</span>, <span class=\"string\">&quot;com.alibaba&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extensionClasses;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法，会查找指定目录 /META-INF/dubbo和 /META-INF/services 下对应的 type-&gt;也就是本次演示案例的 Protocol 的 properties 文件，然后扫描这个文 件下的所有配置信息。然后保存到一个 HashMap 中（classes），key=name(对应 protocol 文件中配置的 myprotocol), value=对 应配置的类的实例</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/20190819085030420.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>injectExtension</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">injectExtension</span><span class=\"params\">(T instance)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objectFactory != <span class=\"keyword\">null</span>) &#123;  <span class=\"comment\">//objectFactory在这里用到了 </span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isSetter(method)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                         * Check &#123;<span class=\"doctag\">@link</span> DisableInject&#125; to see if we need auto injection for this property</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (method.getAnnotation(DisableInject.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Class&lt;?&gt; pt = method.getParameterTypes()[<span class=\"number\">0</span>];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ReflectUtils.isPrimitives(pt)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            String property = getSetterProperty(method);</span><br><span class=\"line\">                            Object object = objectFactory.getExtension(pt, property);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                method.invoke(instance, object);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                            logger.error(<span class=\"string\">&quot;Failed to inject via method &quot;</span> + method.getName()</span><br><span class=\"line\">                                    + <span class=\"string\">&quot; of interface &quot;</span> + type.getName() + <span class=\"string\">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法是用来实现依赖注入的，如果被加载的实例中，有成员属性本身也是一个扩展点，则会通过 set 方法进行注入。</p>\n<p>分析到这里我们发现，所谓的扩展点，套路都一样，不管是 springfactorieyLoader，还是 Dubbo 的 spi。实际上，Dubbo 的功能 会更加强大，比如自适应扩展点，比如依赖注入</p>\n<p>Adaptive 自适应扩展点<br>什么叫自适应扩展点呢？我们先演示一个例子，在下面这个例子中，我们传入一个 Compiler 接口，它会返回一个 AdaptiveCompiler。这个就叫自适应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \tCompiler compiler=ExtensionLoader.getExtensionLoader(Compiler.class).getAdaptiveExtension(); </span><br><span class=\"line\">    \tSystem.out.println(compiler.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/20190819085615984.png\" alt=\"在这里插入图片描述\"><br>通过结果我们可以知道，它返回的是AdaptiveCompiler这个类，它是怎么实现的呢？我们查看AdaptiveCompiler这个类，可以发现这个类上有一个注解@Adaptive。<br><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/20190819085807418.png\" alt=\"在这里插入图片描述\"></p>\n<p>这个就是一个自适应 扩展点的标识。它可以修饰在类上，也可以修饰在方法上面。这两者有什么区别呢？<br>简单来说，放在类上，说明当前类是一个确定的自适应扩展点的类。如果是放在方法级别，那么需要生成一个动态字节码，来 进行转发。</p>\n<p>比如拿 Protocol 这个接口来说，它里面定义了 export 和 refer 两个抽象方法，这两个方法分别带有@Adaptive 的标识，标识是 一个自适应方法。 我们知道 Protocol 是一个通信协议的接口，具体有多种实现，那么这个时候选择哪一种呢？ 取决于我们在使用 dubbo 的时候所 配置的协议名称。而这里的方法层面的 Adaptive 就决定了当前这个方法会采用何种协议来发布服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SPI(&quot;dubbo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Adaptive</span></span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">Exporter&lt;T&gt; <span class=\"title\">export</span><span class=\"params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"keyword\">throws</span> RpcException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Adaptive</span></span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">refer</span><span class=\"params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"keyword\">throws</span> RpcException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>getAdaptiveExtension</strong><br>这个方法主要就是要根据传入的接口返回一个自适应的实现类 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getAdaptiveExtension</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object instance = cachedAdaptiveInstance.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (createAdaptiveInstanceError == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (cachedAdaptiveInstance) &#123;</span><br><span class=\"line\">                    instance = cachedAdaptiveInstance.get();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            instance = createAdaptiveExtension();</span><br><span class=\"line\">                            cachedAdaptiveInstance.set(instance);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                            createAdaptiveInstanceError = t;</span><br><span class=\"line\">                            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Failed to create adaptive instance: &quot;</span> + t.toString(), t);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Failed to create adaptive instance: &quot;</span> + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>cachedAdaptiveInstance是一个缓存，如果缓存中没有，则通过createAdaptiveExtension创建一个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">createAdaptiveExtension</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Can&#x27;t create adaptive extension &quot;</span> + type + <span class=\"string\">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class=\"line\">        getExtensionClasses();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cachedAdaptiveClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cachedAdaptiveClass;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>createAdaptiveExtension这个方法主要做了以下两件事：</p>\n<ul>\n<li>获得一个自适应扩展点的实例</li>\n<li>实现依赖注入   </li>\n</ul>\n<p>getAdaptiveExtensionClass方法中先调用getExtensionClasses()方法，这个方法我们前面已经提到，会加载当前传入的类型的所有扩展点，保存在一个 hashmap 中 这里有一个判断逻辑，如果 cachedApdaptiveClas!=null ,直接返回这个 cachedAdaptiveClass，这里大家可以猜一下，这个 cachedAdaptiveClass 是一个什么？</p>\n<p>还记得前面讲过 Adaptive 可以方在两个位置，一个是类级别，一个是方法级别。那么这个 cachedAdaptiveClass 很显然，就是放在类 级别的 Adaptive，表示告诉 dubbo spi loader，“我是一个自适应扩展点，你来加载我吧” cachedAdaptiveClass 应该是在 加载解析/META-INF/dubbo 下的扩展点的时候加载进来的。在加载完之后如果这个类有@Adaptive 标识，则会赋值赋值而给 cachedAdaptiveClass</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122034841819.png\" alt=\"在这里插入图片描述\"></p>\n<p>如果 cachedAdaptiveClass 不存在，则调用createAdaptiveExtensionClass()获得扩展点实例</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class=\"line\">       String code = <span class=\"keyword\">new</span> AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();</span><br><span class=\"line\">       ClassLoader classLoader = findClassLoader();</span><br><span class=\"line\">       org.apache.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> compiler.compile(code, classLoader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dubbo 会动态生成一个代理类 Protocol$Adaptive. 前面的名字 protocol 是根据当前 ExtensionLoader 所加载的扩展点来定义的。</p>\n<p>动态生成字节码，然后进行动态加载。那么这个时候锁返回的 class,如果加载的是 Protocol.class，应该是 Protocol$Adaptive 这个 cachedDefaultName 实际上就是扩展点接口的@SPI 注解对应的名字，如果此时加载的是 Protocol.class，那么 cachedDefaultName=dubbo</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122034910332.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>Protocol$Adaptive</strong><br>动态生成的代理类，以下是我通过 debug 拿到的代理类<br>前面传入进来的 cachedDefaultName，在这个动态生成的类中，会体现在下面标红的部分，也就是它的默认实现是 DubboProtocol</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.dubbo.common.extension.ExtensionLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Protocol</span>$<span class=\"title\">Adaptive</span> <span class=\"keyword\">implements</span> <span class=\"title\">org</span>.<span class=\"title\">apache</span>.<span class=\"title\">dubbo</span>.<span class=\"title\">rpc</span>.<span class=\"title\">Protocol</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultPort</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> org.apache.dubbo.rpc.<span class=\"function\">Exporter <span class=\"title\">export</span><span class=\"params\">(org.apache.dubbo.rpc.Invoker arg0)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> org.apache.dubbo.rpc.RpcException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arg0 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;org.apache.dubbo.rpc.Invoker argument == null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arg0.getUrl() == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;org.apache.dubbo.rpc.Invoker argument getUrl() == null&quot;</span>);</span><br><span class=\"line\">\t\torg.apache.dubbo.common.URL url = arg0.getUrl();</span><br><span class=\"line\">\t\tString extName = (url.getProtocol() == <span class=\"keyword\">null</span> ? <span class=\"string\">&quot;dubbo&quot;</span> : url.getProtocol());</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (extName == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (&quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ url.toString() + <span class=\"string\">&quot;) use keys([protocol])&quot;</span>);</span><br><span class=\"line\">\t\torg.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol) ExtensionLoader</span><br><span class=\"line\">\t\t\t\t.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> extension.export(arg0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> org.apache.dubbo.rpc.<span class=\"function\">Invoker <span class=\"title\">refer</span><span class=\"params\">(java.lang.Class arg0, org.apache.dubbo.common.URL arg1)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> org.apache.dubbo.rpc.RpcException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arg1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;url == null&quot;</span>);</span><br><span class=\"line\">\t\torg.apache.dubbo.common.URL url = arg1;</span><br><span class=\"line\">\t\tString extName = (url.getProtocol() == <span class=\"keyword\">null</span> ? <span class=\"string\">&quot;dubbo&quot;</span> : url.getProtocol());</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (extName == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (&quot;</span></span><br><span class=\"line\">\t\t\t\t\t+ url.toString() + <span class=\"string\">&quot;) use keys([protocol])&quot;</span>);</span><br><span class=\"line\">\t\torg.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol) ExtensionLoader</span><br><span class=\"line\">\t\t\t\t.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> extension.refer(arg0, arg1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到在export方法中，会先通过String extName = (url.getProtocol() == null ? “dubbo” : url.getProtocol());去获取extName, 在我们之前的例子中，url.getProtocol()方法返回的应该是”myProtocol”，所以extName是myProtocol，然后通过下面代码去获取Protocol的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol) ExtensionLoader</span><br><span class=\"line\">\t\t\t\t.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);</span><br></pre></td></tr></table></figure>\n\n<p><strong>图形理解</strong><br>简单来说，上面的基于方法层面的@Adaptive，基本实现原理的图形大概是这样<br><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122035011145.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>injectExtension</strong><br>对于扩展点进行依赖注入，简单来说就是如果当前加载的扩展点中存在一个成员属性（对象），并且提供了 set 方法，那么这个 方法就会执行依赖注入.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">injectExtension</span><span class=\"params\">(T instance)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objectFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isSetter(method)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                         * Check &#123;<span class=\"doctag\">@link</span> DisableInject&#125; to see if we need auto injection for this property</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (method.getAnnotation(DisableInject.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Class&lt;?&gt; pt = method.getParameterTypes()[<span class=\"number\">0</span>];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ReflectUtils.isPrimitives(pt)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            String property = getSetterProperty(method);</span><br><span class=\"line\">                            Object object = objectFactory.getExtension(pt, property);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                method.invoke(instance, object);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                            logger.error(<span class=\"string\">&quot;Failed to inject via method &quot;</span> + method.getName()</span><br><span class=\"line\">                                    + <span class=\"string\">&quot; of interface &quot;</span> + type.getName() + <span class=\"string\">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(e.getMessage(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 injectExtension 这个方法中，我们发现入口出的代码首先判断了 objectFactory 这个对象是否为空。这个是在哪里初始化的呢？ 实际上我们在获得 ExtensionLoader 的时候，就对 objectFactory 进行了初始化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ExtensionLoader</span><span class=\"params\">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        objectFactory = (type == ExtensionFactory.class ? <span class=\"keyword\">null</span> : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过 ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension()去获得一个自适应的扩展点，进 入 ExtensionFactory 这个接口中，可以看到它是一个扩展点，并且有一个自己实现的自适应扩展点 AdaptiveExtensionFactory;</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122035102424.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122035111234.png\" alt=\"在这里插入图片描述\"></p>\n<p>注意：@Adaptive 加载到类上表示这是一个自定义的适配器类，表示我们再调用 getAdaptiveExtension 方法的时候，不需要走 上面这么复杂的过程。会直接加载到 AdaptiveExtensionFactory。然后在 getAdaptiveExtensionClass（）方法处有判断</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/20190819093006506.png\" alt=\"在这里插入图片描述\"></p>\n<p>我们可以看到除了自定义的自适应适配器类以外，还有两个实现类，一个是 SPI，一个是 Spring，AdaptiveExtensionFactory<br>AdaptiveExtensionFactory 轮询这 2 个，从一个中获取到就返回。</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122035200203.png\" alt=\"在这里插入图片描述\"></p>\n<p>Activate 自动激活扩展点<br>自动激活扩展点，有点类似我们讲 springboot 的时候用到的 conditional，根据条件进行自动激活。但是这里设计的初衷是，对 于一个类会加载多个扩展点的实现，这个时候可以通过自动激活扩展点进行动态加载， 从而简化配置我们的配置工作。</p>\n<p>@Activate 提供了一些配置来允许我们配置加载条件，比如 group 过滤，比如 key 过滤。</p>\n<p>举个例子，我们可以看看 org.apache.dubbo.Filter 这个类，它有非常多的实现，比如说 CacheFilter，这个缓存过滤器，配置信息 如下<br>group 表示客户端和和服务端都会加载，value 表示 url 中有 cache_key 的时候</p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/20190819093344188.png\" alt=\"在这里插入图片描述\"></p>\n<p>通过下面这段代码，演示关于 Filter 的自动激活扩展点的效果。没有添加“红色部分的代码”时，list 的结果是 10，添加之后 list 的结果是 11. 会自动把 cacheFilter 加载进来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \tExtensionLoader&lt;Filter&gt; loader=ExtensionLoader.getExtensionLoader(Filter.class);          </span><br><span class=\"line\">    \tURL url= <span class=\"keyword\">new</span> URL(<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"comment\">//        url=url.addParameter(&quot;cache&quot;,&quot;cache&quot;); </span></span><br><span class=\"line\">    \tList&lt;Filter&gt; filters=loader.getActivateExtension(url,<span class=\"string\">&quot;cache&quot;</span>);          </span><br><span class=\"line\">    \tSystem.out.println(filters.size());</span><br><span class=\"line\">    \tfilters.forEach(filter -&gt; &#123;</span><br><span class=\"line\">    \t\tSystem.out.println(filter);</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122035252614.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/2021/07/17/technology-stack/Dubbo/DubboSPI/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdiYWdnaW8=,size_16,color_FFFFFF,t_70-20220122035258823.png\" alt=\"在这里插入图片描述\"></p>\n","categories":["技术栈"],"tags":["dubbo"]},{"title":"git使用规范","url":"/2021/12/02/devops/version-control/git/git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/","content":"<h1><span id=\"git使用规范\">git使用规范</span></h1><h1><span id=\"介绍\">介绍</span></h1><p>在使用Git的过程中如果没有清晰流程和规划，否则,每个人都提交一堆杂乱无章的commit,项目很快就会变得难以协调和维护。<br>Git版本管理同样需要一个清晰的流程和规范。<br>Vincent Driessen 为了解决这个问题提出了 <a href=\"https://links.jianshu.com/go?to=http://nvie.com/posts/a-successful-git-branching-model/\">A Successful Git Branching Model</a><br>以下是基于Vincent Driessen提出的Git Flow 流程图</p>\n<span id=\"more\"></span>\n\n<img src=\"/2021/12/02/devops/version-control/git/git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/git使用规范/1200.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<h1><span id=\"版本定义\">版本定义</span></h1><p>版本号使用x.x.x.x进行定义.</p>\n<ul>\n<li>第一个x代表大版本只有在项目有重大变更时更新；</li>\n<li>第二个x保留；</li>\n<li>第三个x代表常规版本有新求会更新；</li>\n<li>第四个x代表紧急Bug修正；     一个常见的版本号类似于：0.0.10.11</li>\n</ul>\n<h1><span id=\"系统开发环境\">系统开发环境</span></h1><table>\n<thead>\n<tr>\n<th align=\"left\">简称</th>\n<th align=\"left\">全称</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">DEV</td>\n<td align=\"left\">Development environment</td>\n<td align=\"left\">用于开发者调试使用</td>\n</tr>\n<tr>\n<td align=\"left\">FAT</td>\n<td align=\"left\">Feature Acceptance Test environment</td>\n<td align=\"left\">功能验收测试环境，用于测试环境下的软件测试者测试使用</td>\n</tr>\n<tr>\n<td align=\"left\">UAT</td>\n<td align=\"left\">User Acceptance Test environment</td>\n<td align=\"left\">用户验收测试环境，用于生产环境下的软件测试者测试使用</td>\n</tr>\n<tr>\n<td align=\"left\">PRO</td>\n<td align=\"left\">Production environment</td>\n<td align=\"left\">生产环境</td>\n</tr>\n</tbody></table>\n<h1><span id=\"分支定义\">分支定义</span></h1><table>\n<thead>\n<tr>\n<th align=\"left\">分支</th>\n<th align=\"left\">名称</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">master</td>\n<td align=\"left\">主分支</td>\n<td align=\"left\">用于生产部署，最新稳定版本，一般由 release 或 hotfix 分支合并，任何情况下不允许直接在 master 分支上修改代码。</td>\n</tr>\n<tr>\n<td align=\"left\">release</td>\n<td align=\"left\">预上线分支</td>\n<td align=\"left\">预上线分支，是develop与master之间的一个缓冲，始终保持与 master 分支一致，一般由 develop 或 hotfix 分支合并，不建议直接在 release 分支上直接修改代码。（UAT）</td>\n</tr>\n<tr>\n<td align=\"left\">hotfix</td>\n<td align=\"left\">紧急修复分支</td>\n<td align=\"left\">紧急分支，名规则为 hotfix- 开头，从master生成，bug修正后自动合并到master和develop并且生成tag；</td>\n</tr>\n<tr>\n<td align=\"left\">develop</td>\n<td align=\"left\">测试分支</td>\n<td align=\"left\">功能验收测试环境，用于测试环境下的软件测试者测试使用，可根据需求大小程度确定是由 feature 分支合并，还是直接在上面开发。，FAT，如果开发工时 &lt; 1d，直接在 develop 开发，如果开发工时 &gt; 1d，那就需要创建分支，在分支上开发。</td>\n</tr>\n<tr>\n<td align=\"left\">feature</td>\n<td align=\"left\">需求开发分支</td>\n<td align=\"left\">用于开发新需求和需要较长时间的BUG修改，(正式环境) 测试通过后，研发人员需要删除 feature- 分支。</td>\n</tr>\n</tbody></table>\n<h1><span id=\"commit-日志规范\">Commit 日志规范</span></h1><p>提交信息一定要认真填写！</p>\n<p>建议参考规范：(scope)：</p>\n<p>比如：fix(首页模块)：修复弹窗 JS Bug。</p>\n<p>type 表示 动作类型，可分为：</p>\n<p>fix：修复 xxx Bug feat：新增 xxx 功能 test：调试 xxx 功能 style：变更 xxx 代码格式或注释 docs：变更 xxx 文档 refactor：重构 xxx 功能或方法 scope 表示 影响范围，可分为：模块、类库、方法等。</p>\n<p>subject 表示 简短描述，最好不要超过 60 个字，如果有相关 Bug 的 Jira 号，建议在描述中加上。</p>\n<h1><span id=\"开发工作流程\">开发工作流程</span></h1><p>git flow feature start xxxxx（开始新需求） 在feature/xxxxx分支下进行开发 git flow feature finish xxxxx（开发完成后等待研发经理确认可以完成时执行） git push origin develop（发布develop分支） 每天工程师都需要git pull origin develop来更新develop分支，然后将develop分支合并到你正在开发得feature/xxxxx分支上来保持代码最新 切记不能直接在develop上进行开发</p>\n<h2><span id=\"常规分支debug流程\">常规分支debug流程</span></h2><ol>\n<li>由研发经理通知相关工程师release版本x.x</li>\n<li>git fetch</li>\n<li>git checkout -b release/x.x origin/release/x.x（拉回release版本）</li>\n<li>git pull release/x.x（更新该分支）</li>\n<li>修改测试中发现的BUG</li>\n<li>git push origin release/vx.x（修改完后提交分支）</li>\n<li>循环4-5</li>\n</ol>\n<h2><span id=\"紧急debug流程\">紧急debug流程</span></h2><ol>\n<li>由研发经理通知相关工程师hotfix分支名称x.x.x</li>\n<li>git fetch</li>\n<li>git checkout -b hotfix/x.x.x origin/hotfix/x.x.x（拉回hotfix分支）</li>\n<li>git pull hfx.x（更新hotfix分支）</li>\n<li>在热修复分支下修改bug</li>\n<li>git push origin hfx.x（修改完成，提交分支）     在日常工作中不能修改master分支下得代码</li>\n</ol>\n<h2><span id=\"研发经理\">研发经理</span></h2><p>开发和DEBUG流程同工程师流程</p>\n<h3><span id=\"常规分支debug流程\">常规分支debug流程</span></h3><ol>\n<li>git pull origin develop（更新develop分支为最新）</li>\n<li>git checkout develop（切换到develop分支）</li>\n<li>git flow release start x.x（生成一个release分支）</li>\n<li>通知测试和相关得工程师分支名称</li>\n<li>git pull origin release/x.x（最终测试完成后拉回分支最新代码）</li>\n<li>git flow release finish x.x（最终修改和测试完成后，结束release版本以供发布）</li>\n<li>git push origin develo (发布最新的develop)</li>\n<li>git push origin master（发布最终得master分支）</li>\n</ol>\n<h3><span id=\"紧急debug流程\">紧急debug流程</span></h3><ol>\n<li>git pull origin master（更新master分支为最新）</li>\n<li>git checkout master（切换到master分支）</li>\n<li>git flow hotfix start x.x.x（生成一个hotfix分支）</li>\n<li>通知相关得工程师和测试人员hotfix分支名称</li>\n<li>git pull origin hotfix/x.x.x（最终测试完成后拉回分支最新代码）</li>\n<li>git flow hot fix finish x.x.x（最终修改和测试完成后，结束hot fix以供发布）</li>\n<li>git push origin master（发布最终得master分支）     在全部的流程中，工程师必须维护自己的feature分支保证代码最新，减少合并时的冲突。</li>\n</ol>\n<p>研发经理必须维护release分支，将最新的hotfix都合并进去，保证代码最新，减少合并时的冲突。</p>\n<p>在提交代码时还要注意判断对代码的修改是否是自己的，多用diff工具，多查看log，防止代码回溯</p>\n","categories":["version-control"],"tags":["git"]},{"title":"MySQL主从复制、读写分离理、实践","url":"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6\">主从复制</a><ul>\n<li><a href=\"#%E5%8E%9F%E7%90%86\">原理</a></li>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E7%9A%84%E5%A4%8D%E5%88%B6%E7%B1%BB%E5%9E%8B\">支持的复制类型</a></li>\n<li><a href=\"#%E5%A4%8D%E5%88%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B\">复制的工作过程</a></li>\n<li><a href=\"#mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%BB%B6%E8%BF%9F\">MySQL主从复制延迟</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB\">读写分离</a><ul>\n<li><a href=\"#%E5%8E%9F%E7%90%86-1\">原理</a></li>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\">实现方式</a><ul>\n<li><a href=\"#%E5%9F%BA%E4%BA%8E%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0\">基于程序代码内部实现</a></li>\n<li><a href=\"#%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%90%86%E5%B1%82%E5%AE%9E%E7%8E%B0\">基于中间代理层实现</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#mysql-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA\">MySQL 主从复制架构搭建</a><ul>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE\">服务器配置</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#mysql-%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5\">mysql 主从服务器时间同步</a></li>\n<li><a href=\"#%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-mysql-%E9%85%8D%E7%BD%AE\">主服务器的 mysql 配置</a></li>\n<li><a href=\"#%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-mysql-%E9%85%8D%E7%BD%AE\">从服务器的 mysql 配置</a></li>\n</ul>\n</li>\n<li><a href=\"#mysql-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA\">MySQL 读写分离架构搭建</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"主从复制\">主从复制</span></h1><h2><span id=\"原理\">原理</span></h2><p>MySQL 的主从复制和 MySQL 的读写分离两者有着紧密联系，首先要部署主从复制，只有主从复制完成了，才能在此基础上进行数据的读写分离。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>主从复制的核心：2个日志、3个线程</li>\n</ul>\n<p>master 线程：bin log 二进制日志、dump 线程</p>\n<p>master 上的 dump 线程会监控 bin log 二进制日志的更新，若有更新会通知 slave的 I/O 线程</p>\n<p>slave：relay log 中继日志、I/O 线程、SQL 线程</p>\n<p>线程1：</p>\n<p>slave上的 I/O 线程会向 master 申请同步 bin log 二进制日志的更新内容，slave的 I/O 线程把更新内容写入自己的中继日志</p>\n<p>线程2:</p>\n<p>slave 的 SQL 线程把日志中的更新语句同步执行到内容，以达到和 master 数据库趋于一致</p>\n<h2><span id=\"支持的复制类型\">支持的复制类型</span></h2><p>STATEMENT：基于语句的复制，在主服务器上执行的 SQL 语句，在从服务器上执行同样的语句；MySQL 默认采用基于语句的复制，效率比较高</p>\n<p>ROW：基于行的复制，把改变的内容复制过去，而不是把命令在从服务器上执行一遍</p>\n<p>MIXED：混合类型的复制，默认采用基于语句的复制，一旦发现基于语句无法精确复制时，就会采用基于行的复制</p>\n<h2><span id=\"复制的工作过程\">复制的工作过程</span></h2><p>① 在每个事务更新数据完成之前，Master 都会在二进制日志记录这些改变；写入二进制日志完成后，Master 通知存储引擎提交事务；</p>\n<p>② Slave 将 Master 的 Binary log 复制到其中继日志</p>\n<p>首先，Slave 开始一个工作线程——I/O 线程，I/O 线程在 Master 上打开一个普通的连接，然后开始 Binlog dump process；Binlog dump process 从 Master 的二进制日志中读取时间，如果已经跟上 Master，它会睡眠并等待Master 产生新的时间；I/O 线程将做这些事件写入中继日志；</p>\n<p>③ SQL slave thread（SQL 从线程）处理该过程的最后一步</p>\n<p>SQL 线程从中继日志读取事件，并重放其中的事件而更新 Slave 的数据，使其与 Master 中的数据一致；只要该线程与 I/O 线程保持一致，中继日志通常会位于 OS 的缓存中，所以中继日志的开销很小；</p>\n<p>④ 复制过程有一个很重要的限制，即复制在 Slave 上是串行化的，也就是说 Master 上的并行更新操作不能在 Slave 上并行操作。</p>\n<img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/e29fda3afe724f3389bfe316fbe4a916.jpeg\" alt=\"img\" style=\"zoom: 67%;\">\n\n<h2><span id=\"mysql主从复制延迟\">MySQL主从复制延迟</span></h2><p>（1）master 服务器高并发，形成大量事务</p>\n<p>（2）网络延迟</p>\n<p>（3）主从硬件设备导致：cpu主频、内存io、硬盘io</p>\n<p>（4）本来就不是同步复制、而是异步复制</p>\n<p>（5）从库优化 Mysql 参数，比如增大 innodb_buffer_pool_size，让更多操作在 Mysql 内存中完成，减少磁盘操作。</p>\n<p>（6）从库使用高性能主机，包括 cpu 强悍、内存加大。避免使用虚拟云主机，使用物理主机，这样提升了I/O方面性能。</p>\n<p>（7）从库使用SSD磁盘</p>\n<p>（8）网络优化，避免跨机房实现同步</p>\n<h1><span id=\"读写分离\">读写分离</span></h1><h2><span id=\"原理\">原理</span></h2><ul>\n<li>读写分离就是只在主服务器上写，只在从服务器上读</li>\n<li>基本的原理是让主数据库处理事务性查询，而从数据库处理 select 查询。数据库复制被用来把主数据库上事务性查询导致的变更同步到集群中的从数据库</li>\n</ul>\n<img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/d895d08f8c0f41589bb66881262daf99.jpeg\" alt=\"img\" style=\"zoom:67%;\">\n\n<h2><span id=\"实现方式\">实现方式</span></h2><ul>\n<li>读写分离分为以下两种∶</li>\n</ul>\n<h3><span id=\"基于程序代码内部实现\">基于程序代码内部实现</span></h3><p>在代码中根据 select、insert，进行路由分类，这类方法也是目前生产环境应用最广泛的。</p>\n<p>优点是性能较好，因为在程序代码中实现，不需要增加额外的设备为硬件开支; 缺点是需要开发人员来实现，运维人员无从下手。</p>\n<p>但是并不是所有的应用都适合在程序代码中实现读写分离，像一些大型复杂的 Java 应用，如果在程序代码中实现读写分离对代码改动就较大。</p>\n<h3><span id=\"基于中间代理层实现\">基于中间代理层实现</span></h3><p>代理一般位于客户端和服务器之间， 代理服务器接到客户端请求后通过判断后转发到后端数据库， 有以下代表性程序：</p>\n<p>（1） <strong>MySQL-Proxy</strong> ：MySQL-Proxy 为 MySOL开源项目， 通过其自带的 lua 脚本进行SOL 判断。</p>\n<p>（2） <strong>Atlas</strong> ：是由奇虎360的Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目。它是在mysql-proxy0.8.2版本的基础上，对其进行了优化， 增加了一些新的功能特性。360内部使用Atlas运行的mysql业务，每天承载的读写请求数达几十亿条。支持事物以 及存储过程。</p>\n<p>（3） <strong>Amoeba</strong> ：由陈思儒开发，作者曾就职于阿里巴巴。该程序由Jaya语言进行开发，阿里巴巴将其用于生产环境。但是它不支持事务和存储过程。</p>\n<p>由于使用 MySQL Proxy 需要写大量的 Lua 脚本，这些 Lua 并不是现成的，而是需要自己去写。这对于并不熟悉 MySQL Proxy 内置变量和 MySQL Protocol 的人来说是非常困难的。</p>\n<p>Amoeba是一个非常容易使用、可移植性非常强的软件。因此它在生产环境中被广泛应用于数据库的代理层。</p>\n<p>(4) <strong>mycat</strong>:</p>\n<h1><span id=\"mysql-主从复制架构搭建\">MySQL 主从复制架构搭建</span></h1><h2><span id=\"服务器配置\">服务器配置</span></h2><table>\n<thead>\n<tr>\n<th><strong>主机名</strong></th>\n<th><strong>操作系统</strong></th>\n<th><strong>IP地址</strong></th>\n<th><strong>所需软件</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Master</td>\n<td>CentOS 7</td>\n<td>192.168.10.14</td>\n<td>mysql-5.7</td>\n</tr>\n<tr>\n<td>Amoeba</td>\n<td>CentOS 7</td>\n<td>192.168.10.13</td>\n<td>jdk1.6、Amoeba</td>\n</tr>\n<tr>\n<td>Slave1</td>\n<td>CentOS 7</td>\n<td>192.168.10.16</td>\n<td>mysql-5.7</td>\n</tr>\n<tr>\n<td>Slave2</td>\n<td>CentOS 7</td>\n<td>192.168.10.19</td>\n<td>mysql-5.7</td>\n</tr>\n<tr>\n<td>client端</td>\n<td>CentOS 7</td>\n<td>192.168.10.26</td>\n<td>mysql5.7</td>\n</tr>\n</tbody></table>\n<p>修改主机名:</p>\n<p>在各主机上执行如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname amoeba</span><br><span class=\"line\">hostnamectl set-hostname master</span><br><span class=\"line\">hostnamectl set-hostname slave1</span><br><span class=\"line\">hostnamectl set-hostname slave2</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"环境准备\">环境准备</span></h2><p>#关闭防火墙与安全增强系统</p>\n<p>systemctl stop firewalld &amp;&amp; systemctl disable firewalld</p>\n<p>setenforce 0</p>\n<p>setenforce: SELinux is disabled</p>\n<h2><span id=\"mysql-主从服务器时间同步\">mysql 主从服务器时间同步</span></h2><p>主服务器：192.168.10.14</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\">#yum install -y ntp</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\">#vim /etc/ntp.conf \t\t\t\t\t\t\t#尾行加入下面内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">server 127.127.10.0\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">#设置本地是时钟源，注意修改自己的网段</span></span><br><span class=\"line\">fudge 127.127.10.0 stratum 8\t\t\t\t\t\t\t\t\t<span class=\"comment\">#设置时间层级为 8（限制在 15 内）</span></span><br><span class=\"line\">[root@master ~]<span class=\"comment\">#systemctl start ntpd</span></span><br></pre></td></tr></table></figure>\n\n<p>slave1 ：192.168.10.16</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ky19 ~]<span class=\"comment\">#yum install -y ntp ntpdate</span></span><br><span class=\"line\">[root@ky19 ~]<span class=\"comment\">#systemctl start ntpd </span></span><br><span class=\"line\">[root@ky19 ~]<span class=\"comment\"># /usr/sbin/ntpdate 192.168.10.14              #时间同步</span></span><br><span class=\"line\">27 Jun 20:45:40 ntpdate[20801]: the NTP socket is <span class=\"keyword\">in</span> use, exiting</span><br><span class=\"line\"></span><br><span class=\"line\">[root@ky19 ~]<span class=\"comment\">#crontab -e\t\t\t\t\t\t\t\t\t#设置计划任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">*/30 * * * * /usr/sbin/ntpdate 192.168.10.14</span><br></pre></td></tr></table></figure>\n\n<p>slave2 ：192.168.10.26</p>\n<p>同slave1</p>\n<h2><span id=\"主服务器的-mysql-配置\">主服务器的 mysql 配置</span></h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[root@localhost</span> <span class=\"string\">~]#vim /etc/my.cnf</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#添加下面配置</span></span><br><span class=\"line\"><span class=\"meta\">server-id</span> = <span class=\"string\">1 #定义 server-id，每台主机不可相同</span></span><br><span class=\"line\"><span class=\"meta\">log-bin</span>=<span class=\"string\">master-bin #主服务器开启二进制日志</span></span><br><span class=\"line\"><span class=\"attr\">binlog_format</span> = <span class=\"string\">MIXED #本次使用 MIXED 模式</span></span><br><span class=\"line\"><span class=\"meta\">log-slave-updates</span>=<span class=\"string\">true #允许从服务器更新二进制日志</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#注意：default-character-set=utf8 这个需要注释掉，不然会报错</span></span><br></pre></td></tr></table></figure>\n\n<p>systemctl restart mysqld.service #重启服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置从服务器账号并授权</span></span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\"><span class=\"comment\">#给从服务器授权</span></span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class=\"string\">&#x27;myslave&#x27;</span>@<span class=\"string\">&#x27;192.168.10.%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\"><span class=\"comment\">#File 列显示日志名，Position 列显示偏移量</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/8c5b796ff99d47d190f4f63f39932057.jpeg\" alt=\"img\" style=\"zoom:67%;\">\n\n<h2><span id=\"从服务器的-mysql-配置\">从服务器的 mysql 配置</span></h2><p>slave1 配置(192.168.10.16)</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vim</span> <span class=\"string\">/etc/my.cnf</span></span><br><span class=\"line\"><span class=\"meta\">server-id</span> = <span class=\"string\">2 # 注意 id 与其他主机都不能相同</span></span><br><span class=\"line\"><span class=\"meta\">relay-log</span>=<span class=\"string\">relay-log-bin #开启中继日志，从主服务器上同步日志文件记录到本地</span></span><br><span class=\"line\"><span class=\"meta\">relay-log-index</span>=<span class=\"string\">slave-relay-bin.index #定义中继日志文件的位置和名称</span></span><br><span class=\"line\"><span class=\"attr\">relay_log_recovery</span> = <span class=\"string\">1 #选配项</span></span><br></pre></td></tr></table></figure>\n\n<p>#当 slave 从库宕机后，假如 relay-log 损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的 relay-log，</p>\n<p>并且重新从 master 上获取日志，这样就保证了relay-log 的完整性。</p>\n<p>默认情况下该功能是关闭的，将 relay_log_recovery 的值设置为 1 时， 可在 slave 从库上开启该功能，建议开启。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\"><span class=\"comment\">#配置同步，注意 master_log_file 和 master_log_pos 的值要与 Master 查询的一致</span></span><br><span class=\"line\">mysql&gt; CHANGE master to master_host=<span class=\"string\">&#x27;192.168.10.14&#x27;</span>,master_user=<span class=\"string\">&#x27;myslave&#x27;</span>,master_password=<span class=\"string\">&#x27;123456&#x27;</span>,master_log_file=<span class=\"string\">&#x27;master-bin.000002&#x27;</span>,master_log_pos=603;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; start slave; <span class=\"comment\">#启动同步，如有报错执行 reset slave;</span></span><br><span class=\"line\">mysql&gt; show slave status\\G; <span class=\"comment\">#查看 Slave 状态，确保 IO 和 SQL 线程都是 Yes，代表同步正常</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/050d946295234df2a247692eed2ea672.jpeg\" alt=\"img\"></p>\n<p>slave2 配置(192.168.10.26)</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vim</span> <span class=\"string\">/etc/my.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">server-id</span> = <span class=\"string\">3 #注意不能和 master 、slave1 相同</span></span><br><span class=\"line\"><span class=\"meta\">relay-log</span>=<span class=\"string\">relay-log-bin</span></span><br><span class=\"line\"><span class=\"meta\">relay-log-index</span>=<span class=\"string\">slave-relay-bin.index</span></span><br><span class=\"line\"><span class=\"attr\">relay_log_recovery</span> = <span class=\"string\">1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\">mysql&gt; CHANGE master to master_host=<span class=\"string\">&#x27;192.168.10.14&#x27;</span>,master_user=<span class=\"string\">&#x27;myslave&#x27;</span>,master_password=<span class=\"string\">&#x27;123456&#x27;</span>,master_log_file=<span class=\"string\">&#x27;master-bin.000002&#x27;</span>,master_log_pos=603;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show slave status\\G;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/800d8403a279462181dbf335ea479804.jpeg\" alt=\"img\"></p>\n<p>一般 Slave_IO_Running: No 的可能性</p>\n<ul>\n<li>网络不通</li>\n<li>my.cnf 配置有问题</li>\n<li>密码、file 文件名、pos 偏移量不对</li>\n<li>防火墙没有关闭</li>\n</ul>\n<p>验证主从复制</p>\n<p>主服务器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">mysql&gt; create database <span class=\"built_in\">test</span>;</span><br><span class=\"line\">mysql&gt; show databases;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/37b0decaaeeb45c2a8fdbadd234be50b.jpeg\" alt=\"img\" style=\"zoom:67%;\">\n\n<p>slave1(192.168.10.16)</p>\n<p>mysql&gt; show databases;</p>\n<img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/6ed6fbac20c1466aaad2d1301614ba2e.jpeg\" alt=\"img\" style=\"zoom:67%;\">\n\n<p>slave2(192.168.10.26)</p>\n<p>mysql&gt; show databases;</p>\n<img src=\"/2021/08/04/db-resource/mysql/mysql-ha/mysql-master-slave-01/dff141801b534f0aa9a452dfdae39be0.jpeg\" alt=\"img\" style=\"zoom:67%;\">\n\n<h1><span id=\"mysql-读写分离架构搭建\">MySQL 读写分离架构搭建</span></h1><p>各代理方式的实现在这里不做过多演示。</p>\n","categories":["mysql"],"tags":["mysql"]},{"title":"Kafka环境搭建","url":"/2021/07/12/technology-stack/mq/kafka/kafka-install/","content":"<h1><span id=\"介绍\">介绍</span></h1><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。<br>具备以下特点：</p>\n<p>高吞吐量、低延迟：kafka每秒可以处理百万条消息，它的延迟最低只有几毫秒，topic可以分多个partition, consumer group 对partition进行consumer操作<br>可扩展性：kafka集群支持热扩展<br>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失<br>容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）<br>高并发：支持数千个客户端同时读写<br>基于Kafka具备这么多特点，在大数据开发领域已经占据不可或缺的地位，我们在工作中就会不可避免与之打交道，那么搭建Kafka集群就非常有必要了，今天就来分享一下kafka 集群搭建的详细过程。</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"高可用搭建\">高可用搭建</span></h1><p>单节点安装不做介绍</p>\n<h2><span id=\"二进制文件搭建\">二进制文件搭建</span></h2><h3><span id=\"启动zookeeper\">启动zookeeper</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/zookeeper-server-start.sh config/zookeeper.properties</span><br></pre></td></tr></table></figure>\n\n<p>zk的配置这里不做介绍</p>\n<h3><span id=\"配置kafka\">配置kafka</span></h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vim</span> <span class=\"string\">/opt/module/kafka/config/server.properties</span></span><br><span class=\"line\"><span class=\"comment\"># 修改如下参数</span></span><br><span class=\"line\"><span class=\"comment\"># 集群内全局唯一标识，每个节点上需要设置不同的值</span></span><br><span class=\"line\"><span class=\"meta\">broker.id</span>=<span class=\"string\">0 </span></span><br><span class=\"line\"><span class=\"attr\">这个IP地址也是与本机相关的，每个节点上设置为自己的IP地址</span></span><br><span class=\"line\"><span class=\"attr\">listeners</span>=<span class=\"string\">PLAINTEXT://centos01:9092</span></span><br><span class=\"line\"><span class=\"comment\"># 存放kafka消息的</span></span><br><span class=\"line\"><span class=\"meta\">log.dirs</span>=<span class=\"string\">/opt/module/kafka/kafka-logs</span></span><br><span class=\"line\"><span class=\"meta\">zookeeper.connect</span>=<span class=\"string\">centos01:2181,centos02:2181,centos03:2181</span></span><br><span class=\"line\"><span class=\"comment\"># 如果是公网，则添加该配置</span></span><br><span class=\"line\"><span class=\"meta\">advertised.listeners</span>=<span class=\"string\">PLAINTEXT://192.168.20.10:9092   # 配置了本机ip</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入java环境</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 添加如下内容(注意：填写自己的java安装目录)</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/jre/lib/rt.jar:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib/dt.jar:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/module/kafka/bin</span><br><span class=\"line\"><span class=\"comment\"># 创建kafka启动脚本</span></span><br><span class=\"line\">vim kafka-cluster.sh</span><br><span class=\"line\"><span class=\"comment\"># 添加如下内容</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"string\">&quot;start&quot;</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> hadoop1 hadoop2 hadoop3</span><br><span class=\"line\">\t<span class=\"keyword\">do</span> </span><br><span class=\"line\">\t\t <span class=\"built_in\">echo</span> -------------------------------- <span class=\"variable\">$i</span> kafka 启动 ---------------------------</span><br><span class=\"line\">\t\tssh <span class=\"variable\">$i</span> <span class=\"string\">&quot;source /etc/profile;/opt/module/kafka/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;;</span><br><span class=\"line\"><span class=\"string\">&quot;stop&quot;</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> hadoop1 hadoop2 hadoop3</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> -------------------------------- <span class=\"variable\">$i</span> kafka 停止 ---------------------------</span><br><span class=\"line\">\t\tssh <span class=\"variable\">$i</span> <span class=\"string\">&quot;/opt/module/kafka/bin/kafka-server-stop.sh&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存退出后，修改执行权限</span></span><br><span class=\"line\">chmod +x ./kafka-cluster.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动kafka集群命令</span></span><br><span class=\"line\">./kafka-cluster.sh start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止kafka集群命令</span></span><br><span class=\"line\">./kafka-cluster.sh stop</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"测试\">测试</span></h3><p><strong>创建主题</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server centos01:9092</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看主题列表</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bin/kafka-topics.sh --describe --topic quickstart-events --bootstrap-server centos01:9092</span><br><span class=\"line\">Topic:quickstart-events  PartitionCount:1    ReplicationFactor:1 Configs:</span><br><span class=\"line\">    Topic: quickstart-events Partition: 0    Leader: 0   Replicas: 0 Isr: 0</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动控制台生产者</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server centos01:9092</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动控制台消费者</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bin/kafka-console-consumer.sh --topic quickstart-events --from-beginning --bootstrap-server centos01:9092</span><br></pre></td></tr></table></figure>","categories":["mq"],"tags":["mq","kafka"]},{"title":"httpie安装使用","url":"/2021/09/17/tools/net-tools/httpie/install-useage/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#httpie%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3\">HTTPie使用详解</a><ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85httpie\">安装httpie</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8httpie\">使用httpie</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"httpie使用详解\">HTTPie使用详解</span></h1><h2><span id=\"概述\">概述</span></h2><p>httpie是一个命令行形式的http客户端，它提供了简单的http命令，返回带代码高亮的结果信息，可以很方便的在http交互场景下进行测试、调试等。</p>\n<span id=\"more\"></span>\n\n<h2><span id=\"安装httpie\">安装httpie</span></h2><p>Windows</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install --upgrade httpie</span><br></pre></td></tr></table></figure>\n\n<p>Linux</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install httpie</span><br></pre></td></tr></table></figure>\n\n<p>macOS</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install httpie</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"使用httpie\">使用httpie</span></h2><p>使用语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http [flags] [METHOD] URL [ITEM [ITEM]]</span><br></pre></td></tr></table></figure>\n\n<p>METHOD没有指定时，默认为 get</p>\n<p>URL协议没有指定时，默认为 http://</p>\n<ul>\n<li><strong>get请求</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http httpbin.org/get name==test zhihu_id==test</span><br></pre></td></tr></table></figure>\n\n<p>等同于：</p>\n<p>http get <a href=\"https://link.zhihu.com/?target=http://httpbin.org/get\">http://httpbin.org/get</a></p>\n<p>若需要带参数时用 param==value 的形式</p>\n<ul>\n<li><strong>post请求</strong></li>\n</ul>\n<p>post请求时表单用 = ，默认为post</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http httpbin.org/post name=test </span><br><span class=\"line\">http httpbin.org/post name=test zhihu_id=test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>传递json</strong></li>\n</ul>\n<p>格式跟上面差不多，若传递值不是字符串时，用 :=</p>\n<p>若当进行post请求时，传递数据太多，我们可以直接传一个json类型文件，用 =@ 和 :=G</p>\n<p>test.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;hobbies&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;http&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;pies&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;John is a nice guy who likes pies.&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;married&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;bookmarks&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;HTTPie&quot;</span>: <span class=\"string\">&quot;http://httpie.org&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http httpbin.org/post myinfo=@test.json</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可直接重定向输入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http httpbin.org/post &lt; test.json</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>提交表单</strong></li>\n</ul>\n<p>提交表单只需添加 -f 或 –form即可</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http -f httpbin.org/post name=<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>设置请求头</strong></li>\n</ul>\n<p>从上图中可以看出，有些请求头是默认的，例如User-Agent为 “HTTPie/0.9.9”</p>\n<p>通常我们需要修改请求头，只需设置形式如： header:value</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http httpbin.org/get user-agent:Mozilla/5.0</span><br></pre></td></tr></table></figure>\n\n<p>若不需要某个头信息，只需形如 header： 即可</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http httpbin.org/get user-agent:</span><br></pre></td></tr></table></figure>\n\n<p>若某个头信息设置成空值，形如 header; 即可</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http httpbin.org/get user-agent:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>重定向</strong></li>\n</ul>\n<p>默认不会自动重定向</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不会重定向</span></span><br><span class=\"line\">http httpbin.org/redirect/1</span><br></pre></td></tr></table></figure>\n\n<p>若要跟随重定向，显示最终的响应结果，在前面加 –follow 或 -F</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http -F httpbin.org/redirect/1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>使用代理</strong></li>\n</ul>\n<p>通过参数 –proxy</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--proxy=http:http://1.1.1.1:1000</span><br><span class=\"line\">---proxy=https:https://1.1.1.1:1000</span><br></pre></td></tr></table></figure>\n\n<p>basic授权为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http --proxy=http:http://user:pass@10.10.1.10:3128 example.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>SSL证书验证</strong></li>\n</ul>\n<p>使用参数 –verify=no 来跳过SSL验证，默认是yes</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http --verify=no httpbin.org/get</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>输出参数选项</strong></li>\n</ul>\n<p>可以选择性的打印出响应头、响应体、或两者</p>\n<p>响应头： –headers 或 -h</p>\n<p>响应体： –body 或 -b</p>\n<p>两者： –verbose 或 -v 默认输出是两者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http -h httpbin.org/get</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>下载文件</strong></li>\n</ul>\n<p>使用参数 –download 或 -d 下载</p>\n<p>使用参数 –output 或 -o 来指定输出地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">http -d -o /user/<span class=\"built_in\">local</span> https://url</span><br></pre></td></tr></table></figure>\n\n","categories":["tools"],"tags":["tools"]},{"title":"深度学习框架介绍","url":"/2022/03/15/Ai/deep-learning-framework/common/introduction/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6\">深度学习框架</a><ul>\n<li><a href=\"#caffe\">Caffe</a></li>\n<li><a href=\"#tensorflow\">Tensorflow</a></li>\n<li><a href=\"#keras\">Keras</a></li>\n<li><a href=\"#pytorch\">pytorch</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"深度学习框架\">深度学习框架</span></h1><p><strong>列举常见的深度学习框架</strong></p>\n<p>机器学习框架和深度学习框架之间也是有区别的。本质上，机器学习框架涵盖用于分类，回归，聚类，异常检测和数据准备的各种学习方法，也可以包括神经网络方法。深度学习或深度神经网络（DNN）框架涵盖具有许多隐藏层的各种神经网络拓扑，包括模式识别的多步骤过程。网络中的层越多，可以提取用于聚类和分类的特征越复杂。常见的Caffe，CNTK，DeepLearning4j，Keras，MXNet和TensorFlow是深度学习框架。 而Scikit-learning和Spark MLlib是机器学习框架。 Theano则跨越了这两个类别。</p>\n<p>深度学习框架比较</p>\n<p>神经网络一般包括：训练，测试两大阶段。训练就是把训练数据和神经网络模型（AlexNet、RNN等神经网络训练框架Caffe等）用CPU或GPU提炼出模型参数的过程。测试就是把测试数据用训练好的模型（神经网络模型+模型参数）运行后查看结果。而caffe，keras，tensorflow就是把训练过程所涉及的环节数据统一抽象，形成可使用框架。</p>\n<p>接下来的篇幅将会重点介绍深度学习的三个框架caffe、tensorflow和keras，如果只是需要使用传统的机器学习基础算法使用scikit-learning和spark MLlib则更为合适。</p>\n<span id=\"more\"></span>\n\n<h2><span id=\"caffe\">Caffe</span></h2><p>1、概念</p>\n<p>Caffe是一个清晰而高效的深度学习框架，也是一个被广泛使用的开源深度学习框架，在Tensorflow出现之前一直是深度学习领域Github star最多的项目。主要优势为：上手容易，网络结构都是以配置文件形式定义，不需要用代码设计网络。训练速度快，组件模块化，可以方便的拓展到新的模型和学习任务上。但是Caffe最开始设计时的目标只针对于图像，没有考虑文本、语音或者时间序列的数据，因此Caffe对卷积神经网络的支持非常好，但是对于时间序列RNN，LSTM等支持的不是特别充分。Caffe工程的models文件夹中常用的网络模型比较多，比如Lenet、AlexNet、ZFNet、VGGNet、GoogleNet、ResNet等。</p>\n<p>2、Caffe的模块结构</p>\n<p>Caffe由低到高依次把网络中的数据抽象成Blob, 各层网络抽象成Layer ，整个网络抽象成Net，网络模型的求解方法抽象成Solver。</p>\n<p>1.Blob表示网络中的数据，包括训练数据，网络各层自身的参数，网络之间传递的数据都是通过Blob来实现的，同时Blob数据也支持在CPU与GPU上存储，能够在两者之间做同步。</p>\n<p>2.Layer是对神经网络中各种层的抽象，包括卷积层和下采样层，还有全连接层和各种激活函数层等。同时每种Layer都实现了前向传播和反向传播，并通过Blob来传递数据。</p>\n<p>3.Net是对整个网络的表示，由各种Layer前后连接组合而成，也是所构建的网络模型。</p>\n<p>4.Solver 定义了针对Net网络模型的求解方法，记录网络的训练过程，保存网络模型参数，中断并恢复网络的训练过程。自定义Solver能够实现不同的网络求解方式。</p>\n<p>3、安装方式</p>\n<p>Caffe 需要预先安装比较多的依赖项，CUDA，snappy，leveldb，gflags，glog，szip，lmdb，OpenCV，hdf5，BLAS，boost、ProtoBuffer等；</p>\n<p>Caffe官网：<a href=\"http://caffe.berkeleyvision.org/%EF%BC%9B\">http://caffe.berkeleyvision.org/；</a></p>\n<p>Caffe Github : <a href=\"https://github.com/BVLC/caffe%EF%BC%9B\">https://github.com/BVLC/caffe；</a></p>\n<p>Caffe 安装教程：</p>\n<p><a href=\"http://caffe.berkeleyvision.org/installation.html%EF%BC%8C\">http://caffe.berkeleyvision.org/installation.html，</a></p>\n<p><a href=\"http://blog.csdn.net/yhaolpz/article/details/71375762%EF%BC%9B\">http://blog.csdn.net/yhaolpz/article/details/71375762；</a></p>\n<p>Caffe 安装分为CPU和GPU版本，GPU版本需要显卡支持以及安装CUDA</p>\n<p>4、使用Caffe搭建神经网络</p>\n<p>【caffe搭建神经网络流程图】</p>\n<p><img src=\"/2022/03/15/Ai/deep-learning-framework/common/introduction/image-20221002184605813.png\" alt=\"image-20221002184605813\"></p>\n<p>在上述流程中，步骤2是核心操作，也是caffe使用最让人头痛的地方，keras则对该部分做了更高层的抽象，让使用者能够快速编写出自己想要实现的模型。</p>\n<h2><span id=\"tensorflow\">Tensorflow</span></h2><p>1、概念</p>\n<p>TensorFlow是一个使用数据流图进行数值计算的开源软件库。图中的节点表示数学运算，而图边表示节点之间传递的多维数据阵列（又称张量）。灵活的体系结构允许使用单个API将计算部署到服务器或移动设备中的某个或多个CPU或GPU。Tensorflow涉及相关概念解释如下：</p>\n<p><strong>1）符号计算</strong></p>\n<p>符号计算首先定义各种变量，然后建立一个“计算图”，图中规定了各个变量之间的计算关系。 符号计算也叫数据流图，其过程如下图2-1所示，数据是按图中黑色带箭头的线流动的。</p>\n<p><img src=\"/2022/03/15/Ai/deep-learning-framework/common/introduction/image-20221002185428866.png\" alt=\"image-20221002185428866\"></p>\n<p>【2-1 数据流图示例】</p>\n<p>数据流图用“结点”（nodes）和“线”(edges)的有向图来描述数学计算。</p>\n<p>① “节点” 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点/输出（push out）的终点，或者是读取/写入持久变量（persistent variable）的终点。</p>\n<p>② “线”表示“节点”之间的输入/输出关系。</p>\n<p>③ 在线上流动的多维数据阵列被称作“张量”。</p>\n<p><strong>2）张量</strong></p>\n<p>张量(tensor)，可以看作是向量、矩阵的自然推广，用来表示广泛的数据类型，张量的阶数也叫维度。</p>\n<p>0阶张量，即标量，是一个数。1阶张量，即向量，是一组有序排列的数。2阶张量，即矩阵，是一组向量有序的排列起来。3阶张量，即立方体，是一组矩阵上下排列起来。以此类推。</p>\n<p><strong>3）数据格式(data_format)</strong></p>\n<p>目前主要有两种方式来表示张量：</p>\n<p>① th模式或channels_first模式，Theano和caffe使用此模式。</p>\n<p>② tf模式或channels_last模式，TensorFlow使用此模式。</p>\n<p>举例说明两种模式的区别：对于100张RGB3通道的16×32（高为16宽为32）彩色图，th表示方式：（100,3,16,32）tf表示方式：（100,16,32,3）唯一的区别就是表示通道个数3的位置不一样。</p>\n<p>2、Tensorflow的模块结构</p>\n<p>Tensorflow/core目录包含了TF核心模块代码，具体结构如图2-2所示：</p>\n<p>【图 2-2 tensorflow代码模块结构】</p>\n<p><img src=\"/2022/03/15/Ai/deep-learning-framework/common/introduction/image-20221002185512962.png\" alt=\"image-20221002185512962\"></p>\n<p>3、安装方式</p>\n<p>1、官网下载naconda安装：<a href=\"https://www.anaconda.com/download/%EF%BC%9B\">https://www.anaconda.com/download/；</a></p>\n<p>2、依次在Anaconda Prompt控制台，按以下5个步骤输入指令进行安装：</p>\n<ol>\n<li><p>安装py3+ cmd : conda create -n py3.6 python=3.6 anaconda；</p>\n</li>\n<li><p>激活虚拟环境 cmd : activate py3.6</p>\n</li>\n<li><p>激活TSF预安装cmd: conda create -n tensorflow python=3.6；activate tensorflow；</p>\n</li>\n<li><p>安装TSF：pip install —ignore-installed —upgrade tensorflow；pip install —ignore-installed —upgrade tensorflow-gpu；</p>\n</li>\n<li><p>退出虚拟环境cmd ：deactivate py3.6。</p>\n</li>\n</ol>\n<p>4、使用Tensorflow搭建神经网络</p>\n<p>使用Tensorflow搭建神经网络主要包含以下6个步骤：</p>\n<ol>\n<li><p>定义添加神经层的函数；</p>\n</li>\n<li><p>准备训练的数据；</p>\n</li>\n<li><p>定义节点准备接收数据；</p>\n</li>\n<li><p>定义神经层：隐藏层和预测层；</p>\n</li>\n<li><p>定义loss表达式；</p>\n</li>\n<li><p>选择optimizer使loss达到最小；</p>\n</li>\n<li><p>对所有变量进行初始化，通过sess.run optimizer，迭代多次进行学习。</p>\n</li>\n</ol>\n<p>5、示例代码</p>\n<p>Tensorflow 构建神经网络识别手写数字，具体代码如下所示：</p>\n<p>importtensorflow as tfimportnumpy as np# 添加层defadd_layer(inputs, in_size, out_size, activation_function=None):  # add one more layer andreturnthe output ofthislayer  Weights= tf.Variable(tf.random_normal([in_size, out_size]))  biases = tf.Variable(tf.zeros([1, out_size]) +0.1)  Wx_plus_b = tf.matmul(inputs, Weights) + biases</p>\n<p>ifactivation_function is None:    outputs = Wx_plus_b</p>\n<p>else:    outputs = activation_function(Wx_plus_b)</p>\n<p>returnoutputs#1.训练的数据# Make up some real data x_data = np.linspace(-1,1,300)[:, np.newaxis]noise = np.random.normal(0,0.05, x_data.shape)y_data = np.square(x_data) -0.5+ noise#2.定义节点准备接收数据# define placeholderforinputs to network  xs = tf.placeholder(tf.float32, [None,1])ys = tf.placeholder(tf.float32, [None,1])#3.定义神经层：隐藏层和预测层# add hidden layer 输入值是 xs，在隐藏层有10个神经元  l1 = add_layer(xs,1,10, activation_function=tf.nn.relu)# add output layer 输入值是隐藏层 l1，在预测层输出1个结果prediction = add_layer(l1,10,1, activation_function=None)#4.定义 loss 表达式# the error between prediciton and real data   loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),           reduction_indices=[1]))#5.选择 optimizer 使 loss 达到最小          # 这一行定义了用什么方式去减少 loss，学习率是0.1</p>\n<p>train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)# important step 对所有变量进行初始化init = tf.initialize_all_variables()sess = tf.Session()# 上面定义的都没有运算，直到 sess.run 才会开始运算sess.run(init)# 迭代1000次学习，sess.run optimizerfori inrange(1000):  # training train_step 和 loss 都是由 placeholder 定义的运算，所以这里要用 feed 传入参数  sess.run(train_step, feed_dict={xs: x_data, ys: y_data})ifi % 50==0:    #to see the step improvement</p>\n<p>print(s</p>\n<p>ess.run(loss, feed_dict={xs: x_data, ys: y_data}))</p>\n<h2><span id=\"keras\">Keras</span></h2><p>1、概念</p>\n<p>Keras由纯Python编写而成并基于Tensorflow、Theano以及CNTK后端，相当于Tensorflow、Theano、CNTK的上层接口，号称10行代码搭建神经网络，具有操作简单、上手容易、文档资料丰富、环境配置容易等优点，简化了神经网络构建代码编写的难度。目前封装有全连接网络、卷积神经网络、RNN和LSTM等算法。</p>\n<p>Keras有两种类型的模型，序贯模型（Sequential）和函数式模型（Model），函数式模型应用更为广泛，序贯模型是函数式模型的一种特殊情况。</p>\n<ol>\n<li><p>序贯模型（Sequential)：单输入单输出，一条路通到底，层与层之间只有相邻关系，没有跨层连接。这种模型编译速度快，操作也比较简单。</p>\n</li>\n<li><p>函数式模型（Model）：多输入多输出，层与层之间任意连接。这种模型编译速度慢。</p>\n</li>\n</ol>\n<p>2、Keras的模块结构</p>\n<p>Keras主要由5大模块构成，模块之间的关系及每个模块的功能如图3-1所示：</p>\n<p>【图 3-1 keras模块结构图】</p>\n<p><img src=\"/2022/03/15/Ai/deep-learning-framework/common/introduction/image-20221002185553176.png\" alt=\"image-20221002185553176\"></p>\n<p>3、安装方式</p>\n<p>Keras的安装为以下三个步骤：</p>\n<ol>\n<li><p>安装anaconda（python）；</p>\n</li>\n<li><p>用于科学计算的python发行版，支持Linux、Mac、Windows系统，提供了包管理与环境管理的功能，可以很方便的解决多版本python并存、切换以及各种第三方包安装问题；</p>\n</li>\n<li><p>利用pip或者conda安装numpy、keras、 pandas、tensorflow等库；</p>\n</li>\n</ol>\n<p>下载地址： </p>\n<p><a href=\"https://www.anaconda.com/what-is-anaconda/%E3%80%82\">https://www.anaconda.com/what-is-anaconda/。</a></p>\n<p>4、使用Keras搭建神经网络</p>\n<p>使用keras搭建一个神经网络，包括5个步骤，分别为模型选择、构建网络层、编译、训练和预测。每个步骤操作过程中使用到的keras模块如图3-2所示：</p>\n<p>【3-2 使用keras搭建神经网络步骤】</p>\n<p><img src=\"/2022/03/15/Ai/deep-learning-framework/common/introduction/image-20221002185622970.png\" alt=\"image-20221002185622970\"></p>\n<p>5、示例代码</p>\n<p>Kears构建神经网络识别手写数字，具体代码如下所示：</p>\n<p>from keras.models import Sequential  </p>\n<p>from keras.layers.core import Dense, Dropout, Activation  </p>\n<p>from keras.optimizers import SGD  </p>\n<p>from keras.datasets import mnist  </p>\n<p>import numpy</p>\n<p>‘’’</p>\n<p>  第一步：选择模型</p>\n<p>‘’’</p>\n<p>model = Sequential()</p>\n<p>‘’’</p>\n<p> 第二步：构建网络层</p>\n<p>‘’’</p>\n<p>model.add(Dense(500,input_shape=(784,))) # 输入层，28*28=784  </p>\n<p>model.add(Activation(‘tanh’)) # 激活函数是tanh  </p>\n<p>model.add(Dropout(0.5)) # 采用50%的dropout</p>\n<p>model.add(Dense(500)) # 隐藏层节点500个  </p>\n<p>model.add(Activation(‘tanh’))  </p>\n<p>model.add(Dropout(0.5))</p>\n<p>model.add(Dense(10)) # 输出结果是10个类别，所以维度是10  </p>\n<p>model.add(Activation(‘softmax’)) # 最后一层用softmax作为激活函数</p>\n<p>‘’’</p>\n<p> 第三步：编译</p>\n<p>‘’’</p>\n<p>sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True) # 优化函数，设定学习率（lr）等参数  </p>\n<p>model.compile(loss=’categorical_crossentropy’, optimizer=sgd, class_mode=’categorical’) # 使用交叉熵作为loss函数</p>\n<p>‘’’</p>\n<p> 第四步：训练</p>\n<p> .fit的一些参数</p>\n<p> batch_size：对总的样本数进行分组，每组包含的样本数量</p>\n<p> epochs ：训练次数</p>\n<p> shuffle：是否把数据随机打乱之后再进行训练</p>\n<p> validation_split：拿出百分之多少用来做交叉验证</p>\n<p> verbose：屏显模式 0：不输出  1：输出进度  2：输出每次的训练结果</p>\n<p>‘’’</p>\n<p>(X_train, y_train), (X_test, y_test) = mnist.load_data() # 使用Keras自带的mnist工具读取数据（第一次需要联网）</p>\n<p># 由于mist的输入数据维度是(num, 28, 28)，这里需要把后面的维度直接拼起来变成784维  </p>\n<p>X_train = X_train.reshape(X_train.shape[0], X_train.shape[1] * X_train.shape[2])</p>\n<p>X_test = X_test.reshape(X_test.shape[0], X_test.shape[1] * X_test.shape[2])  </p>\n<p>Y_train = (numpy.arange(10) == y_train[:, None]).astype(int)</p>\n<p>Y_test = (numpy.arange(10) == y_test[:, None]).astype(int)</p>\n<p>model.fit(X_train,Y_train,batch_size=200,epochs=50,shuffle=True,verbose=0,validation_split=0.3)</p>\n<p>model.evaluate(X_test, Y_test, batch_size=200, verbose=0)</p>\n<p>‘’’</p>\n<p>  第五步：输出</p>\n<p>‘’’</p>\n<p>print(“test set”)</p>\n<p>scores = model.evaluate(X_test,Y_test,batch_size=200,verbose=0)</p>\n<p>print(“”)</p>\n<p>print(“The test loss is %f” % scores)</p>\n<p>result = model.predict(X_test,batch_size=200,verbose=0)</p>\n<p>result_max = numpy.argmax(result, axis = 1)</p>\n<p>test_max = numpy.argmax(Y_test, axis = 1)</p>\n<p>result_bool = numpy.equal(result_max, test_max)</p>\n<p>true_num = numpy.sum(result_bool)</p>\n<p>print(“”)</p>\n<p>print(“The accuracy of the model is %f” % (true_num/len(result_bool)))</p>\n<p>（四）框架优缺点对比</p>\n<p>对比维度CaffeTensorflowKeras</p>\n<p>上手难度1、不用写代码，只需在.prototxt文件中定义网络结构就可以完成模型训练。2、安装复杂，且在.prototxt 文件内部设计网络结构比较受限，没有在 Python中设计网络结构方便自由。3、配置文件不能用编程的方式调整超参数，对交叉验证、超参数Grid Search 等操作无法很方便的支持。1、安装简便，教学资源丰富，根据样例能快速搭建出基础模型。2、有一定的使用门槛。编程范式和数学统计，都让非机器学习或数据科学背景的使用者有上手难度。3、因为其灵活性，因此是一个相对底层的框架，使用时需要编写大量的代码，重新发明轮子。1、安装简单，旨在让用户进行最快速的原型实验，让想法变为结果的这个过程最短，非常适合最前沿的研究。2、API使用方便，用户只需要将高级的模块拼在一起，就可以设计神经网络，降低了编程和阅读别人代码时的理解开销。</p>\n<p>框架维护GitHub项目，由伯克利视觉学中心（Berkeley Vision and Learning Center，BVLC）进行维护。被定义为最流行、最被认可的开源深度学习框架，框架结构优秀，拥有产品级的高质量代码，由 Google团队进行开发和维护，以及能力的加持。依然由google团队开发支持，API以tf.keras的形式打包在TensorFlow中；微软维护其CNTK后端；亚马逊AWS也在开发MXNet支持。其他支持的公司包括NVIDIA、Uber、苹果（通过CoreML）。</p>\n<p>支持语言C++/CudaC++ python (Go，Java，Lua，Javascript，或者是R)Python</p>\n<p>封装算法1、对卷积神经网络CNN的支持非常好，拥有大量训练好的经典模型（AlexNet、VGG、Inception）以及state-of-the-art（ResNet等）等模型，收藏在Model Zoo。2、对时间序列 RNN、LSTM 等支持得不是特别充分1、支持CNN与RNN， 也支持深度强化学习乃至其他计算密集的科学计算(如偏微分方程求解等)。2、计算图必须构建为静态图，这让很多计算变得难以实现，尤其是序列预测中经常使用的beam search。1、支持CNN和循环网络，支持级联的模型或任意的图结构的模型，从CPU上计算切换到GPU加速无须任何代码的改动。2、没有增强学习工具箱，自己修改实现很麻烦。封装得太高级，训练细节不能修改、penalty细节很难修改。</p>\n<p>模型部署1、程序运行稳定，代码质量高，适合对稳定性要求严格的生产环境，第一个主流的工业级深度学习框架。2、Caffe的底层基于C++，可在各种硬件环境编译并具有良好的移植性，支持Linux、Mac和Windows，也可以编译部署到移动设备系统如Android和iOS 上。1、性能好，可以同时运行多个大规模深度学习模型，支持模型生命周期管理、算法实验，并可以高效地利用GPU资源，让训练好的模型更快捷方便地投入到实际生产环境。2、灵活的移植性，可以将同一份代码几乎不经过修改就轻松地部署到有任意数量CPU或GPU的PC、服务器或者移动设备上。1、部署简便，使用TensorFlow、CNTK、Theano作为后端，简化了编程的复杂度，节约了尝试新网络结构的时间。2、模型越复杂，收益越大，尤其是在高度依赖权值共享、多模型组合、多任务学习等模型上，表现得非常突出。</p>\n<p>性能目前仅支持单机多GPU的训练，不支持分布式的训练。支持分布式计算，使GPU或TPU(Tensor Processing Unit)集群并行计算，共同训练出一个模型。对不同设备间的通信优化得不是很好，分布式性能还没有达到最优无法直接使用多GPU，对大规模的数据处理速度没有其他支持多 GPU和分布式的框架快。用TensorFLow backend后端时速度比纯TensorFLow下要慢很多</p>\n<h2><span id=\"pytorch\">pytorch</span></h2>","categories":["AI"],"tags":["AI"]},{"title":"开源产品集合","url":"/2022/05/21/open-project/open-project/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%BA%91%E5%8E%9F%E7%94%9F%E4%BA%A7%E5%93%81\">云原生产品</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>常用经典开源产品</p>\n<span id=\"more\"></span>\n\n<h2><span id=\"云原生产品\">云原生产品</span></h2><ol>\n<li><p>crane</p>\n<p>腾讯开源的基于 FinOps 的云资源分析与成本优化平台，它的愿景是在保证客户应用运行质量的前提下实现极致的降本。</p>\n<p>开源地址：<a href=\"https://github.com/gocrane/crane\">https://github.com/gocrane/crane</a></p>\n</li>\n<li><p>KubeGateway</p>\n<p>KubeGateway 是字节跳动针对 kube-apiserver 流量特征专门定制的七层网关，它彻底解决了 kube-apiserver 负载不均衡的问题，同时在社区范围内首次实现了对 kube-apiserver 请求的完整治理，包括请求路由、分流、限流、降级等，显著提高了 Kubernetes 集群的可用性。</p>\n<p>项目地址：<a href=\"https://github.com/kubewharf/kubegateway\">https://github.com/kubewharf/kubegateway</a></p>\n</li>\n</ol>\n<p>3.</p>\n","categories":["开源产品"],"tags":["开源产品"]},{"title":"MySQL双主复制","url":"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">准备工作：</a></li>\n<li><a href=\"#%E9%83%A8%E7%BD%B2-mysql-%E5%8F%8C%E4%B8%BB%E5%A4%8D%E5%88%B6\">部署 MySQL 双主复制</a><ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5\">配置时间同步</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E5%8F%8C%E4%B8%BB%E5%A4%8D%E5%88%B6\">配置双主复制</a><ul>\n<li><a href=\"#%E5%BB%BA%E7%AB%8B%E5%8F%8C%E4%B8%BB%E5%A4%8D%E5%88%B6\">建立双主复制</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%83%A8%E7%BD%B2-lvskeepalived-%E5%AE%9E%E7%8E%B0-mysql-%E5%8F%8C%E4%B8%BB%E5%A4%8D%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8\">部署 LVS+Keepalived 实现 MySQL 双主复制高可用</a><ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E4%B8%BB%E8%B0%83%E5%BA%A6%E5%99%A8\">配置主调度器</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E5%A4%87%E8%B0%83%E5%BA%A6%E5%99%A8\">配置备调度器</a></li>\n<li><a href=\"#%E7%BC%96%E5%86%99-lvs-%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC\">编写 LVS 启动脚本</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%AA%8C%E8%AF%81\">验证</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"前言\">前言</span></h1><p>mysql双主复制搭建高可用。</p>\n<span id=\"more\"></span>\n\n<h1><span id=\"准备工作\">准备工作：</span></h1><table>\n<thead>\n<tr>\n<th>master1</th>\n<th>192.168.1.1</th>\n<th>mysql-主</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master2</td>\n<td>192.168.1.2</td>\n<td>mysql-主</td>\n</tr>\n<tr>\n<td>keep1</td>\n<td>192.168.1.3</td>\n<td>keepalived-主，LVS</td>\n</tr>\n<tr>\n<td>keep2</td>\n<td>192.168.1.4</td>\n<td>keepalived-备，LVS</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1><span id=\"部署-mysql-双主复制\">部署 MySQL 双主复制</span></h1><p>注意：未安装 MySQL 数据库的可以先安装</p>\n<h2><span id=\"配置时间同步\">配置时间同步</span></h2><p>master1执行如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y ntp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/^server/s/^/#/g&#x27;</span> /etc/ntp.conf</span><br><span class=\"line\">cat &lt;&lt; <span class=\"string\">END &gt;&gt; /etc/ntp.conf</span></span><br><span class=\"line\"><span class=\"string\">server 127.127.1.0</span></span><br><span class=\"line\"><span class=\"string\">dudge 127.127.1.0 stratum 8</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart ntpd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> ntpd</span><br><span class=\"line\">netstat -anpu | grep ntp</span><br></pre></td></tr></table></figure>\n\n<p>master2:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install ntpdate</span><br><span class=\"line\">/usr/sbin/ntpdate 192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"配置双主复制\">配置双主复制</span></h1><p>master1 上操作</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/4172c0f06d8741aba24f66b9e43c7409.png\" alt=\"img\"></p>\n<p>master2 上操作</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/826c963cfca845a09b679d34c86220e8.png\" alt=\"img\"></p>\n<h2><span id=\"建立双主复制\">建立双主复制</span></h2><p>master1 上操作</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/2b3ecc32f17944968270b025f8e736fa.png\" alt=\"img\"></p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/3ffe3b3cd7d2422fbd54fd3135dbfcea.png\" alt=\"img\"></p>\n<p>master2 上操作</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/e23de8a6e8ab4794b6660af02e6b9d84.png\" alt=\"img\"></p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/0a49b2e209204a169b3f2e4bcc09e505.png\" alt=\"img\"></p>\n<h1><span id=\"部署-lvskeepalived-实现-mysql-双主复制高可用\">部署 LVS+Keepalived 实现 MySQL 双主复制高可用</span></h1><h2><span id=\"配置主调度器\">配置主调度器</span></h2><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@keep1 ~]<span class=\"params\">#</span> yum -y install keepalived ipvsadm</span><br><span class=\"line\">[root@keep1 ~]<span class=\"params\">#</span> vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">global<span class=\"built_in\">_</span>defs &#123;</span><br><span class=\"line\">   router<span class=\"built_in\">_</span>id 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp<span class=\"built_in\">_</span>instance VI<span class=\"built_in\">_</span>1 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual<span class=\"built_in\">_</span>router<span class=\"built_in\">_</span>id 51</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert<span class=\"built_in\">_</span>int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        auth<span class=\"built_in\">_</span>type PASS</span><br><span class=\"line\">        auth<span class=\"built_in\">_</span>pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual<span class=\"built_in\">_</span>ipaddress &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        192.168.1.188</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual<span class=\"built_in\">_</span>server 192.168.1.188 3306 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    delay<span class=\"built_in\">_</span>loop 6</span><br><span class=\"line\">    lb<span class=\"built_in\">_</span>algo rr</span><br><span class=\"line\">    lb<span class=\"built_in\">_</span>kind DR</span><br><span class=\"line\">    persistence<span class=\"built_in\">_</span>timeout 0</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real<span class=\"built_in\">_</span>server 192.168.1.1 3306 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        TCP<span class=\"built_in\">_</span>CHECK &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>port 3306</span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>timeout 3</span><br><span class=\"line\">            nb<span class=\"built_in\">_</span>get<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">            delay<span class=\"built_in\">_</span>before<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    real<span class=\"built_in\">_</span>server 192.168.1.2 3306 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        TCP<span class=\"built_in\">_</span>CHECK &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>port 3306</span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>timeout 3</span><br><span class=\"line\">            nb<span class=\"built_in\">_</span>get<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">            delay<span class=\"built_in\">_</span>before<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[root@keep1 ~]<span class=\"params\">#</span> systemctl start keepalived</span><br><span class=\"line\">[root@keep2 ~]<span class=\"params\">#</span> ip a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/d8aa7fde697e4d9597d43f5fa380b320.png\" alt=\"img\"></p>\n<h2><span id=\"配置备调度器\">配置备调度器</span></h2><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@keep2 ~]<span class=\"params\">#</span> yum -y install keepalived ipvsadm</span><br><span class=\"line\">[root@keep2 ~]<span class=\"params\">#</span> vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">global<span class=\"built_in\">_</span>defs &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">   router<span class=\"built_in\">_</span>id 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp<span class=\"built_in\">_</span>instance VI<span class=\"built_in\">_</span>1 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual<span class=\"built_in\">_</span>router<span class=\"built_in\">_</span>id 51</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    advert<span class=\"built_in\">_</span>int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        auth<span class=\"built_in\">_</span>type PASS</span><br><span class=\"line\">        auth<span class=\"built_in\">_</span>pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual<span class=\"built_in\">_</span>ipaddress &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        192.168.1.188</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual<span class=\"built_in\">_</span>server 192.168.1.188 3306 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    delay<span class=\"built_in\">_</span>loop 6</span><br><span class=\"line\">    lb<span class=\"built_in\">_</span>algo rr</span><br><span class=\"line\">    lb<span class=\"built_in\">_</span>kind DR</span><br><span class=\"line\">    persistence<span class=\"built_in\">_</span>timeout 0</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real<span class=\"built_in\">_</span>server 192.168.1.1 3306 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        TCP<span class=\"built_in\">_</span>CHECK &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>port 3306</span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>timeout 3</span><br><span class=\"line\">            nb<span class=\"built_in\">_</span>get<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">            delay<span class=\"built_in\">_</span>before<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    real<span class=\"built_in\">_</span>server 192.168.1.2 3306 &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        TCP<span class=\"built_in\">_</span>CHECK &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>port 3306</span><br><span class=\"line\">            connect<span class=\"built_in\">_</span>timeout 3</span><br><span class=\"line\">            nb<span class=\"built_in\">_</span>get<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">            delay<span class=\"built_in\">_</span>before<span class=\"built_in\">_</span>retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[root@keep2 ~]<span class=\"params\">#</span> systemctl start keepalived</span><br></pre></td></tr></table></figure>\n\n<p>查看LVS 集群状态</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/bed8e428a438460e906323b6bbe61135.png\" alt=\"img\"></p>\n<h2><span id=\"编写-lvs-启动脚本\">编写 LVS 启动脚本</span></h2><p>在master1 master2 上操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@master1 ~]# vim /etc/init.d/realserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">VIP=192.168.1.188</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">    /sbin/ifconfig lo down</span><br><span class=\"line\">    /sbin/ifconfig lo up</span><br><span class=\"line\">    echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\">    echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">    echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">    echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\">    /sbin/sysctl -p &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">    /sbin/ifconfig lo:0 $VIP netmask 255.255.255.255 up</span><br><span class=\"line\">    /sbin/route add -host $VIP dev lo:0</span><br><span class=\"line\">    echo &quot;LVS-DR real server starts successfully.\\n&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">    /sbin/ifconfig lo:0 down</span><br><span class=\"line\">    /sbin/route del $VIP &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">    echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\">    echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">    echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">    echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\">echo &quot;LVS-DR real server stopped.\\n&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">    isLoOn=/sbin/ifconfig lo:0 | grep &quot;$VIP&quot;</span><br><span class=\"line\">    isRoOn=/bin/netstat -rn | grep &quot;$VIP&quot;</span><br><span class=\"line\">    if [ &quot;$isLoON&quot; == &quot;&quot; -a &quot;$isRoOn&quot; == &quot;&quot; ]; then</span><br><span class=\"line\">        echo &quot;LVS-DR real server has run yet.&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;LVS-DR real server is running.&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    exit 3</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    echo &quot;Usage: $0 &#123;start|stop|status&#125;&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">esac</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">[root@master1 ~]# chmod +x /etc/init.d/realserver</span><br><span class=\"line\">[root@master1 ~]# /etc/init.d/realserver start          # 启动脚本</span><br><span class=\"line\">[root@master1 ~]# echo &quot;/etc/init.d/realserver&quot; &gt;&gt; /etc/rc.d/rc.local    # 配置开启自启动</span><br><span class=\"line\">[root@master1 ~]# ifconfig lo:0</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"验证\">验证</span></h1><p>在任意一台 master 添加一个测试用户</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/c1ff87000ef3458ebb375059a3bb55bc.png\" alt=\"img\"></p>\n<p>验证 LVS 负载均衡是否正常</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/b639dc20141b4eb096a72f7a4389c752.png\" alt=\"img\"></p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/a8ee59e8a86244559948c291db8c2f9b.png\" alt=\"img\"></p>\n<p>验证 Keepalived 双机热备是否正常</p>\n<ul>\n<li><p>关闭 LVS 主调度器，查看客户机是否能够正常访问数据库。</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/2274f0fd428a42e0b68bcab2a5a218b2.png\" alt=\"img\"></p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/c1736bb87cd14c2fa09725850a169cd3.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p>验证 MySQL 数据库可用性</p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/3cc80f5304d5450982aa9c28df050cff.png\" alt=\"img\"></p>\n<p><img src=\"/2021/11/21/db-resource/mysql/mysql-ha/mysql-master-master-1/6ed65e9012a64f729e349ee39fec1542.png\" alt=\"img\"></p>\n","categories":["mysql"],"tags":["mysql"]},{"title":"kong接入层网关设计及实现","url":"/2021/09/21/technology-stack/loadbalance/kong/kong-build/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#kong%E7%89%B9%E6%80%A7\">kong特性</a></li>\n<li><a href=\"#kong-%E7%9A%84%E6%9E%B6%E6%9E%84\">Kong 的架构</a></li>\n<li><a href=\"#kong%E9%83%A8%E7%BD%B2\">Kong部署</a></li>\n<li><a href=\"#kong-%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\">Kong 的管理方式</a></li>\n<li><a href=\"#%E9%AB%98%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%E7%9A%84%E8%83%8C%E5%90%8E%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6\">高可扩展性的背后—插件机制</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"前言\">前言</span></h1><p>Kong（<a href=\"https://github.com/Kong/kong%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BA%91%E5%8E%9F%E7%94%9F%EF%BC%8C%E9%AB%98%E6%95%88%EF%BC%8C%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F\">https://github.com/Kong/kong）是一个云原生，高效，可扩展的分布式</a> API 网关。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2021/09/21/technology-stack/loadbalance/kong/kong-build/1461119-20200109090726458-785967999.jpeg\" alt=\"img\"></p>\n<h1><span id=\"kong特性\">kong特性</span></h1><p>SpringCloud 玩家肯定都听说过 Zuul 这个路由组件，包括 Zuul2 和 Springcloud Gateway 等框架，在国内的知名度都不低。没错，我称呼这些为组件 Or 框架，而 Kong 则更衬的上产品这个词。在此我们可以简单对比下 Zuul 和 Kong。</p>\n<p>举例而言，如果选择使用 Zuul，当需要为应用添加限流功能，由于 Zuul 只提供了基本的路由功能，开发者需要自己研发 Zuul Filter，可能你觉得一个功能还并不麻烦，但如果在此基础上对 Zuul 提出更多的要求，很遗憾，Zuul 使用者需要自行承担这些复杂性。而对于 Kong 来说，限流功能就是一个插件，只需要简单的配置，即可开箱即用。</p>\n<p>Kong 的插件机制是其高可扩展性的根源，Kong 可以很方便地为路由和服务提供各种插件，网关所需要的基本特性，Kong 都如数支持：</p>\n<ol>\n<li>云原生: 与平台无关，Kong可以从裸机运行到Kubernetes</li>\n<li>动态路由：Kong 的背后是 OpenResty+Lua，所以从 OpenResty 继承了动态路由的特性</li>\n<li>熔断</li>\n<li>健康检查</li>\n<li>日志: 可以记录通过 Kong 的 HTTP，TCP，UDP 请求和响应。</li>\n<li>鉴权: 权限控制，IP 黑白名单，同样是 OpenResty 的特性</li>\n<li>SSL: Setup a Specific SSL Certificate for an underlying service or API.</li>\n<li>监控: Kong 提供了实时监控插件</li>\n<li>认证: 如数支持 HMAC, JWT, Basic, OAuth2.0 等常用协议</li>\n<li>限流</li>\n<li>REST API: 通过 Rest API 进行配置管理，从繁琐的配置文件中解放</li>\n<li>可用性: 天然支持分布式</li>\n<li>高性能: 背靠非阻塞通信的 nginx，性能自不用说</li>\n<li>插件机制: 提供众多开箱即用的插件，且有易于扩展的自定义插件接口，用户可以使用 Lua 自行开发插件</li>\n</ol>\n<p>上面这些特性中，反复提及了 Kong 背后的 OpenResty，实际上，使用 Kong 之后，Nginx 可以完全摒弃，Kong 的功能是 Nginx 的父集。</p>\n<p>而 Zuul 除了基础的路由特性以及其本身和 SpringCloud 结合较为紧密之外，并无任何优势。</p>\n<h1><span id=\"kong-的架构\">Kong 的架构</span></h1><p>从技术的角度讲，Kong 可以认为是一个 OpenResty 应用程序。 OpenResty 运行在 Nginx 之上，使用 Lua 扩展了 Nginx。 Lua 是一种非常容易使用的脚本语言，可以让你在 Nginx 中编写一些逻辑操作。之前我们提到过一个概念 Kong = OpenResty + Nginx + Lua，但想要从全局视角了解 Kong 的工作原理，还是直接看源码比较直接。我们定位到本地的 Kong 文件夹，按照上图中的目录层级来识识 Kong 的庐山真面目。</p>\n<ol>\n<li>Kong 文件下包含了全部源码和必要组件，分析他们，我们便得到了 Kong 的架构。0.13.x 是目前 Kong 的最新版本。</li>\n<li>从 2 号块中可以看到 nginx.conf ，这其实便是一个标准的 Nginx 目录结构，这也揭示了 Kong 其实就是运行在 Nginx 的基础之上，而进行的二次封装。由 share 文件夹向下展开下一次分析。</li>\n<li>share 文件夹中包含了 OpenResty 的相关内容，其实背后就是一堆 Lua 脚本，例如 lapis 包含了数据库操作，Nginx 生命周期，缓存控制等必要的 Lua 脚本，logging 包含了日志相关的 Lua 脚本，resty 包含了 dns，健康检查等相关功能的 Lua 脚本…而其中的 kong 目录值得我们重点分析，他包含了 Kong 的核心对象。</li>\n<li>api 和 core 文件夹，封装了 Kong 对 service，route，upstream，target 等核心对象的操作代码（这四个核心对象将会在下面的小节重点介绍），而 plugins 文件夹则是 Kong 高可扩展性的根源，存放了 kong 的诸多扩展功能。</li>\n<li>plugins 文件夹包含了上一节提到的 Kong 的诸多插件功能，如权限控制插件，跨域插件，jwt 插件，oauth2 插件…如果需要自定义插件，则需要将代码置于此处。</li>\n</ol>\n<p>从上述文件夹浏览下来，大概可以看到它和 Nginx 的相似之处，并在此基础之上借助于 Lua 对自身的功能进行了拓展，除了 nginx.conf 中的配置，和相对固定的文件层级，Kong 还需要连接一个数据库来管理路由配置，服务配置，upstream 配置等信息，是的，由于 Kong 支持动态路由的特性，所以几乎所有动态的配置都不是配置在文件中，而是借助于 Postgres 或者 Cassandra 进行管理。</p>\n<p>Kong 对外暴露了 Restful API，最终的配置便是落地在了数据库之中。</p>\n<h1><span id=\"kong部署\">Kong部署</span></h1><p>根据官方文档进行部署</p>\n<h1><span id=\"kong-的管理方式\">Kong 的管理方式</span></h1><p>通过文件夹结构的分析，以及数据库中的表结构，我们已经对 Kong 的整体架构有了一个基本的认识，但肯定还存在一个疑问：我会配置 Nginx 来控制路由，但这个 Kong 应当怎么配置才能达到相同的目的呢？莫急，下面来看看 Kong 如何管理配置。</p>\n<p>Kong 简单易用的背后，便是因为其所有的操作都是基于 HTTP Restful API 来进行的。</p>\n<p> 其中 8000/8443 分别是 Http 和 Https 的转发端口，等价于 Nginx 默认的 80 端口，而 8001 端口便是默认的管理端口，我们可以通过 HTTP Restful API 来动态管理 Kong 的配置。</p>\n<p>一个典型的 Nginx 配置</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream helloUpstream &#123;</span><br><span class=\"line\">    server localhost:3000 weight=100;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  80;</span><br><span class=\"line\">    location /hello &#123;</span><br><span class=\"line\">        proxy<span class=\"built_in\">_</span>pass http://helloUpstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上这个简单的 Nginx 配置，便可以转换为如下的 Http 请求。</p>\n<p>对应的 Kong 配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 upstream</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/upstreams --data <span class=\"string\">&quot;name=helloUpstream&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 target</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/upstreams/hello/targets --data <span class=\"string\">&quot;target=localhost:3000&quot;</span> --data <span class=\"string\">&quot;weight=100&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 service</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/services --data <span class=\"string\">&quot;name=hello&quot;</span> --data <span class=\"string\">&quot;host=helloUpstream&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 route</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/routes --data <span class=\"string\">&quot;paths[]=/hello&quot;</span> --data <span class=\"string\">&quot;service.id=8695cc65-16c1-43b1-95a1-5d30d0a50409&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这一切都是动态的，无需手动 reload nginx.conf。</p>\n<p>我们为 Kong 新增路由信息时涉及到了 upstream，target，service，route 等概念，他们便是 Kong 最最核心的四个对象。（你可能在其他 Kong 的文章中见到了 api 这个对象，在最新版本 0.13 中已经被弃用，api 已经由 service 和 route 替代）</p>\n<p>从上面的配置以及他们的字面含义大概能够推测出他们的职责：</p>\n<p>upstream 是对上游服务器的抽象；</p>\n<p>target 代表了一个物理服务，是 ip + port 的抽象；</p>\n<p>service 是抽象层面的服务，他可以直接映射到一个物理服务(host 指向 ip + port)，也可以指向一个 upstream 来做到负载均衡；</p>\n<p>route 是路由的抽象，他负责将实际的 request 映射到 service。</p>\n<p>他们的关系如下</p>\n<p>upstream 和 target ：1 对 n</p>\n<p>service 和 upstream ：1 对 1 或 1 对 0 （service 也可以直接指向具体的 target，相当于不做负载均衡）</p>\n<p>service 和 route：1 对 n</p>\n<h1><span id=\"高可扩展性的背后插件机制\">高可扩展性的背后—插件机制</span></h1><p>Kong 的另一大特色便是其插件机制，这也是我认为的 Kong 最优雅的一个设计。</p>\n<p>文章开始时我们便提到一点，微服务架构中，网关应当承担所有服务共同需要的那部分功能，这一节我们便来介绍下，Kong 如何添加 jwt 插件，限流插件。</p>\n<p>插件（Plugins）装在哪儿？对于部分插件，可能是全局的，影响范围是整个 Kong 服务；大多数插件都是装在 service 或者 route 之上。这使得插件的影响范围非常灵活，我们可能只需要对核心接口进行限流控制，只需要对部分接口进行权限控制，这时候，对特定的 service 和 route 进行定向的配置即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为 hello 服务添加50次/秒的限流</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/services/hello/plugins \\</span><br><span class=\"line\">--data <span class=\"string\">&quot;name=rate-limiting&quot;</span> \\</span><br><span class=\"line\">--data <span class=\"string\">&quot;config.second=50&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 为 hello 服务添加 jwt 插件</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/services/login/plugins \\</span><br><span class=\"line\">--data <span class=\"string\">&quot;name=jwt&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 同理，插件也可以安装在 route 之上</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/routes/&#123;routeId&#125;/plugins \\</span><br><span class=\"line\">--data <span class=\"string\">&quot;name=rate-limiting&quot;</span> \\</span><br><span class=\"line\">--data <span class=\"string\">&quot;config.second=50&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">curl -X POST http://localhost:8001/routes/&#123;routeId&#125;/plugins \\</span><br><span class=\"line\">--data <span class=\"string\">&quot;name=jwt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在官方文档中，我们可以获取全部的插件 <a href=\"https://konghq.com/plugins/%EF%BC%8C%E9%83%A8%E5%88%86%E6%8F%92%E4%BB%B6%E9%9C%80%E8%A6%81%E6%94%B6%E8%B4%B9%E7%9A%84%E4%BC%81%E4%B8%9A%E7%89%88%E6%89%8D%E5%8F%AF%E4%BD%BF%E7%94%A8%E3%80%82\">https://konghq.com/plugins/，部分插件需要收费的企业版才可使用。</a></p>\n<h1><span id=\"总结\">总结</span></h1><p>Kong 是目前市场上相对较为成熟的开源 API 网关产品，无论是性能，扩展性，还是功能特性，都决定了它是一款优秀的产品，对 OpenResty 和 Lua 感兴趣的同学，Kong 也是一个优秀的学习参考对象。基于 OpenResty，可以在现有 Kong 的基础上进行一些扩展，从而实现更复杂的特性，比如我司内部的 ABTest 插件和定制化的认证插件，开发成本都相对较低。</p>\n","categories":["loadbalance"],"tags":["loadbalance"]},{"title":"Nginx系列(二):nginx配置","url":"/2021/07/25/technology-stack/loadbalance/nginx/Nginx%E7%B3%BB%E5%88%97(%E4%BA%8C):nginx%E9%85%8D%E7%BD%AE/","content":"<p>防盗链</p>\n<p>prometheus+grafnaa监控nginx</p>\n<p>生产级别高性能参考配置：<a href=\"https://github.com/hepyu/k8s-app-config/tree/master/yaml/min-cluster-allinone/nginx\">https://github.com/hepyu/k8s-app-config/tree/master/yaml/min-cluster-allinone/nginx</a></p>\n","categories":["loadbalance"],"tags":["loadbalance"]},{"title":"Nginx系列(一):nginx初探安装及配置","url":"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/","content":"<h1><span id=\"简介\">简介</span></h1><p>官网：<a href=\"https://nginx.org/\">https://nginx.org</a></p>\n<p>nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server</p>\n<p>Nginx专为性能优化而开发，性能是器最重要的考量，实现上非常注重效率，能经受高负载的考验，据报告能支持高达50,000个并发连接数。</p>\n<p>Nginx不仅能做反向代理，实现负载均衡；还能可以作正向代理来进行上网等功能。</p>\n<p>nginx采用master守护进程，worker作为工作进程处理请求。</p>\n<span id=\"more\"></span>\n\n<p><strong>原理</strong></p>\n<p>master接收信号后将任务分配给worker进行执行，worker可有多个。</p>\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/0b46f21fbe096b6374cfa9b3b745c043e9f8acf9.jpeg\" alt=\"img\"></p>\n<p><strong>worker如何工作</strong></p>\n<p>客户端发送一个请求到master后，worker获取任务的机制不是直接分配也不是轮询，而是一种争抢的机制，“抢”到任务后再执行任务，即选择目标服务器tomcat等，然后返回结果。</p>\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/f9dcd100baa1cd11fb027fc104648ffbc2ce2d1c.jpeg\" alt=\"img\"></p>\n<p><strong>worker_connection</strong></p>\n<p>发送请求占用了woker两个或四个连接数。</p>\n<p>普通的静态访问最大并发数是：worker_connections *worker_processes/ 2 /2/2若是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections *worker_processes/ 4 /4/4。当然了，worker数也不是越多越好，worker数和服务器的CPU数相等时最适宜的。</p>\n<p><strong>优点</strong></p>\n<ol>\n<li>可以使用 nginx –s reload 热部署，利用 nginx 进行热部署操作</li>\n<li>每个 woker 是独立的进程，若其中一个woker出现问题，其他继续进行争抢，实现请求过程，不会造成服务中断</li>\n</ol>\n<h1><span id=\"安装\">安装</span></h1><p>nginx安装方式有安装包安装和源码安装两种方式。</p>\n<h2><span id=\"安装包安装\">安装包安装</span></h2><p>官网文档：<a href=\"https://nginx.org/en/linux_packages.html\">https://nginx.org/en/linux_packages.html</a></p>\n<p>根据不同平台选择不同的安装包进行安装。</p>\n<p>这里介绍RHEL/CentOS安装方式</p>\n<ol>\n<li><p>Install the prerequisites:</p>\n<blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install yum-utils</span><br></pre></td></tr></table></figure></blockquote>\n</li>\n<li><p>To set up the yum repository, create the file named <code>/etc/yum.repos.d/nginx.repo</code> with the following contents:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[nginx-stable]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">nginx stable repo</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">http://nginx.org/packages/centos/$releasever/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"attr\">module_hotfixes</span>=<span class=\"string\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">[nginx-mainline]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">nginx mainline repo</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">gpgkey</span>=<span class=\"string\">https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"attr\">module_hotfixes</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>By default, the repository for stable nginx packages is used. If you would like to use mainline nginx packages, run the following command:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --<span class=\"built_in\">enable</span> nginx-mainline</span><br></pre></td></tr></table></figure></li>\n<li><p>o install nginx, run the following command:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>When prompted to accept the GPG key, verify that the fingerprint matches <code>573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62</code>, and if so, accept it.</p>\n<h2><span id=\"源码安装\">源码安装</span></h2><p>官网文档：<a href=\"https://nginx.org/en/docs/configure.html\">https://nginx.org/en/docs/configure.html</a></p>\n<p>需要安装gcc，autoconf和automake</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf automake</span><br></pre></td></tr></table></figure>\n\n<p>下载源码并解压</p>\n<p>官网下载地址：<a href=\"https://nginx.org/en/download.html\">https://nginx.org/en/download.html</a></p>\n<p>The build is configured using the <code>configure</code> command. It defines various aspects of the system, including the methods nginx is allowed to use for connection processing. At the end it creates a <code>Makefile</code>.</p>\n<p>The <code>configure</code> command supports the following parameters:</p>\n<ul>\n<li><p><code>--help</code></p>\n<p>prints a help message.</p>\n</li>\n</ul>\n<p><strong>创建用户与组</strong></p>\n<p>一般都会为软件环境创建特定的用户和组</p>\n<p>创建用户作为用于启动nginx进程的用户 </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd nginx</span><br><span class=\"line\">useradd -r -g nginx nginx</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/workspace/software/nginx-1.21.1/nginx --conf-path=/usr/<span class=\"built_in\">local</span>/workspace/software/nginx-1.21.1/nginx/nginx.conf --error-log-path=/usr/<span class=\"built_in\">local</span>/workspace/software/nginx-1.21.1/nginx/nginx/<span class=\"built_in\">log</span>/error.log --pid-path=//usr/<span class=\"built_in\">local</span>/workspace/software/nginx-1.21.1/nginx/nginx/nginx.pid --lock-path=/usr/<span class=\"built_in\">local</span>/workspace/software/nginx-1.21.1/nginx/nginx/nginx.lock --with-http_ssl_module --with-http_flv_module</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><p>–prefix=<em>path</em></p>\n<p>指定编译后文件存放路径</p>\n<p>defines a directory that will keep server files. This same directory will also be used for all relative paths set by <code>configure</code> (except for paths to libraries sources) and in the <code>nginx.conf</code> configuration file. It is set to the <code>/usr/local/nginx</code> directory by default.</p>\n</li>\n<li><p>–conf-path=<em>path</em></p>\n<p>配置文件路径</p>\n<p>sets the name of an <code>nginx.conf</code> configuration file. If needs be, nginx can always be started with a different configuration file, by specifying it in the command-line parameter <code>-c *file*</code>. By default the file is named<code>*prefix*/conf/nginx.conf</code>.</p>\n</li>\n</ul>\n<p>其它参考官网文档</p>\n<p>这里配置了ssl、flv模块，如果安装的机器没有安装相应的模块，根据提示安装相应模块即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install zlib zlib-devel openssl openssl-devel pcre-devel</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行安装</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install </span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"启动nginx\">启动nginx</span></h2><p>如果没有加入到系统环境，进入源码安装路径后执行如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如源码安装路径为nginx</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>加入到系统环境后可直接启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<p>常用命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\"><span class=\"comment\"># -s 参数其实是告诉Nginx 程序向正在运行的Nginx 服务发送信号量，Nginx 程序通过nginx.pid 文件中得到master 进程的进程ID，再向运行中的master 进程发送TERM 信号来快速地关闭Nginx 服务。</span></span><br><span class=\"line\">nginx -s stop</span><br><span class=\"line\"><span class=\"comment\"># 可以通过kill 命令直接向nginx master 进程发送TERM 或者INT 信号</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGTERM 6195 </span><br><span class=\"line\"><span class=\"comment\"># 或者： </span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s SIGINT 6195</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优雅停止服务 </span></span><br><span class=\"line\"><span class=\"comment\"># 如果希望Nginx 服务可以正常地处理完当前所有请求再停止服务，那么可以使用-s quit参数来停止服务 </span></span><br><span class=\"line\"><span class=\"comment\"># 与快速停止Nginx 服务是有区别的。当快速停止服务时，worker 进程与master进程在收到信号后会立刻跳出循环，退出进程。而“优雅”地停止服务时，首先会关闭监听端口，停止接收新的连接，然后把当前正在处理的连接全部处理完，最后再退出进程。</span></span><br><span class=\"line\">nginx -s quit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用-s reload 参数可以使运行中的Nginx 服务重新加载nginx.conf 文件。</span></span><br><span class=\"line\"><span class=\"comment\"># Nginx 会先检查新的配置项是否有误，如果全部正确就以“优雅”的方式关闭，再重新启动Nginx 来实现这个目的。类似的，-s 是发送信号，仍然可以用kill 命令发送HUP信号来达到相同的效果。</span></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查配置文件nginx.conf的正确性</span></span><br><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"简单使用配置\">简单使用配置</span></h1><p>新手向导：<a href=\"https://nginx.org/en/docs/beginners_guide.html#proxy\">https://nginx.org/en/docs/beginners_guide.html#proxy</a></p>\n<p>Setting Up a Simple Proxy Server</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_pass</span> <span class=\"string\">http://localhost:8080;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">location</span> <span class=\"string\">/images/ &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">root</span> <span class=\"string\">/data;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>We will modify the second <code>location</code> block, which currently maps requests with the <code>/images/</code> prefix to the files under the <code>/data/images</code> directory, to make it match the requests of images with typical file extensions. The modified <code>location</code> block looks like this:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">location</span> <span class=\"string\">~ \\.(gif|jpg|png)$ &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">root</span> <span class=\"string\">/data/images;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1><span id=\"高可用安装配置\">高可用安装配置</span></h1><p>这里介绍了不同的使用方式，例如高可用、动态模块、Web Server等。</p>\n<p>下面介绍一下高可用的搭建使用</p>\n<p>这里介绍采用keepalived搭建高可用。</p>\n<h2><span id=\"安装keepalived\">安装keepalived</span></h2><p>官网：<a href=\"https://www.keepalived.org/\">https://www.keepalived.org</a></p>\n<p>keepalived高可用架构示意图</p>\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20210728232316334-7485803.png\" alt=\"img\"></p>\n<p>说明：</p>\n<ul>\n<li>虚拟ip(VIP):192.168.152.200，对外提供服务的ip，也可称作浮动ip</li>\n<li>192.168.152.130：nginx + keepalived master 主</li>\n<li>192.168.152.129：nginx + keepalived backup 从</li>\n<li>192.168.152.129：tomcat-8080</li>\n<li>192.168.152.129：tomcat-8081</li>\n</ul>\n<p>安装keepalived的步骤：</p>\n<blockquote>\n<p>注：192.168.152.129（keepalived从节点） 与 192.168.152.130（keepalived主节点）先安装好nginx + keepalived</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/keepalived</span><br></pre></td></tr></table></figure>\n\n<p>系统提示警告 <code>*** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS. </code></p>\n<p><code>yum -y install libnl libnl-devel</code></p>\n<p>系统提示错误 <code>configure: error: libnfnetlink headers missing </code></p>\n<p><code>yum install -y libnfnetlink-devel</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>到此keepalived安装完成，<strong>但是接下来还有最关键的一步，如果这一步没有做后面启动keepalived的时候会报找不到配置文件的错误</strong></p>\n<p>Configuration file ‘/etc/keepalived/keepalived.conf’ is not a regular non-executable file</p>\n<p>安装完成后，进入安装目录的etc目录下，将keepalived相应的配置文件拷贝到系统相应的目录当中。keepalived启动时会从/etc/keepalived目录下查找keepalived.conf配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /etc/keepalived</span><br><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/keepalived/etc/keepalived/keepalived.conf /etc/keepalived</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"修改keepalived主节点配置文件\">修改keepalived主节点配置文件</span></h2><p>修改keepalived主节点192.168.152.130的/etc/keepalived/keepalived.conf配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> #全局配置</span></span><br><span class=\"line\"><span class=\"attr\">global_defs</span> <span class=\"string\">&#123;             </span></span><br><span class=\"line\">    <span class=\"attr\">notification_email</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"meta\">leeSmall@qq.com</span>  <span class=\"string\">#设置报警邮件地址，可以设置多个，每行一个。需要开启sendmail服务。</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">notification_email_from</span> <span class=\"string\">sns-lvs@gmail.com</span></span><br><span class=\"line\">        <span class=\"attr\">smtp_server</span> <span class=\"string\">smtp.hysec.com   #设置SMTP Server地址</span></span><br><span class=\"line\">        <span class=\"attr\">smtp_connection_timeout</span> <span class=\"string\">30   #设置SMTP Server的超时时间</span></span><br><span class=\"line\">        <span class=\"attr\">router_id</span> <span class=\"string\">nginx_master       #表示运行Keepalived服务器的一个标识，唯一的</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#检测脚本</span></span><br><span class=\"line\"><span class=\"attr\">vrrp_script</span> <span class=\"string\">chk_http_port &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">script</span> <span class=\"string\">&quot;/usr/local/src/check_nginx_pid.sh&quot; #心跳执行的脚本，检测nginx是否启动</span></span><br><span class=\"line\">        <span class=\"attr\">interval</span> <span class=\"string\">2                          #（检测脚本执行的间隔，单位是秒）</span></span><br><span class=\"line\">        <span class=\"attr\">weight</span> <span class=\"string\">2                            #权重</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#vrrp 实例定义部分</span></span><br><span class=\"line\"><span class=\"attr\">vrrp_instance</span> <span class=\"string\">VI_1 &#123;        </span></span><br><span class=\"line\">    <span class=\"attr\">state</span> <span class=\"string\">MASTER            # 指定keepalived的角色，MASTER为主，BACKUP为备</span></span><br><span class=\"line\">        <span class=\"attr\">interface</span> <span class=\"string\">eth0         # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡</span></span><br><span class=\"line\">        <span class=\"attr\">virtual_router_id</span> <span class=\"string\">66    # 虚拟路由编号，主从要一直</span></span><br><span class=\"line\">        <span class=\"attr\">priority</span> <span class=\"string\">100            # 优先级，数值越大，获取处理请求的优先级越高</span></span><br><span class=\"line\">        <span class=\"attr\">advert_int</span> <span class=\"string\">1            # 检查间隔，默认为1s(vrrp组播周期秒数)</span></span><br><span class=\"line\"><span class=\"comment\">        #授权访问</span></span><br><span class=\"line\">        <span class=\"attr\">authentication</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">auth_type</span> <span class=\"string\">PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span></span><br><span class=\"line\">            <span class=\"attr\">auth_pass</span> <span class=\"string\">1111</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">track_script</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">chk_http_port</span>            <span class=\"string\">#（调用检测脚本）</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">virtual_ipaddress</span> <span class=\"string\">&#123;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"修改keepalived从节点配置文件\">修改keepalived从节点配置文件</span></h2><p>修改keepalived从节点192.168.152.129的/etc/keepalived/keepalived.conf配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#全局配置</span></span><br><span class=\"line\"><span class=\"attr\">global_defs</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">notification_email</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"meta\">leeSmall@qq.com</span>  <span class=\"string\">#设置报警邮件地址，可以设置多个，每行一个。需要开启sendmail服务。</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">notification_email_from</span> <span class=\"string\">sns-lvs@gmail.com</span></span><br><span class=\"line\">        <span class=\"attr\">smtp_server</span> <span class=\"string\">smtp.hysec.com #设置SMTP Server地址</span></span><br><span class=\"line\">        <span class=\"attr\">smtp_connection_timeout</span> <span class=\"string\">30 #设置SMTP Server的超时时间</span></span><br><span class=\"line\">        <span class=\"attr\">router_id</span> <span class=\"string\">nginx_backup              # 设置nginx backup的id，在一个网络应该是唯一的</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#检测脚本</span></span><br><span class=\"line\"><span class=\"attr\">vrrp_script</span> <span class=\"string\">chk_http_port &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">script</span> <span class=\"string\">&quot;/usr/local/src/check_nginx_pid.sh&quot; #心跳执行的脚本，检测nginx是否启动</span></span><br><span class=\"line\">        <span class=\"attr\">interval</span> <span class=\"string\">2                          #（检测脚本执行的间隔）</span></span><br><span class=\"line\">        <span class=\"attr\">weight</span> <span class=\"string\">2                            #权重</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#vrrp 实例定义部分</span></span><br><span class=\"line\"><span class=\"attr\">vrrp_instance</span> <span class=\"string\">VI_1 &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">state</span> <span class=\"string\">BACKUP                        # 指定keepalived的角色，MASTER为主，BACKUP为备</span></span><br><span class=\"line\">        <span class=\"attr\">interface</span> <span class=\"string\">eth0                      # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡</span></span><br><span class=\"line\">        <span class=\"attr\">virtual_router_id</span> <span class=\"string\">66                # 虚拟路由编号，主从要一直</span></span><br><span class=\"line\">        <span class=\"attr\">priority</span> <span class=\"string\">99                         # 优先级，数值越大，获取处理请求的优先级越高</span></span><br><span class=\"line\">        <span class=\"attr\">advert_int</span> <span class=\"string\">1                        # 检查间隔，默认为1s(vrrp组播周期秒数)</span></span><br><span class=\"line\"><span class=\"comment\">        #授权访问</span></span><br><span class=\"line\">        <span class=\"attr\">authentication</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">auth_type</span> <span class=\"string\">PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span></span><br><span class=\"line\">            <span class=\"attr\">auth_pass</span> <span class=\"string\">1111</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"检查nginx是否启动的shell脚本\">检查nginx是否启动的shell脚本</span></h2><blockquote>\n<p>/usr/local/src/check_nginx_pid.sh</p>\n</blockquote>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#检测nginx是否启动了</span></span><br><span class=\"line\"><span class=\"attr\">A</span>=<span class=\"string\">`ps -C nginx --no-header |wc -l`        </span></span><br><span class=\"line\"><span class=\"attr\">if</span> <span class=\"string\">[ $A -eq 0 ];then    #如果nginx没有启动就启动nginx                        </span></span><br><span class=\"line\">      <span class=\"meta\">/usr/local/nginx/sbin/nginx</span>                <span class=\"string\">#重启nginx</span></span><br><span class=\"line\">      <span class=\"attr\">if</span> <span class=\"string\">[ `ps -C nginx --no-header |wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务，进行VIP转移</span></span><br><span class=\"line\">              <span class=\"attr\">killall</span> <span class=\"string\">keepalived                    </span></span><br><span class=\"line\">      <span class=\"attr\">fi</span></span><br><span class=\"line\"><span class=\"attr\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"修改主节点和从节点的nginx的配置文件\">修改主节点和从节点的nginx的配置文件</span></h2><p>192.168.152.130（keepalived主节点）和 192.168.152.129（keepalived从节点）的nginx的配置文件nginx.conf</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">user</span> <span class=\"string\">root root; #使用什么用户启动NGINX 在运行时使用哪个用户哪个组</span></span><br><span class=\"line\"><span class=\"attr\">worker_processes</span> <span class=\"string\">4; #启动进程数，一般是1或8个，根据你的电脑CPU数，一般8个</span></span><br><span class=\"line\"><span class=\"attr\">worker_cpu_affinity</span> <span class=\"string\">00000001 00000010 00000100 00001000; #CPU逻辑数——把每个进程分别绑在CPU上面，为每个进程分配一个CPU</span></span><br><span class=\"line\"><span class=\"comment\">#pid /usr/local/nginx/logs/nginx.pid</span></span><br><span class=\"line\"><span class=\"attr\">worker_rlimit_nofile</span> <span class=\"string\">102400; #一个进程打开的最大文件数目，与NGINX并发连接有关系</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#工作模式及连接数上限</span></span><br><span class=\"line\"><span class=\"attr\">events</span></span><br><span class=\"line\"><span class=\"attr\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">use</span> <span class=\"string\">epoll; #多路复用IO 基于LINUX2.6以上内核，可以大大提高NGINX的性能 uname -a查看内核版本号</span></span><br><span class=\"line\">    <span class=\"attr\">worker_connections</span> <span class=\"string\">102400; #单个worker process最大连接数,其中NGINX最大连接数＝连接数*进程数,一般1GB内存的机器上可以打开的最大数大约是10万左右</span></span><br><span class=\"line\">    <span class=\"attr\">multi_accept</span> <span class=\"string\">on;   #尽可能多的接受请求，默认是关闭状态</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#处理http请求的一个应用配置段</span></span><br><span class=\"line\"><span class=\"attr\">http</span></span><br><span class=\"line\"><span class=\"attr\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    #引用mime.types,这个类型定义了很多，当web服务器收到静态的资源文件请求时，依据请求文件的后缀名在服务器的MIME配置文件中找到对应的MIME #Type，根据MIMETYPE设置并response响应类型（Content-type）</span></span><br><span class=\"line\">    <span class=\"attr\">include</span>       <span class=\"string\">mime.types; </span></span><br><span class=\"line\">    <span class=\"attr\">default_type</span>  <span class=\"string\">application/octet-stream; #定义的数据流，有的时候默认类型可以指定为text,这跟我们的网页发布还是资源下载是有关系的</span></span><br><span class=\"line\">    <span class=\"attr\">fastcgi_intercept_errors</span> <span class=\"string\">on; #表示接收fastcgi输出的http 1.0 response code</span></span><br><span class=\"line\">    <span class=\"attr\">charset</span> <span class=\"string\">utf-8;</span></span><br><span class=\"line\">    <span class=\"attr\">server_names_hash_bucket_size</span> <span class=\"string\">128; #保存服务器名字的hash表</span></span><br><span class=\"line\"><span class=\"comment\">    #用来缓存请求头信息的，容量4K，如果header头信息请求超过了，nginx会直接返回400错误，先根据client_header_buffer_size配置的值分配一个buffer，如果##分配的buffer无法容纳request_line/request_header，那么就会##再次根据large_client_header_buffers配置的参数分配large_buffer，如果large_buffer还是无#法容纳，那么就会返回414（处理request_line）/400（处理request_header）错误。</span></span><br><span class=\"line\">    <span class=\"attr\">client_header_buffer_size</span> <span class=\"string\">4k; </span></span><br><span class=\"line\">    <span class=\"attr\">large_client_header_buffers</span> <span class=\"string\">4 32k;</span></span><br><span class=\"line\">    <span class=\"attr\">client_max_body_size</span> <span class=\"string\">300m; #允许客户端请求的最大单文件字节数 上传文件时根据需求设置这个参数</span></span><br><span class=\"line\"><span class=\"comment\">    #指定NGINX是否调用这个函数来输出文件，对于普通的文件我们必须设置为ON，如果NGINX专门做为一个下载端的话可以关掉，好处是降低磁盘与网络的IO处理数及#系统的UPTIME</span></span><br><span class=\"line\">    <span class=\"attr\">sendfile</span> <span class=\"string\">on; </span></span><br><span class=\"line\"><span class=\"comment\">    #autoindex on;开启目录列表访问，适合下载服务器</span></span><br><span class=\"line\">    <span class=\"attr\">tcp_nopush</span> <span class=\"string\">on; #防止网络阻塞</span></span><br><span class=\"line\"><span class=\"comment\">    #非常重要，根据实际情况设置值，超时时间，客户端到服务端的连接持续有效时间，60秒内可避免重新建立连接，时间也不能设太长，太长的话，若请求数10000##，都占用连接会把服务托死</span></span><br><span class=\"line\">    <span class=\"attr\">keepalive_timeout</span> <span class=\"string\">60;</span></span><br><span class=\"line\">    <span class=\"attr\">tcp_nodelay</span> <span class=\"string\">on; #提高数据的实时响应性</span></span><br><span class=\"line\">    <span class=\"attr\">client_body_buffer_size</span> <span class=\"string\">512k; #缓冲区代理缓冲用户端请求的最大字节数（请求多）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">proxy_connect_timeout</span>   <span class=\"string\">5; #nginx跟后端服务器连接超时时间（代理连接超时）</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_read_timeout</span>      <span class=\"string\">60; #连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_send_timeout</span>      <span class=\"string\">5; #后端服务器数据回传时间(代理发送超时)</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_buffer_size</span>       <span class=\"string\">16k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_buffers</span>           <span class=\"string\">4 64k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_busy_buffers_size</span> <span class=\"string\">128k; #高负荷下缓冲大小</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_temp_file_write_size</span> <span class=\"string\">128k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">gzip</span> <span class=\"string\">on; #NGINX可以压缩静态资源，比如我的静态资源有10M，压缩后只有2M，那么浏览器下载的就少了</span></span><br><span class=\"line\">    <span class=\"attr\">gzip_min_length</span>  <span class=\"string\">1k;</span></span><br><span class=\"line\">    <span class=\"attr\">gzip_buffers</span>     <span class=\"string\">4 16k;</span></span><br><span class=\"line\">    <span class=\"attr\">gzip_http_version</span> <span class=\"string\">1.1;</span></span><br><span class=\"line\">    <span class=\"attr\">gzip_comp_level</span> <span class=\"string\">2; #压缩级别大小,最小1,最大9.值越小,压缩后比例越小,CPU处理更快,为1时,原10M压缩完后8M,但设为9时,压缩完可能只有2M了。一般设置为2</span></span><br><span class=\"line\">    <span class=\"attr\">gzip_types</span>       <span class=\"string\">text/plain application/x-javascript text/css application/xml; #压缩类型:text,js css xml 都会被压缩</span></span><br><span class=\"line\">    <span class=\"attr\">gzip_vary</span> <span class=\"string\">on; #作用是在http响应中增加一行目的是改变反向代理服务器的缓存策略</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    #日志格式 </span></span><br><span class=\"line\">    <span class=\"attr\">log_format</span>  <span class=\"string\">main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; #ip 远程用户 当地时间  请求URL</span></span><br><span class=\"line\">        <span class=\"meta\">&#x27;$status</span> <span class=\"string\">$body_bytes_sent &quot;$http_referer&quot; &#x27; #状态  发送的大小  响应的头</span></span><br><span class=\"line\">        <span class=\"meta\">&#x27;&quot;$http_user_agent&quot;</span> <span class=\"string\">$request_time&#x27;; #客户端使用的浏览器  页面响应的时间</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    #动态转发         </span></span><br><span class=\"line\">    <span class=\"attr\">upstream</span> <span class=\"string\">web1 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        #每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session的问题。配置了ip_hash就没有负载均衡的效果了，每次访问的都是同一个tomcat</span></span><br><span class=\"line\"><span class=\"comment\">        #ip_hash; </span></span><br><span class=\"line\"><span class=\"comment\">        #转发的后端的tomcat服务器,weight表示转发的权重,越大转发的次数越多,机器性能不一样配置的weight值不一样     </span></span><br><span class=\"line\">        <span class=\"attr\">server</span>   <span class=\"string\">192.168.152.129:8080 weight=1 max_fails=2 fail_timeout=30s;</span></span><br><span class=\"line\">        <span class=\"attr\">server</span>   <span class=\"string\">192.168.152.129:8081 weight=1 max_fails=2 fail_timeout=30s;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">upstream</span> <span class=\"string\">web2 &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">server</span>   <span class=\"string\">192.168.152.129:8090 weight=1 max_fails=2 fail_timeout=30s;</span></span><br><span class=\"line\">        <span class=\"attr\">server</span>   <span class=\"string\">192.168.152.129:8091 weight=1 max_fails=2 fail_timeout=30s;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">listen</span>       <span class=\"string\">80; #监听80端口</span></span><br><span class=\"line\">        <span class=\"attr\">server_name</span>  <span class=\"string\">www.dbspread.com; #域名</span></span><br><span class=\"line\"><span class=\"comment\">        #rewrite规则</span></span><br><span class=\"line\">        <span class=\"attr\">index</span>  <span class=\"string\">index.jsp index.html index.htm;</span></span><br><span class=\"line\">        <span class=\"attr\">root</span>   <span class=\"string\">/usr/local/nginx/html; #定义服务器的默认网站根目录位置</span></span><br><span class=\"line\"><span class=\"comment\">        #重定向</span></span><br><span class=\"line\">        <span class=\"attr\">if</span> <span class=\"string\">($host != &#x27;www.dbspread.com&#x27; )&#123; </span></span><br><span class=\"line\">            <span class=\"attr\">rewrite</span> <span class=\"string\">^/(.*)$  http://www.dbspread.com/$1  permanent;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        #防盗链</span></span><br><span class=\"line\">        <span class=\"attr\">location</span> <span class=\"string\">~* \\.(rmvb|jpg|png|swf|flv)$ &#123; #rmvb|jpg|png|swf|flv表示对rmvb|jpg|png|swf|flv后缀的文件实行防盗链</span></span><br><span class=\"line\">            <span class=\"attr\">valid_referers</span> <span class=\"string\">none blocked  www.dbspread.com; #表示对www.dbspread.com此域名开通白名单，比如在www.test.com的index.html引用download/av123.rmvb,无效</span></span><br><span class=\"line\">            <span class=\"attr\">root</span>   <span class=\"string\">html/b;</span></span><br><span class=\"line\">            <span class=\"attr\">if</span> <span class=\"string\">($invalid_referer) &#123; #如果请求不是从www.dbspread.com白名单发出来的请求，直接重定向到403.html这个页面或者返回403 </span></span><br><span class=\"line\"><span class=\"comment\">                #rewrite ^/ http://www.dbspread.com/403.html;</span></span><br><span class=\"line\">                <span class=\"attr\">return</span> <span class=\"string\">403;</span></span><br><span class=\"line\">            <span class=\"attr\">&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        #监听完成以后通过斜杆(/)拦截请求转发到后端的tomcat服务器</span></span><br><span class=\"line\">        <span class=\"attr\">location</span> <span class=\"string\">/ </span></span><br><span class=\"line\">            <span class=\"attr\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            #如果后端的服务器返回502、504、执行超时等错误，自动将请求转发到upstream负载均衡池中的另一台服务器，实现故障转移。</span></span><br><span class=\"line\">            <span class=\"attr\">proxy_next_upstream</span> <span class=\"string\">http_502 http_504 error timeout invalid_hea</span></span><br></pre></td></tr></table></figure>\n\n<p>到这一步环境准备已完成，相关的配置也修改完成，下面我们来查看效果</p>\n<h2><span id=\"配置hosts域名映射\">配置hosts域名映射</span></h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">192.168.152.200</span>  <span class=\"string\">www.dbspread.com</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：这里192.168.152.200 是keepalived里面virtual_ipaddress配置的虚拟ip</p>\n</blockquote>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">virtual_ipaddress</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"meta\">192.168.152.200</span> <span class=\"string\"># 定义虚拟ip(VIP)，可多设，每行一个</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>到这一步环境准备已完成，相关的配置也修改完成，下面我们来查看效果</p>\n<p><strong>分别启动两个tomcat</strong></p>\n<p>启动过程这里不再详述。</p>\n<h2><span id=\"分别启动keepalived主节点和从节点\">分别启动keepalived主节点和从节点</span></h2><p>分别启动192.168.152.130（keepalived主节点）和 192.168.152.129（keepalived从节点）的keepalived</p>\n<p>启动命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/keepalived/sbin/keepalived  </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20210729000733208-7488454.png\" alt=\"image-20210729000733208\"></p>\n<p>可以看到keepalived和nginx都启动了</p>\n<p>在浏览器输入<a href=\"http://www.dpspread.com域名访问/\">www.dpspread.com域名访问</a></p>\n<p><strong>停掉主节点192.168.152.130的keepalived和nginx</strong></p>\n<p>下面停掉主节点192.168.152.130的keepalived和nginx</p>\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20210729000901750-7488543.png\" alt=\"image-20210729000901750\"></p>\n<p>可以看到从节点变为主节点了</p>\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20210729000949604-7488590.png\" alt=\"image-20210729000949604\"></p>\n<p>在浏览器输入地址<a href=\"http://www.dpspread.com访问,可以看到访问正常/\">www.dpspread.com访问，可以看到访问正常</a></p>\n<p><strong>重新启动主节点192.168.152.130</strong></p>\n<p>可以看到主节点重新启动以后变为主节点了</p>\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20210729001128645-7488689.png\" alt=\"image-20210729001128645\"></p>\n<p>之前变为主节点的从节点又变回从节点了</p>\n<p><img src=\"/2021/07/25/technology-stack/loadbalance/nginx/nginx%E5%88%9D%E6%8E%A2%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20210729001216534-7488737.png\" alt=\"image-20210729001216534\"></p>\n<p>至此，keepalive+nginx高可用搭建完成。</p>\n","categories":["loadbalance"],"tags":["loadbalance"]},{"title":"OpenResty接入层网关设计及实现","url":"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E6%8E%A5%E5%85%A5%E5%B1%82%E7%BD%91%E5%85%B3%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0\">接入层网关架构设计与实现</a></li>\n<li><a href=\"#openresty-%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90\">OpenResty 原理剖析</a></li>\n<li><a href=\"#openresty-%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">OpenResty 请求生命周期</a></li>\n<li><a href=\"#worker-%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%88%A9%E5%99%A8-shared-dict\">worker 间共享数据利器: shared dict</a></li>\n<li><a href=\"#%E8%B7%AF%E7%94%B1%E7%AD%96%E7%95%A5%E6%8F%92%E4%BB%B6%E5%8C%96%E5%AE%9E%E7%8E%B0\">路由策略插件化实现</a></li>\n<li><a href=\"#%E5%90%8E%E7%AB%AF%E9%9B%86%E7%BE%A4%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE\">后端集群的动态配置</a></li>\n<li><a href=\"#%E7%BD%91%E5%85%B3%E6%9C%80%E7%BB%88%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%9B%BE\">网关最终架构设计图</a></li>\n</ul>\n<!-- tocstop -->\n\n<h1><span id=\"前言\">前言</span></h1><p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p>\n<span id=\"more\"></span>\n\n<p>可以简单理解为，OpenResty = Nginx + Lua, 通过 Lua 扩展 Nginx 实现的可伸缩的 Web 平台 。它利用了 Nginx 的高性能，又在其基础上添加了 Lua 的脚本语言来让 Nginx 也具有了动态的特性。通过 OpenResty 中 lua-Nginx-module 模块中提供的 Lua API，我们可以动态地控制路由、上游、SSL 证书、请求、响应等。甚至可以在不重启 OpenResty 的前提下，修改业务的处理逻辑，并不局限于 OpenResty 提供的 Lua API。</p>\n<p>关于静态和动态有一个很合适的类比：如果把 Web 服务器当做是一个正在高速公路上飞驰的汽车，Nginx 需要停车才能更换轮胎，更换车漆颜色，而 OpenResty 中可以边跑边换轮胎，更换车漆，甚至更换发动机，直接让普通的汽车变成超跑！</p>\n<p>除了以上的动态性，还有两个特性让 OpenResty 独出一格。</p>\n<p><strong>详尽的文档和测试用例</strong></p>\n<p>作为开源项目，文档和测试毫无疑问是其是否靠谱的关键，它的文档非常详细，作者把每个注意的点都写在文档上了，多数时候只要看文档即可，每一个测试案例都包含完整的 Nginx 配置和 lua 代码。以及测试的输入数据和预期的输出数据。</p>\n<p><strong>同步非阻塞</strong></p>\n<p>OpenResty 在诞生之初就支持了协程，并且基于此实现了同步非阻塞的编程模型。</p>\n<p>网关作为所有请求的流量入口，主要承担着安全，限流，熔断降级，监控，日志，风控，鉴权等功能，网关主要有两种类型</p>\n<ul>\n<li>一种是接入层网关（access gateway），主要负责路由，WAF（防止SQL Injection, XSS, 路径遍历, 窃取敏感数据,CC攻击等），限流，日志，缓存等，这一层的网关主要承载着将请求路由到各个应用层网关的功能</li>\n<li>另一种是应用层网关，比如现在流行的微服务，各个服务可能是用不同的语言写的，如 PHP，Java 等，那么接入层就要将请求路由到相应的应用层集群，再由相应的应用层网关进行鉴权等处理，处理完之后再调用相应的微服务进行处理，应用层网关也起着路由，超时，重试，熔断等功能。</li>\n</ul>\n<p>目前市面上比较流行的系统架构如下</p>\n<p><img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/d133166d81614e1b838fdd74cedcf67e.png\" alt=\"img\"></p>\n<p>可以看到接入层网关承载着公司的所有流量，对性能有很高的要求，它的设计决定着整个系统的上限。所以我们今天主要谈谈接入层网关的设计。</p>\n<h1><span id=\"接入层网关架构设计与实现\">接入层网关架构设计与实现</span></h1><p>接入层网关的核心功能是：<strong>「根据路由规则将请求分发到对应的后端集群」</strong>，所以要实现如下几个功能模型 。</p>\n<p>1、 路由：根据请求的 host, url 等规则转发到指定的上游（相应的后端集群） </p>\n<p>2、 路由策略插件化：这是网关的<strong>「灵魂所在」</strong>，路由中会有身份认证，限流限速，安全防护（如 IP 黑名单，refer异常，UA异常，需第一时间拒绝）等规则，这些规则以插件的形式互相组合起来以便只对某一类的请求生效，每个插件都即插即用，互不影响，这些插件应该是<strong>「动态可配置」</strong>的，动态生效的（无须重启服务），为啥要可动态可配置呢，因为每个请求对应的路由逻辑，限流规则，最终请求的后端集群等规则是不一样的</p>\n<img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/979030a82ee047d68cfc627bef22cad1.jpeg\" alt=\"img\" style=\"zoom: 50%;\">\n\n<p>如图示，两个请求对应的路由规则是不一样的，它们对应的路由规则（限流，rewrite）等通过各个规则插件组合在一起，可以看到，光两个请求 url 的路由规则就有挺多的，如果一个系统大到一定程度，url 会有不少，就会有不少规则，这样每个请求的规则就必须<strong>「可配置化」</strong>，<strong>「动态化」</strong>，最好能在管理端集中控制，统一下发。</p>\n<p>3、后端集群的动态变更</p>\n<p>路由规则的应用是为了确定某一类请求经过这些规则后最终到达哪一个集群，而我们知道请求肯定是要打到某一台集群的 ip 上的，而机器的扩缩容其实是比较常见的，所以必须支持动态变更，总不能我每次上下线机器的时候都要重启系统让它生效吧。</p>\n<p>4、监控统计，请求量、错误率统计等等</p>\n<p>这个比较好理解，在接入层作所有流量的请求，错误统计，便于打点，告警，分析。</p>\n<p>要实现这些需求就必须对我们采用的技术：OpenResty 有比较详细的了解，所以下文会简单介绍一下 OpenResty 的知识点。</p>\n<h1><span id=\"openresty-原理剖析\">OpenResty 原理剖析</span></h1><p>由于 OpenResty 基于 Nginx 实现的，我们先来看看 Nginx 的工作原理</p>\n<img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/aca32d162ba34b5c91f6007818b2121d.jpeg\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>Nginx 启动后，会有一个 master 进程和多个 worker 进程 ， master 进程接受管理员的信号量（如 Nginx -s reload, -s stop）来管理 worker 进程，master 本身并不接收 client 的请求，主要由 worker 进程来接收请求，不同于 apache 的每个请求会占用一个线程，且是同步IO，Nginx 是异步非阻塞的，每个 worker 可以同时处理的请求数只受限于内存大小，这里就要简单地了解一下 nginx 采用的 epoll 模型：</p>\n<p>epoll 采用多路复用模型，即同一时间虽然可能会有多个请求进来， 但只会用一个线程去监视，然后哪个请求数据准备好了，就调用相应的线程去处理，就像图中所示，如同拨开关一样，同一时间只有一个线程在处理， Nginx 底层就是用的 epoll ，基于事件驱动模型，每个请求进来注册事件并注册 callback 回调函数，等数据准入好了，就调用回调函数进行处理，它是异步非阻塞的，所以性能很高。</p>\n<p>打个简单的比方，我们都有订票的经验，当我们委托酒店订票时，接待员会先把我们的电话号码和相关信息等记下来（注册事件），挂断电话后接待员在操作期间我们就可以去做其他事了（非阻塞），当接待员把手续搞好后会主动打电话给我们通知我们票订好了（回调）。</p>\n<p>worker 进程是从 master fork 出来的，这意味着 worker 进程之间是互相独立的，这样不同 worker 进程之间处理并发请求几乎没有同步锁的限制，好处就是一个 worker 进程挂了，不会影响其他进程，我们一般把 worker 数量设置成和 CPU 的个数，这样可以减少不必要的 CPU 切换，提升性能，每个 worker 都是单线程执行的。那么 LuaJIT 在 OpenResty 架构中的位置是怎样的呢。</p>\n<img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/0824a88204a74393b455d5d51825fcca.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>首先启动的 master 进程带有 LuaJIT 的机虚拟，而 worker 进程是从 master 进程 fork 出来的，在 worker 内进程的工作主要由 Lua 协程来完成，也就是说在同一个 worker 内的所有协程，都会共享这个 LuaJIT 虚拟机，每个 worker 进程里 lua 的执行也是在这个虚拟机中完成的。</p>\n<p>同一个时间点，worker 进程只能处理一个用户请求，也就是说只有一个 lua 协程在运行，那为啥 OpenResty 能支持百万并发请求呢，这就需要了解 Lua 协程与 Nginx 事件机制是如何配合的了。</p>\n<img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/3e074ad22e0b4aaf900d4ad8c710b47e.png\" alt=\"img\" style=\"zoom:67%;\">\n\n<p>如图示，当用 Lua 调用查询 MySQL 或 网络 IO 时，虚拟机会调用 Lua 协程的 yield 把自己挂起，在 Nginx 中注册回调，此时 worker 就可以处理另外的请求了（非阻塞），等到 IO 事件处理完了， Nginx 就会调用 resume 来唤醒 lua 协程。</p>\n<p>事实上，由 OpenResty 提供的所有 API，都是非阻塞的，下文提到的与 MySQL，Redis 等交互，都是非阻塞的，所以性能很高。</p>\n<h1><span id=\"openresty-请求生命周期\">OpenResty 请求生命周期</span></h1><p>Nginx 的每个请求有 11 个阶段，OpenResty 也有11 个 *_by_lua 的指令，如下图示:</p>\n<p><img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/9a7c8592727044c49e9888ddfc3c04ea.png\" alt=\"img\"></p>\n<p>各个阶段 *_by_lua 的解释如下</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">set<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua：设置变量；</span><br><span class=\"line\">rewrite<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua：转发、重定向等；</span><br><span class=\"line\">access<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua：准入、权限等；</span><br><span class=\"line\">content<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua：生成返回内容；</span><br><span class=\"line\">header<span class=\"built_in\">_</span>filter<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua：应答头过滤处理；</span><br><span class=\"line\">body<span class=\"built_in\">_</span>filter<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua：应答体过滤处理；</span><br><span class=\"line\">log<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua：日志记录。</span><br></pre></td></tr></table></figure>\n\n<p>这样分阶段有啥好处呢，假设你原来的 API 请求都是明文的</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> 明文协议版本</span><br><span class=\"line\">location /request &#123;</span><br><span class=\"line\">    content<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua &#x27;...&#x27;;       <span class=\"params\">#</span> 处理请求</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在需要对其加上加密和解密的机制，只需要在 access 阶段解密， 在 body filter 阶段加密即可，原来 content 的逻辑无需做任务改动，有效实现了代码的解藕。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">#</span> 加密协议版本</span><br><span class=\"line\">location /request &#123;</span><br><span class=\"line\">    access<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua &#x27;...&#x27;;        <span class=\"params\">#</span> 请求体解密</span><br><span class=\"line\">    content<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua &#x27;...&#x27;;       <span class=\"params\">#</span> 处理请求，不需要关心通信协议</span><br><span class=\"line\">    body<span class=\"built_in\">_</span>filter<span class=\"built_in\">_</span>by<span class=\"built_in\">_</span>lua &#x27;...&#x27;;   <span class=\"params\">#</span> 应答体加密</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再比如我们不是要要上文提到网关的核心功能之一不是要监控日志吗，就可以统一在 log_by_lua 上报日志，不影响其他阶段的逻辑。</p>\n<h1><span id=\"worker-间共享数据利器-shared-dict\">worker 间共享数据利器: shared dict</span></h1><p>worker 既然是互相独立的进程，就需要考虑其共享数据的问题， OpenResty 提供了一种高效的数据结构: shared dict ,可以实现在 worker 间共享数据，shared dict 对外提供了 20 多个 Lua API，都是原子操作的，避免了高并发下的竞争问题。</p>\n<h1><span id=\"路由策略插件化实现\">路由策略插件化实现</span></h1><p>有了以上 OpenResty 点的铺垫，来看看上文提的网关核心功能 「路由策略插件化」,「后端集群的动态变更」如何实现</p>\n<p>首先针对某个请求的路由策略大概是这样的</p>\n<img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/ac3bbde78f02400bbc5f1bf97c845bbb.png\" alt=\"img\" style=\"zoom:67%;\">\n\n<p>整个插件化的步骤大致如下</p>\n<p>1、每条策略由 url ,action, cluster 等组成，代表请求 url 在打到后端集群过程中最终经历了哪些路由规则，这些规则统一在我们的路由管理平台配置，存在 db 里。</p>\n<p>2、OpenResty 启动时，在请求的 init 阶段 worker 进程会去拉取这些规则，将这些规则编译成一个个可执行的 lua 函数，这一个个函数就对应了一条条的规则。</p>\n<p><img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/e8d1190893e64121b658a18146bcf2f1.jpeg\" alt=\"img\"></p>\n<p>需要注意的是为了避免重复去 MySQL 中拉取数据，某个 worker 从 MySQL 拉取完规则（此步需要加锁，避免所有 worker 都去拉取）或者后端集群等配置信息后要将其保存在 shared dict 中，这样之后所有的 worker 请求只要从 shared dict 中获取这些规则，然后将其映射成对应模块的函数即可，如果配置规则有变动呢，配置后台通过接口通知 OpenResty 重新加载一下即可</p>\n<img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/822c06f6fba449878034192cd204bc88.jpeg\" alt=\"img\" style=\"zoom:50%;\">\n\n<p>经过路由规则确定好每个请求对应要打的后端集群后，就需要根据 upstream 来确定最终打到哪个集群的哪台机器上，我们看看如何动态管理集群。</p>\n<h1><span id=\"后端集群的动态配置\">后端集群的动态配置</span></h1><p>在 Nginx 中配置 upstream 的格式如下</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server backend1.example.com weight=5;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server 192.0.0.1 backup;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上这个示例是按照权重（weight）来划分的，6 个请求进来，5个请求打到 backend1.example.com, 1 个请求打到 backend2.example.com,如果这两台机器都不可用，就打到 192.0.0.1，这种静态配置的方式 upstream 的方式确实可行，但我们知道机器的扩缩容有时候比较频繁，如果每次机器上下线都要手动去改，并且改完之后还要重新去 reload 无疑是不可行的，出错的概率很大，而且每次配置都要 reload 对性能的损耗也是挺大的，为了解决这个问题，OpenResty 提供了一个 dyups 的模块来解决此问题， 它提供了一个 dyups api,可以动态增，删，创建 upsteam，所以在 init 阶段我们会先去拉取集群信息，构建 upstream，之后如果集群信息有变动，会通过如下形式调用 dyups api 来更新 upstream</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 动态配置 upstream 接口站点</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">     listen 127.0.0.1:81;</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">          dyups<span class=\"built_in\">_</span>interface;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- 增加 upstream:user<span class=\"built_in\">_</span>backend</span><br><span class=\"line\">curl -d &quot;server 10.53.10.191;&quot; 127.0.0.1:81/upstream/user<span class=\"built_in\">_</span>backend</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除 upstream:user<span class=\"built_in\">_</span>backend</span><br><span class=\"line\">curl -i -X DELETE 127.0.0.1:81/upstream/user<span class=\"built_in\">_</span>backend</span><br></pre></td></tr></table></figure>\n\n<p>使用 dyups 就解决了动态配置 upstream 的问题</p>\n<h1><span id=\"网关最终架构设计图\">网关最终架构设计图</span></h1><p><img src=\"/2021/09/21/technology-stack/loadbalance/OpenResty/OpenResty-build/bd72665e1a924db6886a048c207d3291.png\" alt=\"img\"></p>\n<p>通过这样的设计，最终实现了网关的配置化，动态化。</p>\n","categories":["loadbalance"],"tags":["loadbalance"]}]